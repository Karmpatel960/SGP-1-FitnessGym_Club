{"version":3,"file":"subscriptions.js","sources":["../src/subscriptions.ts"],"sourcesContent":["import { Backoff } from '@twilio/operation-retrier';\nimport { SyncError } from './utils/syncerror';\nimport log from './utils/logger';\n\nimport { SyncEntity } from './entity';\nimport { Configuration, Network } from './interfaces/services';\n\nimport { TransportUnavailableError } from 'twilsock';\n\n/**\n * A data container used by the Subscriptions class to track subscribed entities' local\n * representations and their state.\n */\nclass SubscribedEntity {\n  private readonly localObject: SyncEntity;\n  pendingCorrelationId: number;\n  pendingAction: string;\n  rejectedWithError: any;\n  retryCount: number;\n\n  private established: boolean;\n\n  constructor(entity: SyncEntity) {\n    this.localObject = entity;\n    this.pendingCorrelationId = null;\n    this.pendingAction = null;\n    this.established = false;\n    this.retryCount = 0;\n  }\n\n  get sid(): string {\n    return this.localObject.sid;\n  }\n\n  get type(): string {\n    return this.localObject.type;\n  }\n\n  get lastEventId(): number {\n    return this.localObject.lastEventId;\n  }\n\n  // below properties are specific to Insights only\n  get indexName(): string {\n    return this.localObject.indexName;\n  }\n\n  get queryString(): string {\n    return this.localObject.queryString;\n  }\n\n  get isEstablished(): boolean {\n    return this.established;\n  }\n\n  update(event, isStrictlyOrdered) {\n    this.localObject._update(event, isStrictlyOrdered);\n  }\n\n  updatePending(action: Action, correlationId: number) {\n    this.pendingAction = action;\n    this.pendingCorrelationId = correlationId;\n  }\n\n  reset() {\n    this.updatePending(null, null);\n    this.retryCount = 0;\n    this.established = false;\n    this.setSubscriptionState('none');\n  }\n\n  markAsFailed(message) {\n    this.rejectedWithError = message.error;\n    this.updatePending(null, null);\n    this.localObject.reportFailure(\n      new SyncError(`Failed to subscribe on service events: ${message.error.message}`, message.error.status, message.error.code));\n  }\n\n  complete(eventId: number): void {\n    this.updatePending(null, null);\n    this.established = true;\n    this.localObject._advanceLastEventId(eventId);\n  }\n\n  setSubscriptionState(newState) {\n    this.localObject._setSubscriptionState(newState);\n  }\n}\n\ninterface SubscriptionsServices {\n  config: Configuration;\n  network: Network;\n}\n\ntype Action = 'establish' | 'cancel' | null;\n\ninterface PokeBatch {\n  action: Action;\n  subscriptions: SubscribedEntity[];\n}\n\ntype PokeReason = 'ttl' | 'reconnect';\n\n/**\n * @class Subscriptions\n * @classdesc A manager which, in batches of varying size, continuously persists the\n *      subscription intent of the caller to the Sync backend until it achieves a\n *      converged state.\n */\nclass Subscriptions {\n  private services: SubscriptionsServices;\n\n  // This is always the full set of subscribables (SubscribedEntity instances) intended by\n  // the client. At any point, whatever the state of these subscriptions on the server, this\n  // is the intent of the user to which the SDK must converge.\n  private subscriptions: Map<string, SubscribedEntity>;\n\n  // This includes the set of subscribables (SubscribedEntity instances) for whom a request\n  // has been dispatched (whether or not this particular request ultimately succeeds) to\n  // establish a live subscription. Entities are removed when the corresponding \"cancel\"\n  // request is dispatched.\n  private persisted: Map<string, SubscribedEntity>;\n\n  private latestPokeResponseArrivalTimestampByCorrelationId: Map<number, number>;\n\n  private backoff: Backoff;\n\n  private isConnected: boolean = false;\n\n  private maxBatchSize: number = 100;\n\n  // If the server includes a `ttl_in_s` attribute in the poke response, subscriptionTtlTimer is started for that duration\n  // such that when it fires, it repokes the entire sync set (i.e., emulates a reconnect). Every reconnect resets the timer.\n  // After the timer has fired, the first poke request includes a `reason: ttl` attribute in the body.\n  private subscriptionTtlTimer: any | null = null;\n  private pendingPokeReason: PokeReason = null;\n\n  /**\n   * @constructor\n   * Prepares a new Subscriptions manager object with zero subscribed or persisted subscriptions.\n   *\n   * @param {object} config may include a key 'backoffConfig', wherein any of the parameters\n   *      of Backoff.exponential (from npm 'backoff') are valid and will override the defaults.\n   *\n   * @param {Network} must be a viable running Sync Network object, useful for routing requests.\n   */\n  constructor(services: SubscriptionsServices) {\n    this.services = services;\n    this.subscriptions = new Map<string, SubscribedEntity>();\n    this.persisted = new Map<string, SubscribedEntity>();\n    this.latestPokeResponseArrivalTimestampByCorrelationId = new Map<number, number>();\n\n    const defaultBackoffConfig = {\n      randomisationFactor: 0.2,\n      initialDelay: 100,\n      maxDelay: 2 * 60 * 1000\n    };\n    this.backoff = Backoff.exponential(Object.assign(defaultBackoffConfig, this.services.config.backoffConfig));\n\n    // This block is triggered by #_persist. Every request is executed in a series of (ideally 1)\n    // backoff 'ready' event, at which point a new subscription set is calculated.\n    this.backoff.on('ready', () => {\n      let {action: action, subscriptions: subscriptionRequests} = this.getSubscriptionUpdateBatch();\n      if (action) {\n        this.applyNewSubscriptionUpdateBatch(action, subscriptionRequests);\n      } else {\n        this.backoff.reset();\n        log.debug('All subscriptions resolved.');\n      }\n    });\n  }\n\n  private getSubscriptionUpdateBatch(): PokeBatch {\n    function subtract(these: Map<string, SubscribedEntity>, those: Map<string, SubscribedEntity>, action: Action, limit) {\n      let result = [];\n      for (let [thisKey, thisValue] of these) {\n        const otherValue = those.get(thisKey);\n        if (!otherValue && action !== thisValue.pendingAction && !thisValue.rejectedWithError) {\n          result.push(thisValue);\n          if (limit && result.length >= limit) {\n            break;\n          }\n        }\n      }\n      return result;\n    }\n\n    let listToAdd = subtract(this.subscriptions, this.persisted, 'establish', this.maxBatchSize);\n    if (listToAdd.length > 0) {\n      return {action: 'establish', subscriptions: listToAdd};\n    }\n\n    let listToRemove = subtract(this.persisted, this.subscriptions, 'cancel', this.maxBatchSize);\n    if (listToRemove.length > 0) {\n      return {action: 'cancel', subscriptions: listToRemove};\n    }\n\n    return {action: null, subscriptions: null};\n  }\n\n  private persist() {\n    this.backoff.backoff();\n  }\n\n  private async applyNewSubscriptionUpdateBatch(action, requests: SubscribedEntity[]) {\n    if (!this.isConnected) {\n      log.debug(`Twilsock connection (required for subscription) not ready; waiting…`);\n      this.backoff.reset();\n      return;\n    }\n\n    // Keeping in mind that events may begin flowing _before_ we receive the response\n    requests = this.processLocalActions(action, requests);\n\n    const correlationId = new Date().getTime();\n    for (const subscribed of requests) {\n      this.recordActionAttemptOn(subscribed, action, correlationId);\n    }\n\n    let reason: PokeReason = this.pendingPokeReason;\n    this.pendingPokeReason = null;\n\n    // Send this batch to the service\n    try {\n      let response = await this.request(action, correlationId, reason, requests);\n\n      let newMaxBatchSize = response.body.max_batch_size;\n      if (!isNaN(parseInt(newMaxBatchSize)) && isFinite(newMaxBatchSize) && newMaxBatchSize > 0) {\n        this.maxBatchSize = newMaxBatchSize;\n      }\n\n      if (!this.subscriptionTtlTimer) {\n        let subscriptionTtlInS = response.body.ttl_in_s;\n        let isNumeric = !isNaN(parseFloat(subscriptionTtlInS)) && isFinite(subscriptionTtlInS);\n        let isValidTtl = isNumeric && subscriptionTtlInS > 0;\n        if (isValidTtl) {\n          this.subscriptionTtlTimer = setTimeout(() => this.onSubscriptionTtlElapsed(), subscriptionTtlInS * 1000);\n        }\n      }\n\n      if (action === 'establish') {\n        const estimatedDeliveryInMs = response.body.estimated_delivery_in_ms;\n        let isNumeric = !isNaN(parseFloat(estimatedDeliveryInMs)) && isFinite(estimatedDeliveryInMs);\n        let isValidTimeout = isNumeric && estimatedDeliveryInMs > 0;\n        if (isValidTimeout) {\n          setTimeout(() => this.verifyPokeDelivery(correlationId, estimatedDeliveryInMs, requests), estimatedDeliveryInMs);\n        } else {\n          log.error(`Invalid timeout: ${estimatedDeliveryInMs}`);\n        }\n        requests.filter(r => r.pendingCorrelationId === correlationId)\n          .forEach(r => r.setSubscriptionState('response_in_flight'));\n      }\n      this.backoff.reset();\n    } catch (e) {\n      for (const attemptedSubscription of requests) {\n        this.recordActionFailureOn(attemptedSubscription, action);\n      }\n\n      if (e instanceof TransportUnavailableError) {\n        log.debug(`Twilsock connection (required for subscription) not ready (c:${correlationId}); waiting…`);\n        this.backoff.reset();\n      } else {\n        log.debug(`Failed an attempt to ${action} subscriptions (c:${correlationId}); retrying`, e);\n        this.persist();\n      }\n    }\n  }\n\n  private verifyPokeDelivery(correlationId: number, estimatedDeliveryInMs: number, requests: SubscribedEntity[]) {\n    const lastReceived = this.latestPokeResponseArrivalTimestampByCorrelationId.get(correlationId);\n    const silencePeriod = lastReceived ? (new Date().getTime() - lastReceived)\n      : estimatedDeliveryInMs;\n    if (silencePeriod >= estimatedDeliveryInMs) {\n      // If we haven't received _any_ responses from that poke request for the duration of estimated_delivery_in_ms, poke again\n      requests\n        .filter(r => r.pendingCorrelationId === correlationId)\n        .forEach(r => {\n          r.updatePending(null, null);\n          r.retryCount++;\n          this.persisted.delete(r.sid);\n        });\n      this.persist();\n      this.latestPokeResponseArrivalTimestampByCorrelationId.delete(correlationId);\n    } else {\n      // Otherwise, the poke responses are probably in transit and we should wait for them\n      const timeoutExtension = estimatedDeliveryInMs - silencePeriod;\n      setTimeout(() => this.verifyPokeDelivery(correlationId, estimatedDeliveryInMs, requests), timeoutExtension);\n    }\n  }\n\n  private processLocalActions(action, requests) {\n    if (action === 'cancel') {\n      return requests.filter(request => !request.rejectedWithError);\n    }\n    return requests;\n  }\n\n  private recordActionAttemptOn(attemptedSubscription: SubscribedEntity, action, correlationId) {\n    attemptedSubscription.setSubscriptionState('request_in_flight');\n    if (action === 'establish') {\n      this.persisted.set(attemptedSubscription.sid, attemptedSubscription);\n      attemptedSubscription.updatePending(action, correlationId);\n    } else { // cancel\n      let persistedSubscription = this.persisted.get(attemptedSubscription.sid);\n      if (persistedSubscription) {\n        persistedSubscription.updatePending(action, correlationId);\n      }\n    }\n  }\n\n  private recordActionFailureOn(attemptedSubscription: SubscribedEntity, action) {\n    attemptedSubscription.setSubscriptionState('none');\n    attemptedSubscription.updatePending(null, null);\n    if (action === 'establish') {\n      this.persisted.delete(attemptedSubscription.sid);\n    }\n  }\n\n  private request(action, correlationId, reason: PokeReason, objects: SubscribedEntity[]) {\n    let requests = objects.map(object => ({\n        object_sid: object.sid,\n        object_type: object.type,\n        last_event_id: action === 'establish' ? object.lastEventId : undefined,\n        index_name: action === 'establish' ? object.indexName : undefined,\n        query_string: action === 'establish' ? object.queryString : undefined,\n      })\n    );\n    let retriedRequests = objects.filter(a => a.retryCount > 0).length;\n\n    log.debug(`Attempting '${action}' request (c:${correlationId}):`, requests);\n    const requestBody: any = {\n      event_protocol_version: 4,\n      action,\n      correlation_id: correlationId,\n      retried_requests: retriedRequests,\n      ttl_in_s: -1,\n      requests\n    };\n    if (reason === 'ttl') {\n      requestBody.reason = reason;\n    }\n\n    return this.services.network.post(this.services.config.subscriptionsUri, requestBody);\n  }\n\n  /**\n   * Establishes intent to be subscribed to this entity. That subscription will be effected\n   * asynchronously.\n   * If subscription to the given sid already exists, it will be overwritten.\n   *\n   * @param {String} sid should be a well-formed SID, uniquely identifying a single instance of a Sync entity.\n   * @param {Object} entity should represent the (singular) local representation of this entity.\n   *      Incoming events and modifications to the entity will be directed at the _update() function\n   *      of this provided reference.\n   *\n   * @return undefined\n   */\n  add(sid: string, entity: SyncEntity): void {\n    log.debug(`Establishing intent to subscribe to ${sid}`);\n    const existingSubscription = this.subscriptions.get(sid);\n    if (existingSubscription && entity && existingSubscription.lastEventId === entity.lastEventId) {\n      // If last event id is the same as before - we're fine\n      return;\n    }\n\n    this.persisted.delete(sid);\n    this.subscriptions.set(sid, new SubscribedEntity(entity));\n    this.persist();\n  }\n\n  /**\n   * Establishes the caller's intent to no longer be subscribed to this entity. Following this\n   * call, no further events shall be routed to the local representation of the entity, even\n   * though a server-side subscription may take more time to actually terminate.\n   *\n   * @param {string} sid should be any well-formed SID, uniquely identifying a Sync entity.\n   *      This call only has meaningful effect if that entity is subscribed at the\n   *      time of call. Otherwise does nothing.\n   *\n   * @return undefined\n   */\n  remove(sid: string): void {\n    log.debug(`Establishing intent to unsubscribe from ${sid}`);\n    const removed = this.subscriptions.delete(sid);\n    if (removed) {\n      this.persist();\n    }\n  }\n\n  /**\n   * The point of ingestion for remote incoming messages (e.g. new data was written to a map\n   * to which we are subscribed).\n   *\n   * @param {object} message is the full, unaltered body of the incoming notification.\n   *\n   * @return undefined\n   */\n  acceptMessage(message: any, isStrictlyOrdered: boolean): void {\n    log.trace('Subscriptions received', message);\n\n    const eventType = message.event_type;\n    const events = typeof message.events !== 'undefined'\n      ? message.events\n      : [message.event];\n    const correlationId = message.correlation_id;\n\n    if (correlationId) {\n      this.latestPokeResponseArrivalTimestampByCorrelationId.set(correlationId, new Date().getTime());\n    }\n\n    for (const event of events) {\n      let matchedEventType;\n      switch (message.event_type) {\n        case 'subscription_established':\n          this.applySubscriptionEstablishedMessage(event, correlationId);\n          break;\n        case 'subscription_canceled':\n          this.applySubscriptionCancelledMessage(event, correlationId);\n          break;\n        case 'subscription_failed':\n          this.applySubscriptionFailedMessage(event, correlationId);\n          break;\n        case (matchedEventType = eventType.match(/^(?:map|list|document|stream|live_query)_/) || {}).input: {\n          let typedSid;\n          switch (matchedEventType[0]) {\n            case 'map_':\n              typedSid = event.map_sid;\n              break;\n            case 'list_':\n              typedSid = event.list_sid;\n              break;\n            case 'document_':\n              typedSid = event.document_sid;\n              break;\n            case 'stream_':\n              typedSid = event.stream_sid;\n              break;\n            case 'live_query_':\n              typedSid = event.query_id;\n              // hack to mark replay events for LiveQuery as strictly ordered, due to lack of special type of notification for them\n              // (normally only replay events would have `twilio.sync.event` type, but LiveQuery non-replay events were also assigned\n              // to this type in legacy clients, which we have to support now; hence a hack)\n              isStrictlyOrdered = false; // explicitly override it due to code in router.ts does not know about LiveQueries\n              if (message.strictly_ordered === true) {\n                isStrictlyOrdered = true;\n              }\n              break;\n            default:\n              typedSid = undefined;\n          }\n\n          this.applyEventToSubscribedEntity(typedSid, event, eventType, isStrictlyOrdered);\n          break;\n        }\n        default:\n          log.debug(`Dropping unknown message type ${eventType}`);\n          break;\n      }\n    }\n  }\n\n  private applySubscriptionEstablishedMessage(message, correlationId) {\n    const sid = message.object_sid;\n    let subscriptionIntent = this.persisted.get(message.object_sid);\n    if (subscriptionIntent && subscriptionIntent.pendingCorrelationId === correlationId) {\n      if (message.replay_status === 'interrupted') {\n        log.debug(`Event Replay for subscription to ${sid} (c:${correlationId}) interrupted; continuing eagerly.`);\n        subscriptionIntent.updatePending(null, null);\n        this.persisted.delete(subscriptionIntent.sid);\n        this.backoff.reset();\n      } else if (message.replay_status === 'completed') {\n        log.debug(`Event Replay for subscription to ${sid} (c:${correlationId}) completed. Subscription is ready.`);\n        subscriptionIntent.complete(message.last_event_id);\n        this.persisted.set(message.object_sid, subscriptionIntent);\n        subscriptionIntent.setSubscriptionState('established');\n        this.backoff.reset();\n      }\n    } else {\n      log.debug(`Late message for ${message.object_sid} (c:${correlationId}) dropped.`);\n    }\n    this.persist();\n  }\n\n  private applySubscriptionCancelledMessage(message, correlationId) {\n    let persistedSubscription = this.persisted.get(message.object_sid);\n    if (persistedSubscription && persistedSubscription.pendingCorrelationId === correlationId) {\n      persistedSubscription.updatePending(null, null);\n      persistedSubscription.setSubscriptionState('none');\n      this.persisted.delete(message.object_sid);\n    } else {\n      log.debug(`Late message for ${message.object_sid} (c:${correlationId}) dropped.`);\n    }\n    this.persist();\n  }\n\n  private applySubscriptionFailedMessage(message, correlationId) {\n    const sid = message.object_sid;\n    let subscriptionIntent = this.subscriptions.get(sid);\n    let subscription = this.persisted.get(sid);\n    if (subscriptionIntent && subscription) {\n      if (subscription.pendingCorrelationId === correlationId) {\n        log.error(`Failed to subscribe on ${subscription.sid}`, message.error);\n        subscription.markAsFailed(message);\n        subscription.setSubscriptionState('none');\n      }\n    } else if (!subscriptionIntent && subscription) {\n      this.persisted.delete(sid);\n      subscription.setSubscriptionState('none');\n    }\n\n    this.persist();\n  }\n\n  private applyEventToSubscribedEntity(sid: string, event: any, eventType: string, isStrictlyOrdered: boolean): void {\n    if (!sid) {\n      return;\n    }\n\n    // Looking for subscription descriptor to check if poke has been completed\n    isStrictlyOrdered = isStrictlyOrdered || (() => {\n      let subscription = this.persisted.get(sid);\n      return subscription && subscription.isEstablished;\n    })();\n\n    // Still searching for subscriptionIntents. User could remove subscription already\n    let subscriptionIntent = this.subscriptions.get(sid);\n    if (subscriptionIntent) {\n      event.type = eventType;\n      subscriptionIntent.update(event, isStrictlyOrdered);\n    } else {\n      log.debug(`Message dropped for SID '${sid}', for which there is no subscription.`);\n    }\n  }\n\n  onConnectionStateChanged(isConnected: boolean) {\n    this.isConnected = isConnected;\n    if (isConnected) {\n      this.poke('reconnect');\n    }\n  }\n\n  private onSubscriptionTtlElapsed() {\n    if (this.isConnected) {\n      this.poke('ttl');\n    }\n  }\n\n  /**\n   * Prompts a playback of any missed changes made to any subscribed object. This method\n   * should be invoked whenever the connectivity layer has experienced cross-cutting\n   * delivery failures that would affect the entire local sync set. Any tangible result\n   * of this operation will result in calls to the _update() function of subscribed\n   * Sync entities.\n   */\n  private poke(reason: PokeReason) {\n    log.debug(`Triggering event replay for all subscriptions, reason=${reason}`);\n    this.pendingPokeReason = reason;\n    if (this.subscriptionTtlTimer) {\n      clearTimeout(this.subscriptionTtlTimer);\n      this.subscriptionTtlTimer = null;\n    }\n\n    let failedSubscriptions = [];\n\n    for (let it of this.persisted.values()) {\n      it.reset();\n      if (it.rejectedWithError) {\n        failedSubscriptions.push(it);\n      }\n    }\n\n    this.persisted.clear();\n    for (let it of failedSubscriptions) {\n      this.persisted.set(it.sid, it);\n    }\n    this.persist();\n  }\n\n  /**\n   * Stops all communication, clears any subscription intent, and returns.\n   */\n  shutdown() {\n    this.backoff.reset();\n    this.subscriptions.clear();\n  }\n}\n\nexport { SubscriptionsServices, Subscriptions };\n"],"names":["SyncError","Backoff","log","TransportUnavailableError"],"mappings":"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"}