/*
@license
Copyright (c) 2016, Twilio, Inc.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _polyfillNode_events = require('./_virtual/_polyfill-node.events.js');

/**
 * Provides retrier service
 */
class Retrier extends _polyfillNode_events["default"] {
    /**
     * Creates a new Retrier instance
     */
    constructor(options) {
        super();
        this.timeout = null;
        this.startTimestamp = -1;
        this.minDelay = options.min;
        this.maxDelay = options.max;
        this.initialDelay = options.initial || 0;
        this.maxAttemptsCount = options.maxAttemptsCount || 0;
        this.maxAttemptsTime = options.maxAttemptsTime || 0;
        this.randomness = options.randomness || 0;
        this.inProgress = false;
        this.attemptNum = 0;
        this.prevDelay = 0;
        this.currDelay = 0;
    }
    attempt() {
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
        }
        this.attemptNum++;
        this.emit("attempt", this);
    }
    nextDelay(delayOverride) {
        if (typeof delayOverride === "number") {
            this.prevDelay = 0;
            this.currDelay = delayOverride;
            return delayOverride;
        }
        if (this.attemptNum == 0) {
            return this.initialDelay;
        }
        if (this.attemptNum == 1) {
            this.currDelay = this.minDelay;
            return this.currDelay;
        }
        this.prevDelay = this.currDelay;
        let delay = this.currDelay + this.prevDelay;
        if (this.maxDelay && delay > this.maxDelay) {
            this.currDelay = this.maxDelay;
            delay = this.maxDelay;
        }
        this.currDelay = delay;
        return delay;
    }
    randomize(delay) {
        const area = delay * this.randomness;
        const corr = Math.round(Math.random() * area * 2 - area);
        return Math.max(0, delay + corr);
    }
    scheduleAttempt(delayOverride) {
        if (this.maxAttemptsCount && this.attemptNum >= this.maxAttemptsCount) {
            this.cleanup();
            this.emit("failed", new Error("Maximum attempt count limit reached"));
            return;
        }
        let delay = this.nextDelay(delayOverride);
        delay = this.randomize(delay);
        if (this.maxAttemptsTime &&
            this.startTimestamp + this.maxAttemptsTime < Date.now() + delay) {
            this.cleanup();
            this.emit("failed", new Error("Maximum attempt time limit reached"));
            return;
        }
        this.timeout = setTimeout(() => this.attempt(), delay);
    }
    cleanup() {
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
        }
        this.inProgress = false;
        this.attemptNum = 0;
        this.prevDelay = 0;
        this.currDelay = 0;
    }
    start() {
        if (this.inProgress) {
            throw new Error("Retrier is already in progress");
        }
        this.inProgress = true;
        this.startTimestamp = Date.now();
        this.scheduleAttempt(this.initialDelay);
    }
    cancel() {
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
            this.inProgress = false;
            this.emit("cancelled");
        }
    }
    // @todo Must be a T here, so the entire Retrier must be typed on this value type.
    // eslint-disable-next-line
    succeeded(arg) {
        this.emit("succeeded", arg);
    }
    failed(err, nextAttemptDelayOverride) {
        if (this.timeout) {
            throw new Error("Retrier attempt is already in progress");
        }
        this.scheduleAttempt(nextAttemptDelayOverride);
    }
}
/**
 * Run retrier as an async function with possibility to await for it.
 * Example:
 * ```
 * const result = AsyncRetrier.run(async () => somePromise);
 * ```
 */
class AsyncRetrier extends _polyfillNode_events["default"] {
    constructor(options) {
        super();
        // This any must be T typed directly on the AsyncRetrier
        // eslint-disable-next-line
        this.resolve = () => void 0;
        this.reject = () => void 0;
        this.retrier = new Retrier(options);
    }
    run(handler) {
        this.retrier.on("attempt", () => {
            handler()
                .then((v) => this.retrier.succeeded(v))
                .catch((e) => this.retrier.failed(e));
        });
        this.retrier.on("succeeded", (arg) => this.resolve(arg));
        this.retrier.on("cancelled", () => this.reject(new Error("Cancelled")));
        this.retrier.on("failed", (err) => this.reject(err));
        return new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
            this.retrier.start();
        });
    }
    cancel() {
        this.retrier.cancel();
    }
}

exports.AsyncRetrier = AsyncRetrier;
exports.Retrier = Retrier;
//# sourceMappingURL=retrier.js.map
