{"version":3,"file":"tree.js","sources":["../../src/utils/tree.ts"],"sourcesContent":["interface Map<K, V> {\n  get(key: K): V;\n  set(key: K, value: V): void;\n}\n\ninterface TreeMapInterface<K, V> extends Map<K, V>, Iterable<[K, V]> {\n\n}\n\ninterface HashMap<K, V> extends Map<K, V> {\n\n}\n\nclass Node<K, V> {\n  parent: Node<K, V>;\n  left: Node<K, V>;\n  right: Node<K, V>;\n  balanceFactor: number;\n\n  key: K;\n  value: V;\n\n  constructor(key: K, value: V) {\n    this.balanceFactor = 0;\n    this.key = key;\n    this.value = value;\n    this.parent = null;\n    this.left = null;\n    this.right = null;\n  }\n\n  get isRoot(): boolean { return this.parent === null; }\n  get isLeaf(): boolean { return (this.left === null) && (this.right === null); }\n  get isLeftChild(): boolean { return this.parent.left === this; }\n\n  update(value: V) {\n    this.value = value;\n  }\n\n  replace(target: Node<K, V>, replacement: Node<K, V>) {\n    if (!target) {\n      return;\n    }\n\n    if (this.left === replacement) {\n      this.left = replacement;\n    } else if (this.right === replacement) {\n      this.right = replacement;\n    }\n  }\n}\n\ntype Less<T> = (x: T, y: T) => boolean;\ntype Equal<T> = (x: T, y: T) => boolean;\n\n/**\n * @property length\n */\nclass TreeMap<K, V> implements TreeMapInterface<K, V> {\n  private isLessThan: Less<K>;\n  private isEqual: Equal<K>;\n\n  private root: Node<K, V>;\n  private count: number;\n\n  constructor(less?: Less<K>, equal?: Equal<K>) {\n    this.isLessThan = less || ((x, y) => x < y);\n    this.isEqual = equal || ((x, y) => x === y);\n    this.root = null;\n    this.count = null;\n  }\n\n  get size(): number { return this.count; }\n\n  clear() {\n    this.root = null;\n    this.count = 0;\n  }\n\n  set(key: K, value: V): void {\n    let node = this.getNode(key);\n    if (node) {\n      node.update(value);\n    } else {\n      this.insert(key, value);\n    }\n    // return node;\n  }\n\n  insert(key: K, value: V): void {\n    let node = new Node(key, value);\n    this.count++;\n\n    if (!this.root) {\n      this.root = node;\n      // return node;\n      return;\n    }\n\n    let currNode = this.root;\n    for (;;) {\n      if (this.isLessThan(key, currNode.key)) {\n        if (currNode.left) {\n          currNode = currNode.left;\n        } else {\n          currNode.left = node;\n          break;\n        }\n      } else {\n        if (currNode.right) { // eslint-disable-line no-lonely-if\n          currNode = currNode.right;\n        } else {\n          currNode.right = node;\n          break;\n        }\n      }\n    }\n\n    node.parent = currNode;\n    currNode = node;\n    while (currNode.parent) {\n      let parent = currNode.parent;\n      let prevBalanceFactor = parent.balanceFactor;\n\n      if (currNode.isLeftChild) {\n        parent.balanceFactor++;\n      } else {\n        parent.balanceFactor--;\n      }\n\n      if (Math.abs(parent.balanceFactor) < Math.abs(prevBalanceFactor)) {\n        break;\n      }\n\n      if (parent.balanceFactor < -1 || parent.balanceFactor > 1) {\n        this.rebalance(parent);\n        break;\n      }\n\n      currNode = parent;\n    }\n\n    // return node;\n  }\n\n  get(key: K): V {\n    let currentNode = this.root;\n    while (currentNode) {\n      if (this.isEqual(key, currentNode.key)) {\n        return currentNode.value;\n      }\n\n      if (this.isLessThan(key, currentNode.key)) {\n        currentNode = currentNode.left;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n    return null;\n  }\n\n  delete(key: K): void {\n    // update this algorithm and remove any\n    let node = this.getNode(key) as any;\n    if (!node || node.key !== key) {\n      return null;\n    }\n\n    let parent = node.parent;\n    let left = node.left;\n    let right = node.right;\n\n    if (!!left !== !!right) { // one child\n      let child = left || right;\n      if (!parent && !child) {\n        this.root = null;\n      } else if (parent && !child) {\n        this.root = child;\n      } else {\n        parent.replace(node, null);\n        this.rebalance(parent);\n      }\n    } else { // two children\n      let maxLeft = node.left;\n      while (maxLeft.right) {\n        maxLeft = maxLeft.right;\n      }\n\n      if (node.left === maxLeft) {\n        if (node.isRoot) {\n          this.root = maxLeft;\n          maxLeft.parent = null;\n        } else {\n          if (node.isLeftChild) {\n            node.parent.left = maxLeft;\n          } else {\n            node.parent.right = maxLeft;\n          }\n          maxLeft.parent = node.parent;\n        }\n\n        maxLeft.right = node.right;\n        maxLeft.right.parent = maxLeft;\n        maxLeft.balanceFactor = node.balanceFactor;\n        node = {\n          parent: maxLeft, isLeftChild: true\n        };\n      } else {\n        let mlParent = maxLeft.parent;\n        let mlLeft = maxLeft.left;\n\n        mlParent.right = mlLeft;\n        if (mlLeft) {\n          mlLeft.parent = mlParent;\n        }\n\n        if (node.isRoot) {\n          this.root = maxLeft;\n          maxLeft.parent = null;\n        } else {\n          if (node.isLeftChild) {\n            node.parent.left = maxLeft;\n          } else {\n            node.parent.right = maxLeft;\n          }\n          maxLeft.parent = node.parent;\n        }\n\n        maxLeft.right = node.right;\n        maxLeft.right.parent = maxLeft;\n        maxLeft.left = node.left;\n        maxLeft.left.parent = maxLeft;\n        maxLeft.balanceFactor = node.balanceFactor;\n\n        node = {\n          parent: mlParent, isLeftChild: false\n        };\n      }\n    }\n\n    this.count--;\n\n    while (node.parent) {\n      let parent = node.parent;\n      let prevBalanceFactor = parent.balanceFactor;\n\n      if (node.isLeftChild) {\n        parent.balanceFactor -= 1;\n      } else {\n        parent.balanceFactor += 1;\n      }\n\n      if (Math.abs(parent.balanceFactor) > Math.abs(prevBalanceFactor)) {\n        if (parent.balanceFactor < -1 || parent.balanceFactor > 1) {\n          this.rebalance(parent);\n\n          if (parent.parent.balanceFactor === 0) {\n            node = parent.parent;\n          } else {\n            break;\n          }\n        } else {\n          break;\n        }\n      } else {\n        node = parent;\n      }\n    }\n\n    return null;\n  }\n\n  private getNode(key: K): Node<K, V> {\n    let currentNode = this.root;\n    while (currentNode) {\n      if (this.isEqual(key, currentNode.key)) {\n        return currentNode;\n      }\n\n      if (this.isLessThan(key, currentNode.key)) {\n        currentNode = currentNode.left;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n    return null;\n  }\n\n  private rebalance(node: Node<K, V>) {\n    if (node.balanceFactor < 0) {\n      if (node.right.balanceFactor > 0) {\n        this.rotateRight(node.right);\n        this.rotateLeft(node);\n      } else {\n        this.rotateLeft(node);\n      }\n    } else if (node.balanceFactor > 0) {\n      if (node.left.balanceFactor < 0) {\n        this.rotateLeft(node.left);\n        this.rotateRight(node);\n      } else {\n        this.rotateRight(node);\n      }\n    }\n  }\n\n  private rotateLeft(pivot: Node<K, V>) {\n    let root = pivot.right;\n    pivot.right = root.left;\n    if (root.left !== null) {\n      root.left.parent = pivot;\n    }\n\n    root.parent = pivot.parent;\n    if (root.parent === null) {\n      this.root = root;\n    } else if (pivot.isLeftChild) {\n      root.parent.left = root;\n    } else {\n      root.parent.right = root;\n    }\n\n    root.left = pivot;\n    pivot.parent = root;\n    pivot.balanceFactor = pivot.balanceFactor + 1 - Math.min(root.balanceFactor, 0);\n    root.balanceFactor = root.balanceFactor + 1 - Math.max(pivot.balanceFactor, 0);\n  }\n\n  private rotateRight(pivot: Node<K, V>) {\n    let root = pivot.left;\n    pivot.left = root.right;\n    if (root.right !== null) {\n      root.right.parent = pivot;\n    }\n\n    root.parent = pivot.parent;\n    if (root.parent === null) {\n      this.root = root;\n    } else if (pivot.isLeftChild) {\n      root.parent.left = root;\n    } else {\n      root.parent.right = root;\n    }\n\n    root.right = pivot;\n    pivot.parent = root;\n    pivot.balanceFactor = pivot.balanceFactor - 1 - Math.min(root.balanceFactor, 0);\n    root.balanceFactor = root.balanceFactor - 1 - Math.max(pivot.balanceFactor, 0);\n  }\n\n  *[Symbol.iterator](): IterableIterator<[K, V]> {\n    for (let iter of this.getIterator()) {\n      yield iter;\n    }\n  }\n\n  *getIterator(key: K = null): IterableIterator<[K, V]> {\n    let currentNode = this.root;\n    while (currentNode) {\n      if (this.isEqual(key, currentNode.key) || ((key === null) && !currentNode.left)) {\n        break;\n      }\n\n      if (this.isLessThan(key, currentNode.key) || (key === null)) {\n        currentNode = currentNode.left;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n\n    if (!currentNode) {\n      return null;\n    }\n\n    let fromleft = true;\n    for (;;) {\n      if (fromleft) {\n        yield [currentNode.key, currentNode.value];\n        fromleft = false;\n\n        if (currentNode.right) {\n          currentNode = currentNode.right;\n          while (currentNode.left) {\n            currentNode = currentNode.left;\n          }\n          fromleft = true;\n        } else if (currentNode.parent) {\n          fromleft = (currentNode.parent.left === currentNode);\n          currentNode = currentNode.parent;\n        } else {\n          break;\n        }\n      } else if (currentNode.parent) {\n        fromleft = (currentNode.parent.left === currentNode);\n        currentNode = currentNode.parent;\n      } else {\n        break;\n      }\n    }\n\n    return null;\n  }\n\n  *getReverseIterator(key: K = null): IterableIterator<[K, V]> {\n    let currentNode = this.root;\n    while (currentNode) {\n      if (this.isEqual(key, currentNode.key) || ((key === null) && !currentNode.right)) {\n        break;\n      }\n\n      if (!this.isLessThan(key, currentNode.key) || (key === null)) {\n        currentNode = currentNode.right;\n      } else {\n        currentNode = currentNode.left;\n      }\n    }\n\n    if (!currentNode) {\n      return null;\n    }\n\n    let fromright = true;\n    for (;;) {\n      if (fromright) {\n        yield [currentNode.key, currentNode.value];\n        fromright = false;\n\n        if (currentNode.left) {\n          currentNode = currentNode.left;\n          while (currentNode.right) {\n            currentNode = currentNode.right;\n          }\n          fromright = true;\n        } else if (currentNode.parent) {\n          fromright = (currentNode.parent.right === currentNode);\n          currentNode = currentNode.parent;\n        } else {\n          break;\n        }\n      } else if (currentNode.parent) {\n        fromright = (currentNode.parent.right === currentNode);\n        currentNode = currentNode.parent;\n      } else {\n        break;\n      }\n    }\n\n    return null;\n  }\n}\n\nexport { Map, Less, Equal, TreeMapInterface, TreeMap };\n"],"names":[],"mappings":"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"}