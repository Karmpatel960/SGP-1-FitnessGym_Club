{"version":3,"file":"type.js","sources":["../../src/rules/type.ts"],"sourcesContent":["import { RuleDefinition, TypeRule } from \"../type-validator\";\nimport { custom } from \"./custom\";\n\nexport const type = (...checks: TypeRule[]): RuleDefinition =>\n  custom((value: unknown) => {\n    let isValid = false;\n    const expectedTypes: string[] = [];\n\n    for (const type of checks) {\n      if (typeof type === \"string\") {\n        isValid = isValid || typeof value === type;\n        expectedTypes.push(`of type ${type}`);\n\n        continue;\n      }\n\n      isValid = isValid || value instanceof type;\n      expectedTypes.push(`an instance of ${type.name}`);\n    }\n\n    return [isValid, expectedTypes];\n  });\n"],"names":["custom"],"mappings":";;;;;;;;;;;;;;;;;;AAGO,MAAM,IAAI,GAAG,CAAC,GAAG,MAAkB,KACxCA,aAAM,CAAC,CAAC,KAAc,KAAI;IACxB,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,MAAM,aAAa,GAAa,EAAE,CAAC;AAEnC,IAAA,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE;AACzB,QAAA,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC5B,YAAA,OAAO,GAAG,OAAO,IAAI,OAAO,KAAK,KAAK,IAAI,CAAC;AAC3C,YAAA,aAAa,CAAC,IAAI,CAAC,WAAW,IAAI,CAAA,CAAE,CAAC,CAAC;YAEtC,SAAS;AACV,SAAA;AAED,QAAA,OAAO,GAAG,OAAO,IAAI,KAAK,YAAY,IAAI,CAAC;QAC3C,aAAa,CAAC,IAAI,CAAC,CAAA,eAAA,EAAkB,IAAI,CAAC,IAAI,CAAE,CAAA,CAAC,CAAC;AACnD,KAAA;AAED,IAAA,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;AAClC,CAAC;;;;"}