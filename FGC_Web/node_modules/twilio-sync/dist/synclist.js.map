{"version":3,"file":"synclist.js","sources":["../src/synclist.ts"],"sourcesContent":["import { deepClone, isPositiveInteger, validatePageSize } from './utils/sanitize';\nimport { UriBuilder } from './utils/uri';\nimport { SyncError } from './utils/syncerror';\nimport log from './utils/logger';\n\nimport { SyncEntity, EntityServices, RemovalHandler } from './entity';\nimport { SyncListItem } from './synclistitem';\nimport { Paginator } from './paginator';\nimport { Cache } from './cache';\n\nimport { Mutator } from './interfaces/mutator';\nimport { NamespacedMergingQueue } from './mergingqueue';\nimport Closeable from './closeable';\nimport { custom, nonNegativeInteger, objectSchema, pureObject, validateTypesAsync } from '@twilio/declarative-type-validator';\n\ninterface SyncListServices extends EntityServices {\n}\n\ninterface SyncListDescriptor {\n  sid: string;\n  url: string;\n  revision: string;\n  last_event_id: number;\n  links: any;\n  unique_name: string;\n  date_updated: Date;\n  date_expires: string;\n}\n\n/**\n * List item metadata.\n */\ninterface SyncListItemMetadata {\n  /**\n   * Specifies the time-to-live in seconds after which the list item is subject to automatic deletion.\n   * The value 0 means infinity.\n   */\n  ttl?: number;\n}\n\n/**\n * List item query options.\n */\ninterface SyncListItemQueryOptions {\n  /**\n   * Item index, which should be used as the offset.\n   * If undefined, starts from the beginning or end depending on queryOptions.order.\n   */\n  from?: number;\n\n  /**\n   * Results page size. Default is 50.\n   */\n  pageSize?: number;\n\n  /**\n   * Numeric order of results. Default is \"asc\".\n   */\n  order?: 'asc' | 'desc';\n\n  /**\n   * Query limit.\n   */\n  limit: number;\n}\n\nclass SyncListImpl extends SyncEntity {\n  private descriptor: SyncListDescriptor;\n  private updateMergingQueue: NamespacedMergingQueue<number, SyncListItemMetadata, SyncListItem>;\n  private cache: Cache<number, SyncListItem>;\n  private context: Object;\n  private contextEventId: number;\n\n  /**\n   * @private\n   */\n  constructor(services: SyncListServices, descriptor: SyncListDescriptor, removalHandler: RemovalHandler) {\n    super(services, removalHandler);\n\n    const updateRequestReducer = (acc, input) => (typeof input.ttl === 'number') ? {ttl: input.ttl}\n      : acc;\n    this.updateMergingQueue = new NamespacedMergingQueue<number, SyncListItemMetadata, SyncListItem>(updateRequestReducer);\n    this.cache = new Cache<number, SyncListItem>();\n    this.descriptor = descriptor;\n    this.descriptor.date_updated = new Date(this.descriptor.date_updated);\n  }\n\n  // private props\n  get uri(): string {\n    return this.descriptor.url;\n  }\n\n  get revision(): string {\n    return this.descriptor.revision;\n  }\n\n  get lastEventId(): number {\n    return this.descriptor.last_event_id;\n  }\n\n  get links() {\n    return this.descriptor.links;\n  }\n\n  get dateExpires() {\n    return this.descriptor.date_expires;\n  }\n\n  static get type() {\n    return 'list';\n  }\n\n  get type() {\n    return 'list';\n  }\n\n  // below properties are specific to Insights only\n  get indexName(): string {\n    return undefined;\n  }\n\n  get queryString(): string {\n    return undefined;\n  }\n\n  // public props, documented along with class description\n  get sid(): string {\n    return this.descriptor.sid;\n  }\n\n  get uniqueName(): string {\n    return this.descriptor.unique_name || null;\n  }\n\n  get dateUpdated(): Date {\n    return this.descriptor.date_updated;\n  }\n\n  private async _addOrUpdateItemOnServer(url: string, data: Object, ifMatch: string, ttl: number) {\n    const requestBody: any = {data};\n\n    if (ttl !== undefined) {\n      requestBody.ttl = ttl;\n    }\n\n    const response = await this.services.network.post(url, requestBody, ifMatch);\n    response.body.data = data;\n    response.body.date_updated = new Date(response.body.date_updated);\n\n    return response.body;\n  }\n\n  public async push(value, itemMetadata?: SyncListItemMetadata) {\n    let ttl = (itemMetadata || {}).ttl;\n    let item = await this._addOrUpdateItemOnServer(this.links.items, value, undefined, ttl);\n    let index = Number(item.index);\n    this._handleItemMutated(index, item.url, item.last_event_id, item.revision, value, item.date_updated, item.date_expires, true, false);\n    return this.cache.get(index);\n  }\n\n  public async set(index: number, value: Object, itemMetadataUpdates?: SyncListItemMetadata) {\n    const input: SyncListItemMetadata = itemMetadataUpdates || {};\n    return this.updateMergingQueue.squashAndAdd(index, input, (input) => this._updateItemUnconditionally(index, value, input.ttl));\n  }\n\n  private async _updateItemUnconditionally(index: number, data: Object, ttl?: number): Promise<SyncListItem> {\n    let existingItem = await this.get(index);\n    const itemDescriptor = await this._addOrUpdateItemOnServer(existingItem.uri, data, undefined, ttl);\n    this._handleItemMutated(index, itemDescriptor.url, itemDescriptor.last_event_id, itemDescriptor.revision,\n      itemDescriptor.data, itemDescriptor.date_updated, itemDescriptor.date_expires, false, false);\n    return this.cache.get(index);\n  }\n\n  private async _updateItemWithIfMatch(index: number, mutatorFunction: Mutator, ttl?: number): Promise<SyncListItem> {\n    const existingItem = await this.get(index);\n    const data = mutatorFunction(deepClone(existingItem.data));\n    if (data) {\n      const ifMatch = existingItem.revision;\n      try {\n        const itemDescriptor = await this._addOrUpdateItemOnServer(existingItem.uri, data, ifMatch, ttl);\n        this._handleItemMutated(index, itemDescriptor.url, itemDescriptor.last_event_id, itemDescriptor.revision,\n          itemDescriptor.data, itemDescriptor.date_updated, itemDescriptor.date_expires, false, false);\n        return this.cache.get(index);\n      } catch (error) {\n        if (error.status === 412) {\n          await this._getItemFromServer(index);\n          return this._updateItemWithIfMatch(index, mutatorFunction, ttl);\n        } else {\n          throw error;\n        }\n      }\n    } else {\n      return existingItem;\n    }\n  }\n\n  public async mutate(index: number, mutator: Mutator, itemMetadataUpdates?: SyncListItemMetadata): Promise<SyncListItem> {\n    const input: SyncListItemMetadata = itemMetadataUpdates || {};\n    return this.updateMergingQueue.add(index, input, (input) => this._updateItemWithIfMatch(index, mutator, input.ttl));\n  }\n\n  public async update(index: number, obj: Object, itemMetadataUpdates?: SyncListItemMetadata): Promise<SyncListItem> {\n    return this.mutate(index, remote => Object.assign(remote, obj), itemMetadataUpdates);\n  }\n\n  public async remove(index: number): Promise<void> {\n    const item = await this.get(index);\n    const previousItemData = deepClone(item.data);\n    const response = await this.services.network.delete(item.uri);\n    this._handleItemRemoved(index, response.body.last_event_id, previousItemData, new Date(response.body.date_updated), false);\n  }\n\n  public async get(index: number): Promise<SyncListItem> {\n    let cachedItem = this.cache.get(index);\n    if (cachedItem) {\n      return cachedItem;\n    } else {\n      return this._getItemFromServer(index);\n    }\n  }\n\n  private async _getItemFromServer(index: number): Promise<SyncListItem> {\n    let result = await this.queryItems({index});\n    if (result.items.length < 1) {\n      throw new SyncError(`No item with index ${index} found`, 404, 54151);\n    } else {\n      return result.items[0];\n    }\n  }\n\n  /**\n   * Query items from the List\n   * @private\n   */\n  protected async queryItems(arg): Promise<Paginator<SyncListItem>> {\n    arg = arg || {};\n    const url = new UriBuilder(this.links.items)\n      .queryParam('From', arg.from)\n      .queryParam('PageSize', arg.limit)\n      .queryParam('Index', arg.index)\n      .queryParam('PageToken', arg.pageToken)\n      .queryParam('Order', arg.order)\n      .build();\n\n    let response = await this.services.network.get(url);\n    let items = response.body.items.map(el => {\n      el.date_updated = new Date(el.date_updated);\n      let itemInCache = this.cache.get(el.index);\n      if (itemInCache) {\n        this._handleItemMutated(el.index, el.url, el.last_event_id, el.revision, el.data, el.date_updated, el.date_expires, false, true);\n      } else {\n        this.cache.store(Number(el.index), new SyncListItem({\n          index: Number(el.index),\n          uri: el.url,\n          revision: el.revision,\n          lastEventId: el.last_event_id,\n          dateUpdated: el.date_updated,\n          dateExpires: el.date_expires,\n          data: el.data\n        }), el.last_event_id);\n      }\n      return this.cache.get(el.index);\n    });\n    let meta = response.body.meta;\n    return new Paginator<SyncListItem>(items\n      , pageToken => this.queryItems({pageToken})\n      , meta.previous_token\n      , meta.next_token);\n  }\n\n  async getItems(args): Promise<Paginator<SyncListItem>> {\n    args = args || {};\n    validatePageSize(args.pageSize);\n    args.limit = args.pageSize || args.limit || 50;\n    args.order = args.order || 'asc';\n    return this.queryItems(args);\n  }\n\n  /**\n   * @return {Promise<Object>} Context of List\n   * @private\n   */\n  async getContext(): Promise<Object> {\n    if (!this.context) {\n      let response = await this.services.network.get(this.links.context);\n      // store fetched context if we have't received any newer update\n      this._updateContextIfRequired(response.body.data, response.body.last_event_id);\n    }\n    return this.context;\n  }\n\n  public async setTtl(ttl: number): Promise<void> {\n    try {\n      const requestBody = {ttl};\n      const response = await this.services.network.post(this.uri, requestBody);\n      this.descriptor.date_expires = response.body.date_expires;\n    } catch (error) {\n      if (error.status === 404) {\n        this.onRemoved(false);\n      }\n      throw error;\n    }\n  }\n\n  public async setItemTtl(index: number, ttl: number): Promise<void> {\n    let existingItem = await this.get(index);\n    const requestBody = {ttl};\n    const response = await this.services.network.post(existingItem.uri, requestBody);\n    existingItem.updateDateExpires(response.body.date_expires);\n  }\n\n  async removeList() {\n    await this.services.network.delete(this.uri);\n    this.onRemoved(true);\n  }\n\n  protected onRemoved(locally: boolean) {\n    this._unsubscribe();\n    this.removalHandler(this.type, this.sid, this.uniqueName);\n\n    this.broadcastEventToListeners('removed', {isLocal: locally});\n  }\n\n  private shouldIgnoreEvent(key: number, eventId: number) {\n    return this.cache.isKnown(key, eventId);\n  }\n\n  /**\n   * Handle update, which came from the server.\n   * @private\n   */\n  _update(update, isStrictlyOrdered: boolean): void {\n    const itemIndex = Number(update.item_index);\n    update.date_created = new Date(update.date_created);\n    switch (update.type) {\n      case 'list_item_added':\n      case 'list_item_updated': {\n        this._handleItemMutated(\n          itemIndex,\n          update.item_url,\n          update.id,\n          update.item_revision,\n          update.item_data,\n          update.date_created,\n          undefined, // orchestration does not include date_expires  -- @todo  it does now?\n          update.type === 'list_item_added',\n          true);\n      }\n        break;\n      case 'list_item_removed': {\n        this._handleItemRemoved(itemIndex, update.id, update.item_data, update.date_created, true);\n      }\n        break;\n      case 'list_context_updated': {\n        this._handleContextUpdate(update.context_data, update.id, update.date_created);\n      }\n        break;\n      case 'list_removed': {\n        this.onRemoved(false);\n      }\n        break;\n    }\n\n    if (isStrictlyOrdered) {\n      this._advanceLastEventId(update.id, update.list_revision);\n    }\n  }\n\n  _advanceLastEventId(eventId: number, revision?: string): void {\n    if (this.lastEventId < eventId) {\n      this.descriptor.last_event_id = eventId;\n      if (revision) {\n        this.descriptor.revision = revision;\n      }\n    }\n  }\n\n  private _updateRootDateUpdated(dateUpdated: Date) {\n    if (!this.descriptor.date_updated || dateUpdated.getTime() > this.descriptor.date_updated.getTime()) {\n      this.descriptor.date_updated = dateUpdated;\n      this.services.storage.update(this.type, this.sid, this.uniqueName, {date_updated: dateUpdated});\n    }\n  }\n\n  private _handleItemMutated(\n    index: number,\n    uri: string,\n    lastEventId: number,\n    revision: string,\n    data: Object,\n    dateUpdated: Date,\n    dateExpires: string,\n    added: boolean,\n    remote: boolean\n  ): void {\n    if (this.shouldIgnoreEvent(index, lastEventId)) {\n      log.trace(`Item ${index} update skipped, current: ${this.lastEventId}, remote: ${lastEventId}`);\n      return;\n    }\n\n    this._updateRootDateUpdated(dateUpdated);\n    const item = this.cache.get(index);\n\n    if (!item) {\n      const newItem = new SyncListItem({index, uri, lastEventId, revision, data, dateUpdated, dateExpires});\n\n      this.cache.store(index, newItem, lastEventId);\n      this.emitItemMutationEvent(newItem, remote, added);\n\n      return;\n    }\n\n    const previousItemData = deepClone(item.data);\n    item.update(lastEventId, revision, data, dateUpdated);\n    this.cache.store(index, item, lastEventId);\n\n    if (dateExpires !== undefined) {\n      item.updateDateExpires(dateExpires);\n    }\n\n    this.emitItemMutationEvent(item, remote, false, previousItemData);\n  }\n\n  /**\n   * @private\n   */\n  private emitItemMutationEvent(item: SyncListItem, remote: boolean, added: boolean, previousItemData: null | Object = null): void {\n    const eventName = added ? 'itemAdded' : 'itemUpdated';\n    const args: any = {item, isLocal: !remote};\n\n    if (!added) {\n      args.previousItemData = previousItemData;\n    }\n\n    this.broadcastEventToListeners(eventName as any, args);\n  }\n\n  /**\n   * @private\n   */\n  private _handleItemRemoved(index: number, eventId: number, oldData: Object, dateUpdated: Date, remote: boolean): void {\n    this._updateRootDateUpdated(dateUpdated);\n    this.cache.delete(index, eventId);\n    this.broadcastEventToListeners('itemRemoved', {index: index, isLocal: !remote, previousItemData: oldData});\n  }\n\n  /**\n   * @private\n   */\n  private _handleContextUpdate(data: Object, eventId: number, dateUpdated: Date): void {\n    this._updateRootDateUpdated(dateUpdated);\n    if (this._updateContextIfRequired(data, eventId)) {\n      this.broadcastEventToListeners('contextUpdated', {context: data, isLocal: false});\n    }\n  }\n\n  /**\n   * @private\n   */\n  private _updateContextIfRequired(data: Object, eventId: number): boolean {\n    if (!this.contextEventId || eventId > this.contextEventId) {\n      this.context = data;\n      this.contextEventId = eventId;\n      return true;\n    } else {\n      log.trace('Context update skipped, current:', this.lastEventId, ', remote:', eventId);\n      return false;\n    }\n  }\n}\n\n/**\n * Represents a Sync list, which stores an ordered list of values.\n * Use the {@link SyncClient.list} method to obtain a reference to a Sync list.\n * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).\n */\nclass SyncList extends Closeable {\n  private readonly syncListImpl: SyncListImpl;\n\n  // private props\n  get uri(): string {\n    return this.syncListImpl.uri;\n  }\n\n  get revision(): string {\n    return this.syncListImpl.revision;\n  }\n\n  get lastEventId(): number {\n    return this.syncListImpl.lastEventId;\n  }\n\n  get links() {\n    return this.syncListImpl.links;\n  }\n\n  get dateExpires() {\n    return this.syncListImpl.dateExpires;\n  }\n\n  static get type() {\n    return SyncListImpl.type;\n  }\n\n  get type() {\n    return SyncListImpl.type;\n  }\n\n  /**\n   * Unique ID of the list, immutable identifier assigned by the system.\n   */\n  get sid(): string {\n    return this.syncListImpl.sid;\n  }\n\n  /**\n   * Unique name of the list, immutable identifier that can be assigned to the list during creation.\n   */\n  get uniqueName(): string {\n    return this.syncListImpl.uniqueName;\n  }\n\n  /**\n   * Date when the list was last updated, given in UTC ISO 8601 format (e.g., '2018-04-26T15:23:19.732Z').\n   */\n  get dateUpdated(): Date {\n    return this.syncListImpl.dateUpdated;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(syncListImpl: SyncListImpl) {\n    super();\n    this.syncListImpl = syncListImpl;\n    this.syncListImpl.attach(this);\n  }\n\n  /**\n   * Fired when a new item appears in the list, regardless of whether its creator was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * {@link SyncListItem} `item` - added item\n   *     * boolean `isLocal` - equals true if the item was added by a local actor, false otherwise\n   * @example\n   * ```typescript\n   * list.on('itemAdded', (args) => {\n   *   console.log(`List item ${args.item.index} was added`);\n   *   console.log('args.item.data:', args.item.data);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemAdded = 'itemAdded';\n\n  /**\n   * Fired when a list item is updated (not added or removed, but changed), regardless of whether the updater was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * {@link SyncListItem} `item` - updated item\n   *     * boolean `isLocal` - equals true if the item was updated by a local actor, false otherwise\n   *     * object `previousItemData` - contains a snapshot of the item data before the update\n   * @example\n   * ```typescript\n   * list.on('itemUpdated', (args) => {\n   *   console.log(`List item ${args.item.index} was updated`);\n   *   console.log('args.item.data:', args.item.data);\n   *   console.log('args.isLocal:', args.isLocal);\n   *   console.log('args.previousItemData:', args.previousItemData);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemUpdated = 'itemUpdated';\n\n  /**\n   * Fired when a list item is removed, regardless of whether the remover was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * number `index` - index of the removed item\n   *     * boolean `isLocal` - equals true if the item was removed by a local actor, false otherwise\n   *     * object `previousItemData` - contains a snapshot of the item data before the removal\n   * @example\n   * ```typescript\n   * list.on('itemRemoved', (args) => {\n   *   console.log(`List item ${args.index} was removed`);\n   *   console.log('args.previousItemData:', args.previousItemData);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly itemRemoved = 'itemRemoved';\n\n  /**\n   * Fired when a list is deleted entirely, by any actor local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * boolean `isLocal` - equals true if the list was removed by a local actor, false otherwise\n   * @example\n   * ```typescript\n   * list.on('removed', (args) => {\n   *   console.log(`List ${list.sid} was removed`);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly removed = 'removed';\n\n  /**\n   * Add a new item to the list.\n   * @param data Data to be added.\n   * @param itemMetadata Item metadata.\n   * @return The newly added item.\n   * @example\n   * ```typescript\n   * list.push({ name: 'John Smith' }, { ttl: 86400 })\n   *   .then((item) => {\n   *     console.log(`List Item push() successful, item index: ${item.index}, data:`, item.data)\n   *   })\n   *   .catch((error) => {\n   *     console.error('List Item push() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    pureObject,\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n\n  public async push(data, itemMetadata?: SyncListItemMetadata): Promise<SyncListItem> {\n    this.ensureNotClosed();\n    return this.syncListImpl.push(data, itemMetadata);\n  }\n\n  /**\n   * Assign new data to an existing item, given its index.\n   * @param index Index of the item to be updated.\n   * @param value New data to be assigned to an item.\n   * @param itemMetadataUpdates New item metadata.\n   * @return A promise with the updated item containing latest known data.\n   * The promise will be rejected if the item does not exist.\n   * @example\n   * ```typescript\n   * list.set(42, { name: 'John Smith' }, { ttl: 86400 })\n   *   .then((item) => {\n   *     console.log('List Item set() successful, item data:', item.data)\n   *   })\n   *   .catch((error) => {\n   *     console.error('List Item set() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    nonNegativeInteger,\n    pureObject,\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n\n  public async set(index: number, value: Object, itemMetadataUpdates?: SyncListItemMetadata): Promise<SyncListItem> {\n    this.ensureNotClosed();\n    return this.syncListImpl.set(index, value, itemMetadataUpdates);\n  }\n\n  /**\n   * Modify an existing item by applying a mutation function to it.\n   * @param index Index of the item to be changed.\n   * @param mutator A function that outputs a new data based on the existing data.\n   * @param itemMetadataUpdates New item metadata.\n   * @return Resolves with the most recent item state, the output of a successful\n   * mutation or a state that prompted graceful cancellation (mutator returned `null`). This promise\n   * will be rejected if the indicated item does not already exist.\n   * @example\n   * ```typescript\n   * const mutatorFunction = (currentValue) => {\n   *     currentValue.viewCount = (currentValue.viewCount || 0) + 1;\n   *     return currentValue;\n   * };\n   * list.mutate(42, mutatorFunction, { ttl: 86400 })\n   *   .then((item) => {\n   *     console.log('List Item mutate() successful, new data:', item.data)\n   *   })\n   *   .catch((error) => {\n   *     console.error('List Item mutate() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    nonNegativeInteger,\n    'function',\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n\n  public async mutate(index: number, mutator: Mutator, itemMetadataUpdates?: SyncListItemMetadata): Promise<SyncListItem> {\n    this.ensureNotClosed();\n    return this.syncListImpl.mutate(index, mutator, itemMetadataUpdates);\n  }\n\n  /**\n   * Modify an existing item by appending new fields (or overwriting existing ones) with the values from the object.\n   * This is equivalent to\n   * ```typescript\n   * list.mutate(42, (currentValue) => Object.assign(currentValue, obj));\n   * ```\n   * @param index Index of an item to be changed.\n   * @param obj Set of fields to update.\n   * @param itemMetadataUpdates New item metadata.\n   * @return A promise with a modified item containing latest known data.\n   * The promise will be rejected if the item was not found.\n   * @example\n   * ```typescript\n   * // Say, the List Item (index: 42) data is `{ name: 'John Smith' }`\n   * list.update(42, { age: 34 }, { ttl: 86400 })\n   *   .then((item) => {\n   *     // Now the List Item data is `{ name: 'John Smith', age: 34 }`\n   *     console.log('List Item update() successful, new data:', item.data);\n   *   })\n   *   .catch((error) => {\n   *     console.error('List Item update() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    nonNegativeInteger,\n    pureObject,\n    [\n      'undefined',\n      objectSchema('item metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async update(index: number, obj: Object, itemMetadataUpdates?: SyncListItemMetadata): Promise<SyncListItem> {\n    this.ensureNotClosed();\n    return this.syncListImpl.update(index, obj, itemMetadataUpdates);\n  }\n\n  /**\n   * Delete an item given its index.\n   * @param index Index of the item to be removed.\n   * @return A promise to remove the item.\n   * The promise will be rejected if the item was not found.\n   * @example\n   * ```typescript\n   * list.remove(42)\n   *   .then(() => {\n   *     console.log('List Item remove() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('List Item remove() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async remove(index: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncListImpl.remove(index);\n  }\n\n  /**\n   * Retrieve an item by List index.\n   * @param index Item index in the list.\n   * @return A promise with the item containing latest known data.\n   * The promise will be rejected if the item was not found.\n   * @example\n   * ```typescript\n   * list.get(42)\n   *   .then((item) => {\n   *     console.log('List Item get() successful, item data:', item.data)\n   *   })\n   *   .catch((error) => {\n   *     console.error('List Item get() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async get(index: number): Promise<SyncListItem> {\n    this.ensureNotClosed();\n    return this.syncListImpl.get(index);\n  }\n\n  /**\n   * Retrieve a list context\n   * @return A promise with the list's context\n   * @internal\n   */\n  public async getContext(): Promise<Object> {\n    this.ensureNotClosed();\n    return this.syncListImpl.getContext();\n  }\n\n  /**\n   * Query a list of items from collection.\n   * Information about the query limits can be found {@link https://www.twilio.com/docs/sync/limits|here}.\n   * @param queryOptions Query options.\n   * @example\n   * ```typescript\n   * const pageHandler = (paginator) => {\n   *   paginator.items.forEach((item) => {\n   *     console.log(`Item ${item.index}:`, item.data);\n   *   });\n   *   return paginator.hasNextPage\n   *     ? paginator.nextPage().then(pageHandler)\n   *     : null;\n   * };\n   * list.getItems({ from: 0, order: 'asc' })\n   *   .then(pageHandler)\n   *   .catch((error) => {\n   *     console.error('List getItems() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('query options', {\n      from: [nonNegativeInteger, 'undefined'],\n      pageSize: [custom((value) => [isPositiveInteger(value), 'a positive integer']), 'undefined']\n    })\n  ])\n  async getItems(queryOptions: SyncListItemQueryOptions): Promise<Paginator<SyncListItem>> {\n    this.ensureNotClosed();\n    return this.syncListImpl.getItems(queryOptions);\n  }\n\n  /**\n   * Update the time-to-live of the list.\n   * @param ttl Specifies the TTL in seconds after which the list is subject to automatic deletion. The value 0 means infinity.\n   * @return A promise that resolves after the TTL update was successful.\n   * @example\n   * ```typescript\n   * list.setTtl(3600)\n   *   .then(() => {\n   *     console.log('List setTtl() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('List setTtl() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async setTtl(ttl: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncListImpl.setTtl(ttl);\n  }\n\n  /**\n   * Update the time-to-live of a list item.\n   * @param index Item index.\n   * @param ttl Specifies the TTL in seconds after which the list item is subject to automatic deletion. The value 0 means infinity.\n   * @return A promise that resolves after the TTL update was successful.\n   * @example\n   * ```typescript\n   * list.setItemTtl(42, 86400)\n   *   .then(() => {\n   *     console.log('List setItemTtl() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('List setItemTtl() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger, nonNegativeInteger)\n  public async setItemTtl(index: number, ttl: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncListImpl.setItemTtl(index, ttl);\n  }\n\n  /**\n   * Delete this list. It will be impossible to restore it.\n   * @return A promise that resolves when the list has been deleted.\n   * @example\n   * list.removeList()\n   *   .then(() => {\n   *     console.log('List removeList() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('List removeList() failed', error);\n   *   });\n   */\n  async removeList(): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncListImpl.removeList();\n  }\n\n  /**\n   * Conclude work with the list instance and remove all event listeners attached to it.\n   * Any subsequent operation on this object will be rejected with error.\n   * Other local copies of this list will continue operating and receiving events normally.\n   * @example\n   * ```typescript\n   * list.close();\n   * ```\n   */\n  public close(): void {\n    super.close();\n    this.syncListImpl.detach(this.listenerUuid);\n  }\n\n}\n\nexport { SyncListItemMetadata, SyncListItemQueryOptions, SyncListServices, SyncListDescriptor, Mutator, SyncList, SyncListImpl };\nexport default SyncList;\n"],"names":["SyncEntity","NamespacedMergingQueue","Cache","deepClone","SyncError","UriBuilder","SyncListItem","Paginator","validatePageSize","log","Closeable","__decorate","validateTypesAsync","pureObject","objectSchema","nonNegativeInteger","custom","isPositiveInteger"],"mappings":"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"}