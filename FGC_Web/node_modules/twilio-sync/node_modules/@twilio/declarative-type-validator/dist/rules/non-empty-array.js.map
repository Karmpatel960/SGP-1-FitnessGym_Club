{"version":3,"file":"non-empty-array.js","sources":["../../src/rules/non-empty-array.ts"],"sourcesContent":["import {\n  convertRuleArgument,\n  RuleArgument,\n  RuleDefinition,\n  validateValue,\n} from \"../type-validator\";\nimport { custom } from \"./custom\";\n\nexport const nonEmptyArray = (\n  name: string,\n  rules: RuleArgument\n): RuleDefinition =>\n  custom((value) => {\n    if (!Array.isArray(value) || value.length < 1) {\n      return [false, `a non-empty array of ${name}`];\n    }\n\n    for (const [key, valueOfKey] of value.entries()) {\n      const [isValid, received, expected] = validateValue(\n        convertRuleArgument(rules),\n        valueOfKey\n      );\n\n      if (!isValid) {\n        return [\n          false,\n          `a valid non-empty array of ${name} (index ${key} should be ${expected})`,\n          `malformed array of ${name} (index ${key} is ${received})`,\n        ];\n      }\n    }\n\n    return [true];\n  });\n"],"names":["custom","validateValue","convertRuleArgument"],"mappings":";;;;;;;;;;;;;;;;;;;AAQa,MAAA,aAAa,GAAG,CAC3B,IAAY,EACZ,KAAmB,KAEnBA,aAAM,CAAC,CAAC,KAAK,KAAI;AACf,IAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AAC7C,QAAA,OAAO,CAAC,KAAK,EAAE,wBAAwB,IAAI,CAAA,CAAE,CAAC,CAAC;AAChD,KAAA;IAED,KAAK,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;AAC/C,QAAA,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,GAAGC,2BAAa,CACjDC,iCAAmB,CAAC,KAAK,CAAC,EAC1B,UAAU,CACX,CAAC;QAEF,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;gBACL,KAAK;AACL,gBAAA,CAAA,2BAAA,EAA8B,IAAI,CAAA,QAAA,EAAW,GAAG,CAAA,WAAA,EAAc,QAAQ,CAAG,CAAA,CAAA;AACzE,gBAAA,CAAA,mBAAA,EAAsB,IAAI,CAAA,QAAA,EAAW,GAAG,CAAA,IAAA,EAAO,QAAQ,CAAG,CAAA,CAAA;aAC3D,CAAC;AACH,SAAA;AACF,KAAA;IAED,OAAO,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC;;;;"}