{"version":3,"file":"message.js","sources":["../src/message.ts"],"sourcesContent":["import { parseAttributes } from './util';\nimport { Logger } from './logger';\n\nimport { Channel } from './channel';\nimport { McsClient } from '@twilio/mcs-client';\nimport { Media } from './media';\nimport { Member } from './member';\nimport { validateTypesAsync, literal } from '@twilio/declarative-type-validator';\nimport { Configuration } from './configuration';\nimport { CommandExecutor } from './commandexecutor';\nimport { EditMessageRequest } from './interfaces/commands/editmessage';\nimport { MessageResponse } from './interfaces/commands/messageresponse';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype MessageEvents = {\n  updated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[]\n  }) => void;\n};\n\nconst log = Logger.scope('Message');\n\ninterface MessageState {\n  sid: string;\n  index: number;\n  author?: string;\n  body: string;\n  dateUpdated: Date;\n  lastUpdatedBy: string;\n  attributes: Object;\n  timestamp: Date;\n  type: MessageType;\n  media?: Media;\n  memberSid?: string;\n}\n\ninterface MessageServices {\n  mcsClient: McsClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MessageLinks {\n  self: string;\n  conversation: string;\n  messages_receipts: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a message.\n */\ntype MessageUpdateReason =\n  | 'body'\n  | 'lastUpdatedBy'\n  | 'dateCreated'\n  | 'dateUpdated'\n  | 'attributes'\n  | 'author';\n\n/**\n * Push notification type of a message.\n */\ntype MessageType = 'text' | 'media';\n\ninterface MessageUpdatedEventArgs {\n  message: Message;\n  updateReasons: MessageUpdateReason[];\n}\n\n/**\n * A message in a channel.\n */\nclass Message extends ReplayEventEmitter<MessageEvents> {\n  private state: MessageState;\n\n  /**\n   * Channel that the message is in.\n   */\n  public readonly channel: Channel;\n  private readonly links: MessageLinks;\n  private readonly configuration: Configuration;\n  private readonly services: MessageServices;\n\n  /**\n   * @internal\n   */\n  constructor(\n    index: number,\n    data: any,\n    channel: Channel,\n    links: MessageLinks,\n    configuration: Configuration,\n    services: MessageServices\n  ) {\n    super();\n\n    this.channel = channel;\n    this.links = links;\n    this.configuration = configuration;\n    this.services = services;\n\n    this.state = {\n      sid: data.sid,\n      index: index,\n      author: data.author == null ? null : data.author,\n      body: data.text,\n      timestamp: data.timestamp ? new Date(data.timestamp) : null,\n      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,\n      lastUpdatedBy: data.lastUpdatedBy ? data.lastUpdatedBy : null,\n      attributes: parseAttributes(data.attributes, `Got malformed attributes for the message ${data.sid}`, log),\n      type: data.type ? data.type : 'text',\n      media: (data.type && data.type === 'media' && data.media)\n        ? new Media(data.media, this.services) : null,\n      memberSid: data.memberSid == null ? null : data.memberSid\n    };\n  }\n\n  /**\n   * Fired when the properties or the body of the message have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} message - the message in question\n   *     * {@link MessageUpdateReason}[] updateReasons - array of reasons for the update\n   */\n  static readonly updated = 'updated';\n\n  /**\n   * The server-assigned unique identifier for the message.\n   */\n  public get sid(): string { return this.state.sid; }\n\n  /**\n   * Name of the user that sent the message.\n   */\n  public get author(): string { return this.state.author; }\n\n  /**\n   * Body of the message. Null if the message is a media message.\n   */\n  public get body(): string {\n    if (this.type === 'media') {\n      return null;\n    }\n\n    return this.state.body;\n  }\n\n  /**\n   * Date this message was last updated on.\n   */\n  public get dateUpdated(): Date { return this.state.dateUpdated; }\n\n  /**\n   * Index of the message in the channel's messages list.\n   * By design of the Programmable Chat system, the message indices may have arbitrary gaps between them,\n   * that does not necessarily mean they were deleted or otherwise modified - just that\n   * messages may have some non-contiguous indices even if they are being sent immediately one after another.\n   *\n   * Trying to use indices for some calculations is going to be unreliable.\n   *\n   * To calculate the number of unread messages it is better to use the read horizon API.\n   * See {@link Channel.getUnconsumedMessagesCount} for details.\n   */\n  public get index(): number { return this.state.index; }\n\n  /**\n   * Identity of the last user that updated the message.\n   */\n  public get lastUpdatedBy(): string { return this.state.lastUpdatedBy; }\n\n  /**\n   * Date this message was created on.\n   */\n  public get dateCreated(): Date { return this.state.timestamp; }\n\n  /**\n   * Custom attributes of the message.\n   */\n  public get attributes(): Object { return this.state.attributes; }\n\n  /**\n   * Push notification type of the message.\n   */\n  public get type(): MessageType { return this.state.type; }\n\n  /**\n   * Media information (if present).\n   */\n  public get media(): Media { return this.state.media; }\n\n  /**\n   * The server-assigned unique identifier of the authoring member.\n   */\n  public get memberSid(): string { return this.state.memberSid; }\n\n  _update(data) {\n    let updateReasons: MessageUpdateReason[] = [];\n\n    if ((data.text || ((typeof data.text) === 'string')) && data.text !== this.state.body) {\n      this.state.body = data.text;\n      updateReasons.push('body');\n    }\n\n    if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {\n      this.state.lastUpdatedBy = data.lastUpdatedBy;\n      updateReasons.push('lastUpdatedBy');\n    }\n\n    if (data.author && data.author !== this.state.author) {\n      this.state.author = data.author;\n      updateReasons.push('author');\n    }\n\n    if (data.dateUpdated &&\n      new Date(data.dateUpdated).getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {\n      this.state.dateUpdated = new Date(data.dateUpdated);\n      updateReasons.push('dateUpdated');\n    }\n\n    if (data.timestamp &&\n      new Date(data.timestamp).getTime() !== (this.state.timestamp && this.state.timestamp.getTime())) {\n      this.state.timestamp = new Date(data.timestamp);\n      updateReasons.push('dateCreated');\n    }\n\n    let updatedAttributes = parseAttributes(data.attributes, `Got malformed attributes for the message ${this.sid}`, log);\n    if (!isEqual(this.state.attributes, updatedAttributes)) {\n      this.state.attributes = updatedAttributes;\n      updateReasons.push('attributes');\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit('updated', { message: this, updateReasons: updateReasons });\n    }\n  }\n\n  /**\n   * Get the member who is the author of the message.\n   */\n  public async getMember(): Promise<Member> {\n    let member: Member = null;\n    if (this.state.memberSid) {\n      member = await this.channel.getMemberBySid(this.memberSid)\n                         .catch(() => {\n                           log.debug('Member with sid \"' + this.memberSid + '\" not found for message ' + this.sid);\n                           return null;\n                         });\n    }\n    if (!member && this.state.author) {\n      member = await this.channel.getMemberByIdentity(this.state.author)\n                         .catch(() => {\n                           log.debug('Member with identity \"' + this.author + '\" not found for message ' + this.sid);\n                           return null;\n                         });\n    }\n    if (member) {\n      return member;\n    }\n    let errorMesage = 'Member with ';\n    if (this.state.memberSid) {\n      errorMesage += 'SID \\'' + this.state.memberSid + '\\' ';\n    }\n    if (this.state.author) {\n      if (this.state.memberSid) {\n        errorMesage += 'or ';\n      }\n      errorMesage += 'identity \\'' + this.state.author + '\\' ';\n    }\n    if (errorMesage === 'Member with ') {\n      errorMesage = 'Member ';\n    }\n    errorMesage += 'was not found';\n    throw new Error(errorMesage);\n  }\n\n  /**\n   * Remove the message.\n   */\n  public async remove(): Promise<Message> {\n    await this.services.commandExecutor.mutateResource(\n      'delete',\n      this.links.self,\n    );\n\n    return this;\n  }\n\n  /**\n   * Edit the message body.\n   * @param body New body of the message.\n   */\n  @validateTypesAsync('string')\n  public async updateBody(body: string): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<EditMessageRequest, MessageResponse>(\n      'post',\n      this.links.self,\n      {\n        body\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Edit the message attributes.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<EditMessageRequest, MessageResponse>(\n      'post',\n      this.links.self,\n      {\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n      }\n    );\n\n    return this;\n  }\n}\n\nexport {\n  Message,\n  MessageServices,\n  MessageType,\n  MessageUpdateReason,\n  MessageUpdatedEventArgs\n};\n"],"names":["Logger","ReplayEventEmitter","index","parseAttributes","Media","isEqual","__decorate","validateTypesAsync","literal"],"mappings":"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"}