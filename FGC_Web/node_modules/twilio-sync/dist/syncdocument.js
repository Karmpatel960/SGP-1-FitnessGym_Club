/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2016, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

This software includes Backoff library under the following license

    Copyright (C) 2012 Mathieu Turcotte

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

This software includes Event-to-Promise library under the following license

    Copyright (c) 2014, Julien Fontanet <julien.fontanet@isonoe.net>.

    Permission to use, copy, modify, and/or distribute this software for any purpose
    with or without fee is hereby granted, provided that the above copyright notice
    and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
    OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
    TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
    THIS SOFTWARE.

*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('./node_modules/tslib/tslib.es6.js');
var syncerror = require('./utils/syncerror.js');
var sanitize = require('./utils/sanitize.js');
var logger = require('./utils/logger.js');
var entity = require('./entity.js');
var mergingqueue = require('./mergingqueue.js');
var closeable = require('./closeable.js');
var declarativeTypeValidator = require('@twilio/declarative-type-validator');

class SyncDocumentImpl extends entity.SyncEntity {
    /**
     * @internal
     */
    constructor(services, descriptor, removalHandler) {
        super(services, removalHandler);
        this.isDeleted = false;
        const updateRequestReducer = (acc, input) => (typeof input.ttl === 'number') ? { ttl: input.ttl }
            : acc;
        this.updateMergingQueue = new mergingqueue.MergingQueue(updateRequestReducer);
        this.descriptor = descriptor;
        this.descriptor.data = this.descriptor.data || {};
        this.descriptor.date_updated = new Date(this.descriptor.date_updated);
    }
    // private props
    get uri() {
        return this.descriptor.url;
    }
    get revision() {
        return this.descriptor.revision;
    }
    get lastEventId() {
        return this.descriptor.last_event_id;
    }
    get dateExpires() {
        return this.descriptor.date_expires;
    }
    static get type() {
        return 'document';
    }
    get type() {
        return 'document';
    }
    // below properties are specific to Insights only
    get indexName() {
        return undefined;
    }
    get queryString() {
        return undefined;
    }
    // public props, documented along with class description
    get sid() {
        return this.descriptor.sid;
    }
    get data() {
        return this.descriptor.data;
    }
    get dateUpdated() {
        return this.descriptor.date_updated;
    }
    get uniqueName() {
        return this.descriptor.unique_name || null;
    }
    /**
     * Update data entity with new data
     * @private
     */
    _update(update) {
        update.date_created = new Date(update.date_created);
        switch (update.type) {
            case 'document_updated':
                if (update.id <= this.lastEventId) {
                    logger["default"].trace('Document update skipped, current:', this.lastEventId, ', remote:', update.id);
                    break;
                }
                const previousData = this.descriptor.data !== undefined ? sanitize.deepClone(this.descriptor.data) : null;
                this.descriptor.last_event_id = update.id;
                this.descriptor.revision = update.document_revision;
                this.descriptor.date_updated = update.date_created;
                this.descriptor.data = update.document_data;
                this.broadcastEventToListeners('updated', { data: update.document_data, isLocal: false, previousData });
                this.services.storage.update(this.type, this.sid, this.uniqueName, {
                    last_event_id: update.id,
                    revision: update.document_revision,
                    date_updated: update.date_created,
                    data: update.document_data
                });
                break;
            case 'document_removed':
                this.onRemoved(false);
                break;
        }
    }
    async set(value, metadataUpdates) {
        const input = metadataUpdates || {};
        return this.updateMergingQueue.squashAndAdd(input, input => this._setUnconditionally(value, input.ttl));
    }
    async mutate(mutator, metadataUpdates) {
        const input = metadataUpdates || {};
        return this.updateMergingQueue.add(input, input => this._setWithIfMatch(mutator, input.ttl));
    }
    async update(obj, metadataUpdates) {
        return this.mutate(remote => Object.assign(remote, obj), metadataUpdates);
    }
    async setTtl(ttl) {
        const response = await this._postUpdateToServer({ ttl });
        this.descriptor.date_expires = response.date_expires;
    }
    /**
     * @private
     */
    async _setUnconditionally(value, ttl) {
        let result = await this._postUpdateToServer({ data: value, revision: undefined, ttl });
        this._handleSuccessfulUpdateResult(result);
        return this.descriptor.data;
    }
    /**
     * @private
     */
    async _setWithIfMatch(mutatorFunction, ttl) {
        let data = mutatorFunction(sanitize.deepClone(this.descriptor.data));
        if (data) {
            let revision = this.revision;
            try {
                let result = await this._postUpdateToServer({ data, revision, ttl });
                this._handleSuccessfulUpdateResult(result);
                return this.descriptor.data;
            }
            catch (error) {
                if (error.status === 412) {
                    await this._softSync();
                    return this._setWithIfMatch(mutatorFunction);
                }
                else {
                    throw error;
                }
            }
        }
        else {
            return this.descriptor.data;
        }
    }
    /**
     * @private
     */
    _handleSuccessfulUpdateResult(result) {
        // Ignore returned value if we already got a newer one
        if (result.last_event_id <= this.descriptor.last_event_id) {
            return;
        }
        const previousData = this.descriptor.data !== undefined ? sanitize.deepClone(this.descriptor.data) : null;
        this.descriptor.revision = result.revision;
        this.descriptor.data = result.data;
        this.descriptor.last_event_id = result.last_event_id;
        this.descriptor.date_expires = result.date_expires;
        this.descriptor.date_updated = new Date(result.date_updated);
        this.services.storage.update(this.type, this.sid, this.uniqueName, {
            last_event_id: result.last_event_id,
            revision: result.revision,
            date_updated: result.date_updated,
            data: result.data
        });
        this.broadcastEventToListeners('updated', { data: this.descriptor.data, isLocal: true, previousData });
    }
    /**
     * @private
     */
    async _postUpdateToServer(request) {
        if (!this.isDeleted) {
            const requestBody = {
                data: request.data
            };
            if (request.ttl !== undefined) {
                requestBody.ttl = request.ttl;
            }
            const ifMatch = request.revision;
            try {
                const response = await this.services.network.post(this.uri, requestBody, ifMatch);
                return {
                    revision: response.body.revision,
                    data: request.data,
                    last_event_id: response.body.last_event_id,
                    date_updated: response.body.date_updated,
                    date_expires: response.body.date_expires
                };
            }
            catch (error) {
                if (error.status === 404) {
                    this.onRemoved(false);
                }
                throw error;
            }
        }
        else {
            return Promise.reject(new syncerror.SyncError('The Document has been removed', 404, 54100));
        }
    }
    /**
     * Get new data from server
     * @private
     */
    async _softSync() {
        return this.services.network.get(this.uri)
            .then(response => {
            const event = {
                type: 'document_updated',
                id: response.body.last_event_id,
                document_revision: response.body.revision,
                document_data: response.body.data,
                date_created: response.body.date_updated
            };
            this._update(event);
            return this;
        })
            .catch(err => {
            if (err.status === 404) {
                this.onRemoved(false);
            }
            else {
                logger["default"].error(`Can't get updates for ${this.sid}:`, err);
            }
        });
    }
    onRemoved(locally) {
        if (this.isDeleted) {
            return;
        }
        const previousData = this.descriptor.data !== undefined ? sanitize.deepClone(this.descriptor.data) : null;
        this.isDeleted = true;
        this._unsubscribe();
        this.removalHandler(this.type, this.sid, this.uniqueName);
        this.broadcastEventToListeners('removed', { isLocal: locally, previousData });
    }
    async removeDocument() {
        if (!this.isDeleted) {
            await this.services.network.delete(this.uri);
            this.onRemoved(true);
        }
        else {
            return Promise.reject(new syncerror.SyncError('The Document has been removed', 404, 54100));
        }
    }
}
/**
 * Represents a Sync document, the contents of which is a single JSON object.
 * Use the {@link SyncClient.document} method to obtain a reference to a Sync document.
 * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).
 */
class SyncDocument extends closeable.Closeable {
    /**
     * @internal
     */
    constructor(syncDocumentImpl) {
        super();
        this.syncDocumentImpl = syncDocumentImpl;
        this.syncDocumentImpl.attach(this);
    }
    // private props
    get uri() {
        return this.syncDocumentImpl.uri;
    }
    get revision() {
        return this.syncDocumentImpl.revision;
    }
    get lastEventId() {
        return this.syncDocumentImpl.lastEventId;
    }
    get dateExpires() {
        return this.syncDocumentImpl.dateExpires;
    }
    static get type() {
        return SyncDocumentImpl.type;
    }
    get type() {
        return SyncDocumentImpl.type;
    }
    /**
     * The immutable identifier of this document, assigned by the system.
     */
    get sid() {
        return this.syncDocumentImpl.sid;
    }
    /**
     * The contents of this document.
     */
    get data() {
        return this.syncDocumentImpl.data;
    }
    /**
     * Date when the document was last updated.
     */
    get dateUpdated() {
        return this.syncDocumentImpl.dateUpdated;
    }
    /**
     * An optional immutable identifier that may be assigned by the programmer
     * to this document during creation. Globally unique among other documents.
     */
    get uniqueName() {
        return this.syncDocumentImpl.uniqueName;
    }
    /**
     * Assign new contents to this document. The current data will be overwritten.
     * @param data The new contents to assign.
     * @param metadataUpdates New document metadata.
     * @return A promise resolving to the new data of the document.
     * @example
     * ```typescript
     * // Say, the Document data is `{ name: 'John Smith', age: 34 }`
     * document.set({ name: 'Barbara Oaks' }, { ttl: 86400 })
     *   .then((newValue) => {
     *     // Now the Document data is `{ name: 'Barbara Oaks' }`
     *     console.log('Document set() successful, new data:', newValue);
     *   })
     *   .catch((error) => {
     *     console.error('Document set() failed', error);
     *   });
     * ```
     */
    async set(data, metadataUpdates) {
        this.ensureNotClosed();
        return this.syncDocumentImpl.set(data, metadataUpdates);
    }
    /**
     * Schedules a modification to this document that will apply a mutation function.
     * @param mutator A function that outputs new data based on the existing data.
     * May be called multiple times, particularly if this document is modified concurrently by remote code.
     * If the mutation ultimately succeeds, the document will have made the particular transition described
     * by this function.
     * @param metadataUpdates New document metadata.
     * @return Resolves with the most recent Document state, whether the output of a
     * successful mutation or a state that prompted graceful cancellation (mutator returned `null`).
     * @example
     * ```typescript
     * const mutatorFunction = (currentValue) => {
     *     currentValue.viewCount = (currentValue.viewCount ?? 0) + 1;
     *     return currentValue;
     * };
     * document.mutate(mutatorFunction, { ttl: 86400 }))
     *   .then((newValue) => {
     *     console.log('Document mutate() successful, new data:', newValue);
     *   })
     *   .catch((error) => {
     *     console.error('Document mutate() failed', error);
     *   });
     * ```
     */
    async mutate(mutator, metadataUpdates) {
        this.ensureNotClosed();
        return this.syncDocumentImpl.mutate(mutator, metadataUpdates);
    }
    /**
     * Modify a document by appending new fields (or by overwriting existing ones) with the values from the provided Object.
     * This is equivalent to:
     * ```typescript
     * document.mutate((currentValue) => Object.assign(currentValue, obj));
     * ```
     * @param obj Specifies the particular (top-level) attributes that will receive new values.
     * @param metadataUpdates New document metadata.
     * @return A promise resolving to the new data of the document.
     * @example
     * ```typescript
     * // Say, the Document data is `{ name: 'John Smith' }`
     * document.update({ age: 34 }, { ttl: 86400 })
     *   .then((newValue) => {
     *     // Now the Document data is `{ name: 'John Smith', age: 34 }`
     *     console.log('Document update() successful, new data:', newValue);
     *   })
     *   .catch((error) => {
     *     console.error('Document update() failed', error);
     *   });
     * ```
     */
    async update(obj, metadataUpdates) {
        this.ensureNotClosed();
        return this.syncDocumentImpl.update(obj, metadataUpdates);
    }
    /**
     * Update the time-to-live of the document.
     * @param ttl Specifies the time-to-live in seconds after which the document is subject to automatic deletion. The value 0 means infinity.
     * @return A promise that resolves after the TTL update was successful.
     * @example
     * ```typescript
     * document.setTtl(3600)
     *   .then(() => {
     *     console.log('Document setTtl() successful');
     *   })
     *   .catch((error) => {
     *     console.error('Document setTtl() failed', error);
     *   });
     * ```
     */
    async setTtl(ttl) {
        this.ensureNotClosed();
        return this.syncDocumentImpl.setTtl(ttl);
    }
    /**
     * Delete a document.
     * @return A promise which resolves if (and only if) the document is ultimately deleted.
     * @example
     * ```typescript
     * document.removeDocument()
     *   .then(() => {
     *     console.log('Document removeDocument() successful');
     *   })
     *   .catch((error) => {
     *     console.error('Document removeDocument() failed', error);
     *   });
     * ```
     */
    async removeDocument() {
        this.ensureNotClosed();
        return this.syncDocumentImpl.removeDocument();
    }
    /**
     * Conclude work with the document instance and remove all event listeners attached to it.
     * Any subsequent operation on this object will be rejected with error.
     * Other local copies of this document will continue operating and receiving events normally.
     * @example
     * ```typescript
     * document.close();
     * ```
     */
    close() {
        super.close();
        this.syncDocumentImpl.detach(this.listenerUuid);
    }
}
/**
 * Fired when the document is removed, regardless of whether the remover was local or remote.
 *
 * Parameters:
 * 1. object `args` - info object provided with the event. It has following properties:
 *     * boolean `isLocal` - is true if document was removed by a local actor, false otherwise
 *     * object `previousData` - contains a snapshot of the document data before removal
 * @example
 * ```typescript
 * document.on('removed', (args) => {
 *   console.log(`Document ${document.sid} was removed`);
 *   console.log('args.isLocal:', args.isLocal);
 *   console.log('args.previousData:', args.previousData);
 * });
 * ```
 * @event
 */
SyncDocument.removed = 'removed';
/**
 * Fired when the document's contents have changed, regardless of whether the updater was local or remote.
 *
 * Parameters:
 * 1. object `args` - info object provided with the event. It has the following properties:
 *     * boolean `isLocal` - is true if document was updated by a local actor, false otherwise
 *     * object `data` - a snapshot of the document's new contents
 *     * object `previousData` - contains a snapshot of the document data before the update
 * @example
 * ```typescript
 * document.on('updated', (args) => {
 *   console.log(`Document ${document.sid} was updated`);
 *   console.log('args.data:', args.data);
 *   console.log('args.isLocal:', args.isLocal);
 *   console.log('args.previousData:', args.previousData);
 * });
 * ```
 * @event
 */
SyncDocument.updated = 'updated';
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.pureObject, [
        'undefined',
        declarativeTypeValidator.objectSchema('document metadata', {
            ttl: [declarativeTypeValidator.nonNegativeInteger, 'undefined']
        })
    ]),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [Object, Object]),
    tslib_es6.__metadata("design:returntype", Promise)
], SyncDocument.prototype, "set", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync('function', [
        'undefined',
        declarativeTypeValidator.objectSchema('document metadata', {
            ttl: [declarativeTypeValidator.nonNegativeInteger, 'undefined']
        })
    ]),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [Function, Object]),
    tslib_es6.__metadata("design:returntype", Promise)
], SyncDocument.prototype, "mutate", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.pureObject, [
        'undefined',
        declarativeTypeValidator.objectSchema('document metadata', {
            ttl: [declarativeTypeValidator.nonNegativeInteger, 'undefined']
        })
    ]),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [Object, Object]),
    tslib_es6.__metadata("design:returntype", Promise)
], SyncDocument.prototype, "update", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonNegativeInteger),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [Number]),
    tslib_es6.__metadata("design:returntype", Promise)
], SyncDocument.prototype, "setTtl", null);

exports.SyncDocument = SyncDocument;
exports.SyncDocumentImpl = SyncDocumentImpl;
exports["default"] = SyncDocument;
//# sourceMappingURL=syncdocument.js.map
