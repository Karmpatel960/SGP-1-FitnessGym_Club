/*
@license
The MIT License (MIT)

Copyright (c) 2016 Twilio Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var operationRetrier = require('@twilio/operation-retrier');
var connector = require('./connector.js');
var logger = require('./logger.js');

const retrierConfig = {
    min: 2000,
    max: 120000,
    randomness: 0.2,
};
/**
 * Manages the registrations on ERS service.
 * Deduplicates registrations and manages them automatically.
 */
class RegistrarConnector extends connector.Connector {
    /**
     * Creates new instance of the ERS registrar
     *
     * @param channelType {string} Channel this connector will be servicing.
     * @param context {any} productId, platform, and protocolVersion.
     * @param twilsock {TwilsockClient} connection transport.
     * @param registrarUrl {string}
     */
    constructor(channelType, context, // context is separate from config because it's not shared with other connectors
    twilsock, registrarUrl) {
        super(channelType);
        this.context = context;
        this.twilsock = twilsock;
        this.registrarUrl = registrarUrl;
        this.registrationId = null;
    }
    async updateRegistration(registration, reasons) {
        if (reasons.has("notificationId")) {
            await this.removeRegistration();
        }
        if (!registration.notificationId || !registration.notificationId.length) {
            logger.log.error(`No push notification ID for registration`);
            throw new Error(`No push notification ID for registration`); // @todo FSM update to error perhaps
        }
        logger.log.trace("Registering", this.channelType, registration);
        const registrarRequest = {
            endpoint_platform: this.context.platform,
            channel_type: this.channelType,
            version: this.context.protocolVersion.toString(),
            message_types: Array.from(registration.messageTypes),
            data: {
                registration_id: registration.notificationId,
            },
            //ttl: 'PT24H' - This is totally ignored by notify, all bindings use PT1Y ttl.
        };
        const productId = this.context.productId;
        const url = `${this.registrarUrl}?productId=${productId}`;
        const headers = {
            "Content-Type": "application/json",
            // 'X-Twilio-Token': registration.token
        };
        logger.log.trace(`Creating registration for channel ${this.channelType}`);
        try {
            const response = (await new operationRetrier.AsyncRetrier(retrierConfig).run(() => this.twilsock.post(url, headers, registrarRequest, productId)));
            this.registrationId = response.body.id;
            logger.log.debug("Registration created: ", response);
        }
        catch (err) {
            logger.log.error("Registration failed: ", err);
            throw err;
        }
        return registration;
    }
    async removeRegistration() {
        if (!this.registrationId) {
            // No registration ID - no problem, finish successfully.
            return;
        }
        const productId = this.context.productId;
        const url = `${this.registrarUrl}/${this.registrationId}?productId=${productId}`;
        const headers = {
            "Content-Type": "application/json",
            // 'X-Twilio-Token': this.config.token
        };
        logger.log.trace(`Removing registration for ${this.channelType}`);
        try {
            await new operationRetrier.AsyncRetrier(Object.assign(retrierConfig, { maxAttemptsCount: 3 })).run(() => this.twilsock.delete(url, headers, {}, productId));
            this.registrationId = null;
            this.currentState.notificationId = "";
            logger.log.debug(`Registration removed for ${this.channelType}`);
        }
        catch (err) {
            logger.log.error("Failed to remove registration ", this.channelType, err);
            throw err;
        }
    }
    async sendDeviceRemoveRequest(registrationId) {
        if (registrationId === "") {
            throw new Error("Empty registration ID");
        }
        const productId = this.context.productId;
        const url = `${this.registrarUrl}?productId=${productId}`;
        const headers = {
            "Content-Type": "application/json",
            // @todo Content-Length??
        };
        const payload = {
            binding_type: this.channelType,
            address: registrationId,
        };
        try {
            logger.log.trace(`Removing old registrations for ${this.channelType}`);
            await new operationRetrier.AsyncRetrier(Object.assign(retrierConfig, { maxAttemptsCount: 3 })).run(() => this.twilsock.delete(url, headers, payload, productId));
            this.registrationId = null;
            this.currentState.notificationId = "";
            logger.log.debug(`Registration removed for ${this.channelType}`);
        }
        catch (err) {
            logger.log.error("Failed to remove registration ", this.channelType, err);
            throw err;
        }
    }
}

exports.Connector = connector.Connector;
exports.RegistrarConnector = RegistrarConnector;
//# sourceMappingURL=RegistrarConnector.js.map
