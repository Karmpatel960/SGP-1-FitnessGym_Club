{"version":3,"file":"sanitize.js","sources":["../../src/utils/sanitize.ts"],"sourcesContent":["import SyncError from './syncerror';\n\n/**\n * Deep-clone an object. Note that this does not work on object containing\n * functions.\n * @param {object} obj - the object to deep-clone\n * @return {object}\n */\nfunction deepClone<T>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj)) as T;\n}\n\nfunction validatePageSize(pageSize: number) {\n  const validPageSize = pageSize === undefined || isPositiveInteger(pageSize);\n  if (!validPageSize) {\n    throw new SyncError(`Invalid pageSize parameter. Expected a positive integer, was '${pageSize}'.`, 400, 20007);\n  }\n}\n\nfunction validateMode(mode: string) {\n  if (!['open_or_create', 'open_existing', 'create_new'].includes(mode)) {\n    throw new Error(\"Invalid open mode. Expected one of { 'create_new', 'open_or_create', 'open_existing' }\");\n  }\n}\n\nfunction isInteger(number: any) {\n  return !isNaN(parseInt(number)) && isFinite(number);\n}\n\nfunction isPositiveInteger(number: any) {\n  return isInteger(number) && number > 0;\n}\n\nfunction isNonNegativeInteger(number: any) {\n  return isInteger(number) && number >= 0;\n}\n\nexport { deepClone, validatePageSize, validateMode, isPositiveInteger };\n"],"names":["SyncError"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;AAKG;AACH,SAAS,SAAS,CAAI,GAAM,EAAA;IAC1B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAM,CAAC;AAC9C,CAAC;AAED,SAAS,gBAAgB,CAAC,QAAgB,EAAA;IACxC,MAAM,aAAa,GAAG,QAAQ,KAAK,SAAS,IAAI,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IAC5E,IAAI,CAAC,aAAa,EAAE;QAClB,MAAM,IAAIA,mBAAS,CAAC,CAAiE,8DAAA,EAAA,QAAQ,CAAI,EAAA,CAAA,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;AAChH,KAAA;AACH,CAAC;AAQD,SAAS,SAAS,CAAC,MAAW,EAAA;AAC5B,IAAA,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;AACtD,CAAC;AAED,SAAS,iBAAiB,CAAC,MAAW,EAAA;IACpC,OAAO,SAAS,CAAC,MAAM,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC;AACzC;;;;;;"}