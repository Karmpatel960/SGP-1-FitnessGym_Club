{"version":3,"file":"messages.js","sources":["../../src/data/messages.ts"],"sourcesContent":["import { Logger } from '../logger';\n\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason\n} from '../message';\nimport { Channel, SendMediaOptions } from '../channel';\n\nimport { SyncList, SyncClient } from 'twilio-sync';\nimport { SyncPaginator } from '../syncpaginator';\n\nimport { McsClient, McsMedia } from '@twilio/mcs-client';\nimport { Configuration } from '../configuration';\nimport { CommandExecutor } from '../commandexecutor';\nimport { SendMessageRequest } from '../interfaces/commands/sendmessage';\nimport { MessageResponse } from '../interfaces/commands/messageresponse';\nimport { SendMediaMessageRequest } from '../interfaces/commands/sendmediamessage';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype MessagesEvents = {\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope('Messages');\n\nexport interface MessagesServices {\n  mcsClient: McsClient;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\n/**\n * Represents the collection of messages in a channel\n */\nclass Messages extends ReplayEventEmitter<MessagesEvents> {\n  private readonly messagesByIndex: Map<number, Message>;\n  private messagesListPromise: Promise<SyncList>;\n\n  constructor(\n    public readonly channel: Channel,\n    private readonly configuration: Configuration,\n    private readonly services: MessagesServices\n  ) {\n    super();\n\n    this.messagesByIndex = new Map();\n    this.messagesListPromise = null;\n  }\n\n  /**\n   * Subscribe to the Messages Event Stream\n   * @param {String} name - The name of Sync object for the Messages resource.\n   * @returns {Promise}\n   */\n  public async subscribe(name: string) {\n    return this.messagesListPromise =\n      this.messagesListPromise ||\n      this.services.syncClient.list({ id: name, mode: 'open_existing' })\n          .then(list => {\n\n            list.on('itemAdded', args => {\n              log.debug(this.channel.sid + ' itemAdded: ' + args.item.index);\n              const links = {\n                self: `${this.channel.links.messages}/${args.item.data.sid}`,\n                conversation: this.channel.links.self,\n                messages_receipts: `${this.channel.links.messages}/${args.item.data.sid}/Receipts`,\n              };\n              const message = new Message(args.item.index, args.item.data, this.channel, links, this.configuration, this.services);\n              if (this.messagesByIndex.has(message.index)) {\n                log.debug('Message arrived, but already known and ignored', this.channel.sid, message.index);\n                return;\n              }\n\n              this.messagesByIndex.set(message.index, message);\n              message.on('updated',\n                (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n              this.emit('messageAdded', message);\n            });\n\n            list.on('itemRemoved', args => {\n              log.debug(this.channel.sid + ' itemRemoved: ' + args.index);\n              let index = args.index;\n              if (this.messagesByIndex.has(index)) {\n                let message = this.messagesByIndex.get(index);\n                this.messagesByIndex.delete(message.index);\n                message.removeAllListeners('updated');\n                this.emit('messageRemoved', message);\n              }\n            });\n\n            list.on('itemUpdated', args => {\n              log.debug(this.channel.sid + ' itemUpdated: ' + args.item.index);\n              let message = this.messagesByIndex.get(args.item.index);\n              if (message) {\n                message._update(args.item.data);\n              }\n            });\n\n            return list;\n          })\n          .catch(err => {\n            this.messagesListPromise = null;\n            if (this.services.syncClient.connectionState != 'disconnected') {\n              log.error('Failed to get messages object for channel', this.channel.sid, err);\n            }\n            log.debug('ERROR: Failed to get messages object for channel', this.channel.sid, err);\n            throw err;\n          });\n  }\n\n  public async unsubscribe() {\n    if (this.messagesListPromise) {\n      let entity = await this.messagesListPromise;\n      entity.close();\n      this.messagesListPromise = null;\n    }\n  }\n\n  /**\n   * Send Message to the channel\n   * @param {String} message - Message to post\n   * @param {any} attributes Message attributes\n   * @returns Returns promise which can fail\n   */\n  public async send(message: string | null, attributes: any = {}): Promise<MessageResponse> {\n    log.debug('Sending text message', message, attributes);\n\n    return await this.services.commandExecutor.mutateResource<SendMessageRequest, MessageResponse>(\n      'post',\n      this.channel.links.messages,\n      {\n        body: message || '',\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined,\n      }\n    );\n  }\n\n  /**\n   * Send Media Message to the channel\n   * @param {FormData | Channel#SendMediaOptions} mediaContent - Media content to post\n   * @param {any} attributes Message attributes\n   * @returns Returns promise which can fail\n   */\n  public async sendMedia(mediaContent: FormData | SendMediaOptions, attributes: any = {}) {\n    log.debug('Sending media message', mediaContent, attributes);\n\n    let media: McsMedia;\n    if (typeof FormData !== 'undefined'  && (mediaContent instanceof FormData)) {\n      log.debug('Sending media message as FormData', mediaContent, attributes);\n      media = await this.services.mcsClient.postFormData(mediaContent);\n    } else {\n      log.debug('Sending media message as SendMediaOptions', mediaContent, attributes);\n      let mediaOptions = mediaContent as SendMediaOptions;\n      if (!mediaOptions.contentType || !mediaOptions.media) {\n        throw new Error('Media content <Channel#SendMediaOptions> must contain non-empty contentType and media');\n      }\n      media = await this.services.mcsClient.post(mediaOptions.contentType, mediaOptions.media, null);\n    }\n\n    return await this.services.commandExecutor.mutateResource<SendMediaMessageRequest, MessageResponse>(\n      'post',\n      this.channel.links.messages,\n      {\n        media_sid: media.sid,\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n      }\n    );\n  }\n\n  /**\n   * Returns messages from channel using paginator interface\n   * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n   * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n   * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n   * @returns {Promise<Paginator<Message>>} last page of messages by default\n   */\n  public async getMessages(pageSize, anchor, direction) {\n    anchor = (typeof anchor !== 'undefined') ? anchor : 'end';\n    direction = direction || 'backwards';\n    return this._getMessages(pageSize, anchor, direction);\n  }\n\n  private async wrapPaginator(order, page, op) {\n    // We should swap next and prev page here, because of misfit of Sync and Chat paging conceptions\n    let shouldReverse = order === 'desc';\n\n    let np = () => page.nextPage().then(x => this.wrapPaginator(order, x, op));\n    let pp = () => page.prevPage().then(x => this.wrapPaginator(order, x, op));\n\n    return op(page.items).then(items => ({\n      items: items.sort((x, y) => { return x.index - y.index; }),\n      hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,\n      hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,\n      prevPage: shouldReverse ? np : pp,\n      nextPage: shouldReverse ? pp : np\n    }));\n  }\n\n  private _upsertMessage(index: number, value: any) {\n    const cachedMessage = this.messagesByIndex.get(index);\n    if (cachedMessage) {\n      return cachedMessage;\n    }\n\n    const links = {\n      self: `${this.channel.links.messages}/${value.sid}`,\n      conversation: this.channel.links.self,\n      messages_receipts: `${this.channel.links.messages}/${value.sid}/Receipts`,\n    };\n    const message = new Message(index, value, this.channel, links, this.configuration, this.services);\n    this.messagesByIndex.set(message.index, message);\n    message.on('updated',\n      (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n    return message;\n  }\n\n  /**\n   * Returns last messages from channel\n   * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n   * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n   * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n   * @returns {Promise<SyncPaginator<Message>>} last page of messages by default\n   * @private\n   */\n  private async _getMessages(pageSize, anchor, direction): Promise<SyncPaginator<Message>> {\n    anchor = (typeof anchor !== 'undefined') ? anchor : 'end';\n    pageSize = pageSize || 30;\n    const order = direction === 'backwards' ? 'desc' : 'asc';\n\n    return this.messagesListPromise\n               .then(messagesList => messagesList.getItems({\n                 from: anchor !== 'end' ? anchor : void (0),\n                 pageSize,\n                 order,\n                 limit: pageSize // @todo Limit equals pageSize by default in Sync. This is probably not ideal.\n               }))\n               .then(page => this.wrapPaginator(order, page\n                 , items => Promise.all(items.map(item => this._upsertMessage(item.index, item.data))))\n               );\n  }\n}\n\nexport { Messages };\n"],"names":["Logger","ReplayEventEmitter","message","Message"],"mappings":"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"}