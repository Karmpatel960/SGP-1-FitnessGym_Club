{"version":3,"file":"retrier.js","sources":["../src/retrier.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\n\n/**\n * Provides retrier service\n */\nclass Retrier extends EventEmitter {\n  private readonly minDelay: number;\n  private maxDelay: number;\n  private readonly initialDelay: number;\n  private readonly maxAttemptsCount: number;\n  private readonly maxAttemptsTime: number;\n  private readonly randomness: number;\n\n  // fibonacci strategy\n  private prevDelay: number;\n  private currDelay: number;\n\n  private timeout: ReturnType<typeof setTimeout> | null = null;\n  private inProgress: boolean;\n  private attemptNum: number;\n  private startTimestamp = -1;\n\n  /**\n   * Creates a new Retrier instance\n   */\n  constructor(options: {\n    min: number;\n    max: number;\n    initial?: number;\n    maxAttemptsCount?: number;\n    maxAttemptsTime?: number;\n    randomness?: number;\n  }) {\n    super();\n\n    this.minDelay = options.min;\n    this.maxDelay = options.max;\n    this.initialDelay = options.initial || 0;\n    this.maxAttemptsCount = options.maxAttemptsCount || 0;\n    this.maxAttemptsTime = options.maxAttemptsTime || 0;\n    this.randomness = options.randomness || 0;\n\n    this.inProgress = false;\n    this.attemptNum = 0;\n\n    this.prevDelay = 0;\n    this.currDelay = 0;\n  }\n\n  private attempt() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n\n    this.attemptNum++;\n    this.emit(\"attempt\", this);\n  }\n\n  private nextDelay(delayOverride?: number): number {\n    if (typeof delayOverride === \"number\") {\n      this.prevDelay = 0;\n      this.currDelay = delayOverride;\n      return delayOverride;\n    }\n\n    if (this.attemptNum == 0) {\n      return this.initialDelay;\n    }\n\n    if (this.attemptNum == 1) {\n      this.currDelay = this.minDelay;\n      return this.currDelay;\n    }\n\n    this.prevDelay = this.currDelay;\n\n    let delay = this.currDelay + this.prevDelay;\n\n    if (this.maxDelay && delay > this.maxDelay) {\n      this.currDelay = this.maxDelay;\n      delay = this.maxDelay;\n    }\n\n    this.currDelay = delay;\n    return delay;\n  }\n\n  private randomize(delay: number) {\n    const area = delay * this.randomness;\n    const corr = Math.round(Math.random() * area * 2 - area);\n    return Math.max(0, delay + corr);\n  }\n\n  private scheduleAttempt(delayOverride?: number) {\n    if (this.maxAttemptsCount && this.attemptNum >= this.maxAttemptsCount) {\n      this.cleanup();\n      this.emit(\"failed\", new Error(\"Maximum attempt count limit reached\"));\n      return;\n    }\n\n    let delay = this.nextDelay(delayOverride);\n    delay = this.randomize(delay);\n    if (\n      this.maxAttemptsTime &&\n      this.startTimestamp + this.maxAttemptsTime < Date.now() + delay\n    ) {\n      this.cleanup();\n      this.emit(\"failed\", new Error(\"Maximum attempt time limit reached\"));\n      return;\n    }\n\n    this.timeout = setTimeout(() => this.attempt(), delay);\n  }\n\n  private cleanup() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n    this.inProgress = false;\n\n    this.attemptNum = 0;\n    this.prevDelay = 0;\n    this.currDelay = 0;\n  }\n\n  public start(): void {\n    if (this.inProgress) {\n      throw new Error(\"Retrier is already in progress\");\n    }\n\n    this.inProgress = true;\n    this.startTimestamp = Date.now();\n    this.scheduleAttempt(this.initialDelay);\n  }\n\n  public cancel(): void {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n      this.inProgress = false;\n\n      this.emit(\"cancelled\");\n    }\n  }\n\n  // @todo Must be a T here, so the entire Retrier must be typed on this value type.\n  // eslint-disable-next-line\n  public succeeded(arg?: any): void {\n    this.emit(\"succeeded\", arg);\n  }\n\n  public failed(err: Error, nextAttemptDelayOverride?: number): void {\n    if (this.timeout) {\n      throw new Error(\"Retrier attempt is already in progress\");\n    }\n\n    this.scheduleAttempt(nextAttemptDelayOverride);\n  }\n}\n\n/**\n * Run retrier as an async function with possibility to await for it.\n * Example:\n * ```\n * const result = AsyncRetrier.run(async () => somePromise);\n * ```\n */\nclass AsyncRetrier extends EventEmitter {\n  private retrier: Retrier;\n  // This any must be T typed directly on the AsyncRetrier\n  // eslint-disable-next-line\n  private resolve: (value: any) => void = () => void 0;\n  private reject: (err?: Error) => void = () => void 0;\n\n  constructor(options: {\n    min: number;\n    max: number;\n    initial?: number;\n    maxAttemptsCount?: number;\n    maxAttemptsTime?: number;\n    randomness?: number;\n  }) {\n    super();\n    this.retrier = new Retrier(options);\n  }\n\n  public run<T>(handler: () => Promise<T>): Promise<T> {\n    this.retrier.on(\"attempt\", () => {\n      handler()\n        .then((v) => this.retrier.succeeded(v))\n        .catch((e) => this.retrier.failed(e));\n    });\n\n    this.retrier.on(\"succeeded\", (arg) => this.resolve(arg));\n    this.retrier.on(\"cancelled\", () => this.reject(new Error(\"Cancelled\")));\n    this.retrier.on(\"failed\", (err) => this.reject(err));\n\n    return new Promise<T>((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n\n      this.retrier.start();\n    });\n  }\n\n  public cancel(): void {\n    this.retrier.cancel();\n  }\n}\n\nexport { Retrier, AsyncRetrier };\n"],"names":["EventEmitter"],"mappings":"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"}