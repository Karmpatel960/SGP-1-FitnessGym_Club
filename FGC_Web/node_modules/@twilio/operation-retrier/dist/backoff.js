/*
@license
Copyright (c) 2016, Twilio, Inc.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _polyfillNode_events = require('./_virtual/_polyfill-node.events.js');

function isDef(value) {
    return value !== undefined && value !== null;
}
class Backoff extends _polyfillNode_events["default"] {
    constructor(options) {
        super();
        this.backoffDelay = 0;
        this.nextBackoffDelay = 0;
        this.backoffNumber = 0;
        this.timeoutID = null;
        this.maxNumberOfRetry = -1;
        options = options || {};
        const { initialDelay, maxDelay, randomisationFactor, factor } = options;
        if (isDef(initialDelay) && initialDelay < 1) {
            throw new Error("The initial timeout must be equal to or greater than 1.");
        }
        if (isDef(maxDelay) && maxDelay <= 1) {
            throw new Error("The maximal timeout must be greater than 1.");
        }
        if (isDef(randomisationFactor) &&
            (randomisationFactor < 0 || randomisationFactor > 1)) {
            throw new Error("The randomisation factor must be between 0 and 1.");
        }
        if (isDef(factor) && factor <= 1) {
            throw new Error(`Exponential factor should be greater than 1.`);
        }
        this.initialDelay = initialDelay || 100;
        this.maxDelay = maxDelay || 10000;
        if (this.maxDelay <= this.initialDelay) {
            throw new Error("The maximal backoff delay must be greater than the initial backoff delay.");
        }
        this.randomisationFactor = randomisationFactor || 0;
        this.factor = factor || 2;
        this.reset();
    }
    static exponential(options) {
        return new Backoff(options);
    }
    backoff(err) {
        if (this.timeoutID == null) {
            if (this.backoffNumber === this.maxNumberOfRetry) {
                this.emit("fail", err);
                this.reset();
            }
            else {
                this.backoffDelay = this.next();
                this.timeoutID = setTimeout(this.onBackoff.bind(this), this.backoffDelay);
                this.emit("backoff", this.backoffNumber, this.backoffDelay, err);
            }
        }
    }
    reset() {
        this.backoffDelay = 0;
        this.nextBackoffDelay = this.initialDelay;
        this.backoffNumber = 0;
        if (this.timeoutID) {
            clearTimeout(this.timeoutID);
        }
        this.timeoutID = null;
    }
    failAfter(maxNumberOfRetry) {
        if (maxNumberOfRetry <= 0) {
            throw new Error(`Expected a maximum number of retry greater than 0 but got ${maxNumberOfRetry}`);
        }
        this.maxNumberOfRetry = maxNumberOfRetry;
    }
    next() {
        this.backoffDelay = Math.min(this.nextBackoffDelay, this.maxDelay);
        this.nextBackoffDelay = this.backoffDelay * this.factor;
        const randomisationMultiple = 1 + Math.random() * this.randomisationFactor;
        return Math.min(this.maxDelay, Math.round(this.backoffDelay * randomisationMultiple));
    }
    onBackoff() {
        this.timeoutID = null;
        this.emit("ready", this.backoffNumber, this.backoffDelay);
        this.backoffNumber++;
    }
}

exports.Backoff = Backoff;
exports["default"] = Backoff;
//# sourceMappingURL=backoff.js.map
