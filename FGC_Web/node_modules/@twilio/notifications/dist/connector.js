/*
@license
The MIT License (MIT)

Copyright (c) 2016 Twilio Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _polyfillNode_events = require('./_virtual/_polyfill-node_events.js');
var logger = require('./logger.js');

class RegistrationState {
    constructor(token = "", notificationId = "", messageTypes = new Set()) {
        this.token = token;
        this.notificationId = notificationId;
        this.messageTypes = messageTypes;
    }
}
function setDifference(a, b) {
    return [
        ...[...a].filter((x) => !b.has(x)),
        ...[...b].filter((x) => !a.has(x)),
    ];
}
function hasDifference(a, b) {
    const reasons = new Set();
    if (a.notificationId !== b.notificationId) {
        reasons.add("notificationId");
    }
    if (a.token !== b.token) {
        reasons.add("token");
    }
    if (setDifference(a.messageTypes, b.messageTypes).length > 0) {
        reasons.add("messageType");
    }
    return [reasons.size > 0, reasons];
}
class Connector extends _polyfillNode_events['default'] {
    constructor(channelType) {
        super();
        this.channelType = channelType;
        this.desiredState = new RegistrationState();
        this.currentState = new RegistrationState();
        this._hasActiveAttempt = false; // @todo replace with FSM
    }
    /**
     * Set desired notification ID for the registration.
     * Call commitChanges() afterwards to commit this change.
     * @param notificationId Notification context ID to register.
     */
    setNotificationId(notificationId) {
        this.desiredState.notificationId = notificationId;
    }
    /**
     * Return true is this connector is in usable state and should be able to commit changes.
     */
    isActive() {
        return this.desiredState.notificationId !== "";
    }
    subscribe(messageType) {
        if (this.desiredState.messageTypes.has(messageType)) {
            logger.log.debug(`message type '${messageType}' for channel ${this.channelType} is already registered`);
            return;
        }
        this.desiredState.messageTypes.add(messageType);
    }
    unsubscribe(messageType) {
        if (!this.desiredState.messageTypes.has(messageType)) {
            return;
        }
        this.desiredState.messageTypes.delete(messageType);
    }
    updateToken(token) {
        // @todo not entirely correct?
        this.desiredState.token = token;
    }
    /**
     * Perform actual registration after all required changes are settled.
     */
    async commitChanges() {
        // if (!this.config.token || this.config.token.length === 0) { // @todo factor desiredState.token here?
        //   log.trace("Can't persist registration: token is not set");
        //   return;
        // }
        if (this._hasActiveAttempt) {
            // Concurrent access violation
            logger.log.error("One registration attempt is already in progress");
            throw new Error("One registration attempt is already in progress");
        }
        const [needToUpdate, reasons] = hasDifference(this.desiredState, this.currentState);
        if (!needToUpdate) {
            // The state did not change - complete successfully!
            return;
        }
        if (!this.currentState.notificationId) {
            reasons.delete("notificationId");
        }
        logger.log.trace(`Persisting ${this.channelType} registration`, reasons, this.desiredState);
        try {
            this._hasActiveAttempt = true;
            const stateToPersist = new RegistrationState();
            stateToPersist.token = this.desiredState.token;
            stateToPersist.notificationId = this.desiredState.notificationId;
            stateToPersist.messageTypes = new Set(this.desiredState.messageTypes);
            if (stateToPersist.messageTypes.size > 0) {
                const persistedState = await this.updateRegistration(stateToPersist, reasons);
                this.currentState.token = persistedState.token;
                this.currentState.notificationId = persistedState.notificationId;
                this.currentState.messageTypes = new Set(persistedState.messageTypes);
                // @todo twilsock emits registered(notificationContextId) when this context is reg'd
                this.emit("stateChanged", this.channelType, "registered", this.currentState);
            }
            else {
                await this.removeRegistration();
                this.currentState.token = stateToPersist.token;
                this.currentState.notificationId = stateToPersist.notificationId;
                this.currentState.messageTypes.clear();
                this.emit("stateChanged", this.channelType, "unregistered", this.currentState);
            }
        }
        catch (e) {
            throw e; // Forward any errors up
        }
        finally {
            this._hasActiveAttempt = false;
        }
    }
}

exports.Connector = Connector;
exports.RegistrationState = RegistrationState;
//# sourceMappingURL=connector.js.map
