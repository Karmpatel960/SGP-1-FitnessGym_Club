{"version":3,"file":"user.js","sources":["../src/user.ts"],"sourcesContent":["import { Logger } from './logger';\nimport { SyncClient } from 'twilio-sync';\nimport { parseAttributes } from './util';\nimport { validateTypesAsync, literal } from '@twilio/declarative-type-validator';\nimport { Configuration } from './configuration';\nimport { CommandExecutor } from './commandexecutor';\nimport { EditUserRequest, EditUserResponse } from './interfaces/commands/edituser';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype UserEvents = {\n  updated: (data: {\n    user: User,\n    updateReasons: UserUpdateReason[]\n  }) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n};\n\nconst log = Logger.scope('User');\n\ninterface UserState {\n  identity: string;\n  entityName: string;\n  friendlyName: string;\n  attributes: any;\n  online: boolean;\n  notifiable: boolean;\n}\n\ninterface UserServices {\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface UserLinks {\n  self: string;\n}\n\ntype SubscriptionState =\n  | 'initializing'\n  | 'subscribed'\n  | 'unsubscribed';\n\n/**\n * The reason for the `updated` event being emitted by a user.\n */\ntype UserUpdateReason =\n  | 'friendlyName'\n  | 'attributes'\n  | 'online'\n  | 'notifiable';\n\ninterface UserUpdatedEventArgs {\n  user: User;\n  updateReasons: UserUpdateReason[];\n}\n\n/**\n * Extended user information.\n * Note that `isOnline` and `isNotifiable` properties are eligible\n * for use only if the reachability function is enabled.\n * You may check if it is enabled by reading the value of {@link Client.reachabilityEnabled}.\n */\nclass User extends ReplayEventEmitter<UserEvents> {\n\n  private entity: any;\n  private state: UserState;\n  private promiseToFetch: Promise<User> | null = null;\n  private subscribed: SubscriptionState;\n\n  private links: UserLinks;\n  private configuration: Configuration;\n  private readonly services: UserServices;\n\n  private _initializationPromise: Promise<void>;\n  private _resolveInitializationPromise: any;\n\n  /**\n   * @internal\n   */\n  constructor(\n    identity: string,\n    entityName: string,\n    configuration: Configuration | null,\n    services: UserServices\n  ) {\n    super();\n\n    this.services = services;\n\n    this.subscribed = 'initializing';\n    this.setMaxListeners(0);\n\n    this.state = {\n      identity,\n      entityName,\n      friendlyName: null,\n      attributes: {},\n      online: null,\n      notifiable: null\n    };\n\n    this._initializationPromise = new Promise((resolve) => {\n      this._resolveInitializationPromise = resolve;\n    });\n\n    if (configuration !== null) {\n      this._resolveInitialization(\n        configuration,\n        identity,\n        entityName,\n        false\n      );\n    }\n  }\n\n  /**\n   * Fired when the properties or the reachability status of the message have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link User} `user` - the user in question\n   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  public readonly updated = 'updated';\n\n  /**\n   * Fired when the client has subscribed to the user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public readonly userSubscribed = 'userSubscribed';\n\n  /**\n   * Fired when the client has unsubscribed from the user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public readonly userUnsubscribed = 'userUnsubscribed';\n\n  /**\n   * User identity.\n   */\n  public get identity(): string { return this.state.identity; }\n\n  public set identity(identity: string) { this.state.identity = identity; }\n\n  public set entityName(name: string) { this.state.entityName = name; }\n\n  /**\n   * Custom attributes of the user.\n   */\n  public get attributes() { return this.state.attributes; }\n\n  /**\n   * Friendly name of the user, null if not set.\n   */\n  public get friendlyName(): string { return this.state.friendlyName; }\n\n  /**\n   * Status of the real-time conversation connection of the user.\n   */\n  public get online(): boolean { return this.state.online; }\n\n  /**\n   * User push notification registration status.\n   */\n  public get notifiable(): boolean { return this.state.notifiable; }\n\n  /**\n   * True if this user is receiving real-time status updates.\n   */\n  public get isSubscribed(): boolean { return this.subscribed == 'subscribed'; }\n\n  // Handles service updates\n  private async _update(key: string, value: any) {\n    await this._initializationPromise;\n\n    let updateReasons: UserUpdateReason[] = [];\n    log.debug('User for', this.state.identity, 'updated:', key, value);\n    switch (key) {\n      case 'friendlyName':\n        if (this.state.friendlyName !== value.value) {\n          updateReasons.push('friendlyName');\n          this.state.friendlyName = value.value;\n        }\n        break;\n      case 'attributes':\n        const updateAttributes = parseAttributes(value.value, `Retrieved malformed attributes from the server for user: ${this.state.identity}`, log);\n        if (!isEqual(this.state.attributes, updateAttributes)) {\n          this.state.attributes = updateAttributes;\n          updateReasons.push('attributes');\n        }\n        break;\n      case 'reachability':\n        if (this.state.online !== value.online) {\n          this.state.online = value.online;\n          updateReasons.push('online');\n        }\n        if (this.state.notifiable !== value.notifiable) {\n          this.state.notifiable = value.notifiable;\n          updateReasons.push('notifiable');\n        }\n        break;\n      default:\n        return;\n    }\n    if (updateReasons.length > 0) {\n      this.emit('updated', { user: this, updateReasons: updateReasons });\n    }\n  }\n\n  // Fetch reachability info\n  private async _updateReachabilityInfo(map, update): Promise<void> {\n    await this._initializationPromise;\n\n    if (!this.configuration.reachabilityEnabled) {\n      return;\n    }\n\n    return map.get('reachability')\n      .then(update)\n      .catch(err => { log.warn('Failed to get reachability info for ', this.state.identity, err); });\n  }\n\n  // Fetch user\n  private async _fetch(): Promise<User> {\n    await this._initializationPromise;\n\n    if (!this.state.entityName) {\n      return this;\n    }\n\n    this.promiseToFetch = this.services.syncClient.map({ id: this.state.entityName, mode: 'open_existing', includeItems: true })\n                              .then(map => {\n                                this.entity = map;\n                                map.on('itemUpdated', args => {\n                                  log.debug(`${this.state.entityName} (${this.state.identity}) itemUpdated: ${args.item.key}`);\n                                  return this._update(args.item.key, args.item.data);\n                                });\n                                return Promise.all([\n                                  map.get('friendlyName')\n                                     .then(item => this._update(item.key, item.data)),\n                                  map.get('attributes')\n                                     .then(item => this._update(item.key, item.data)),\n                                  this._updateReachabilityInfo(map,\n                                    item => this._update(item.key, item.data))\n                                ]);\n                              })\n                              .then(() => {\n                                log.debug('Fetched for', this.identity);\n                                this.subscribed = 'subscribed';\n                                this.emit('userSubscribed', this);\n                                return this;\n                              })\n                              .catch(err => {\n                                this.promiseToFetch = null;\n                                throw err;\n                              });\n    return this.promiseToFetch;\n  }\n\n  // Not private because it is accessed from Client constructor.\n  async _ensureFetched(): Promise<User> {\n    await this._initializationPromise;\n    return this.promiseToFetch || this._fetch();\n  }\n\n  /**\n   * Edit user attributes.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<User> {\n    await this._initializationPromise;\n    if (this.subscribed == 'unsubscribed') {\n      throw new Error('Can\\'t modify unsubscribed object');\n    }\n\n    await this.services.commandExecutor.mutateResource<EditUserRequest, EditUserResponse>(\n      'post',\n      this.links.self,\n      {\n        attributes: JSON.stringify(attributes)\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Update the friendly name of the user.\n   * @param friendlyName New friendly name.\n   */\n  @validateTypesAsync('string')\n  public async updateFriendlyName(friendlyName): Promise<User> {\n    await this._initializationPromise;\n\n    if (this.subscribed == 'unsubscribed') {\n      throw new Error('Can\\'t modify unsubscribed object');\n    }\n\n    await this.services.commandExecutor.mutateResource<EditUserRequest, EditUserResponse>(\n      'post',\n      this.links.self,\n      {\n        friendly_name: friendlyName\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Remove the user from the subscription list.\n   * @return A promise of completion.\n   */\n  public async unsubscribe(): Promise<void> {\n    await this._initializationPromise;\n\n    if (this.promiseToFetch) {\n      await this.promiseToFetch;\n      this.entity.close();\n      this.promiseToFetch = null;\n      this.subscribed = 'unsubscribed';\n      this.emit('userUnsubscribed', this);\n    }\n  }\n\n  public _resolveInitialization(\n    configuration: Configuration,\n    identity: string,\n    entityName: string,\n    emitUpdated: boolean\n  ): void {\n    this.configuration = configuration;\n    this.identity = identity;\n    this.entityName = entityName;\n    this.links = {\n      self: `${this.configuration.links.users}/${this.identity}`\n    };\n    this._resolveInitializationPromise();\n\n    if (emitUpdated) {\n      this.emit('updated', {\n        user: this,\n        updateReasons: [\n          'friendlyName',\n          'attributes',\n          'online',\n          'notifiable'\n        ]\n      });\n    }\n  }\n}\n\nexport {\n  User,\n  UserServices,\n  SubscriptionState,\n  UserUpdateReason,\n  UserUpdatedEventArgs\n};\n"],"names":["Logger","ReplayEventEmitter","parseAttributes","isEqual","__decorate","validateTypesAsync","literal"],"mappings":"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"}