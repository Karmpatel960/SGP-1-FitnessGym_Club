/*
@license
Copyright (c) 2018, Twilio, Inc.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

*/
'use strict';

var global =
  typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : typeof window !== "undefined"
    ? window
    : {};

Object.defineProperty(exports, '__esModule', { value: true });

var operationRetrier = require('@twilio/operation-retrier');
var logger = require('../logger.js');
var configuration = require('../configuration.js');

const log = logger.Logger.scope("Network");
class Network {
    constructor(config, transport) {
        this.config = config;
        this.transport = transport;
    }
    backoffConfig() {
        return Object.assign(configuration.Configuration.backoffConfigDefault, this.config.backoffConfigOverride);
    }
    retryWhenThrottled() {
        var _a, _b;
        return ((_b = (_a = this.config.retryWhenThrottledOverride) !== null && _a !== void 0 ? _a : configuration.Configuration.retryWhenThrottledDefault) !== null && _b !== void 0 ? _b : false);
    }
    async executeWithRetry(request, retryWhenThrottled) {
        return new Promise((resolve, reject) => {
            const codesToRetryOn = [502, 503, 504];
            if (retryWhenThrottled) {
                codesToRetryOn.push(429);
            }
            const retrier = new operationRetrier.Retrier(this.backoffConfig());
            retrier.on("attempt", async () => {
                try {
                    const result = await request();
                    retrier.succeeded(result);
                }
                catch (err) {
                    if (codesToRetryOn.indexOf(err.status) > -1) {
                        retrier.failed(err);
                    }
                    else if (err.message === "Twilsock disconnected") {
                        // Ugly hack. We must make a proper exceptions for twilsock
                        retrier.failed(err);
                    }
                    else {
                        // Fatal error
                        retrier.removeAllListeners();
                        retrier.cancel();
                        reject(err);
                    }
                }
            });
            retrier.on("succeeded", (result) => {
                resolve(result);
            });
            retrier.on("cancelled", (err) => reject(err));
            retrier.on("failed", (err) => reject(err));
            retrier.start();
        });
    }
    async get(url) {
        const headers = { "X-Twilio-Token": this.config.token };
        log.trace("sending GET request to ", url, " headers ", headers);
        try {
            const response = await this.executeWithRetry(() => this.transport.get(url, headers), this.retryWhenThrottled());
            log.trace("response", response);
            return response;
        }
        catch (err) {
            log.debug(`get() error ${err}`);
            throw err;
        }
    }
    async post(url, category, media, contentType, filename) {
        const headers = {
            "X-Twilio-Token": this.config.token,
        };
        if ((typeof FormData === "undefined" || !(media instanceof FormData)) &&
            contentType) {
            Object.assign(headers, {
                "Content-Type": contentType,
            });
        }
        const fullUrl = new URL(url);
        if (category) {
            fullUrl.searchParams.append("Category", category);
        }
        if (filename) {
            fullUrl.searchParams.append("Filename", filename);
        }
        let response;
        log.trace(`sending POST request to ${url} with headers ${headers}`);
        try {
            response = await this.transport.post(fullUrl.href, headers, media);
        }
        catch (err) {
            // If global["XMLHttpRequest"] is undefined, it means that the code is
            // not being executed in the browser.
            if (global["XMLHttpRequest"] === undefined && media instanceof FormData) {
                throw new TypeError("Posting FormData supported only with browser engine's FormData");
            }
            log.debug(`post() error ${err}`);
            throw err;
        }
        log.trace("response", response);
        return response;
    }
}

exports.Network = Network;
//# sourceMappingURL=network.js.map
