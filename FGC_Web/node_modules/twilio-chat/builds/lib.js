/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2019, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes javascript-state-machine under the following license.

    Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

This software includes q under the following license.

    Copyright 2009â€“2014 Kristopher Michael Kowal. All rights reserved.
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to
    deal in the Software without restriction, including without limitation the
    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.

This software includes platform.js under the following license.

    Copyright 2014 Benjamin Tan <https://d10.github.io/>
    Copyright 2011-2015 John-David Dalton <http://allyoucanleet.com/>

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('core-js/modules/es.reflect.construct.js');
require('core-js/modules/es.object.keys.js');
require('core-js/modules/es.symbol.js');
require('core-js/modules/es.array.filter.js');
require('core-js/modules/es.object.get-own-property-descriptor.js');
require('core-js/modules/es.object.get-own-property-descriptors.js');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _createClass = require('@babel/runtime/helpers/createClass');
var _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');
var _inherits = require('@babel/runtime/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
require('core-js/modules/es.object.to-string.js');
require('core-js/modules/es.promise.js');
require('core-js/modules/web.dom-collections.for-each.js');
require('core-js/modules/es.array.from.js');
require('core-js/modules/es.string.iterator.js');
require('core-js/modules/es.array.iterator.js');
require('core-js/modules/web.dom-collections.iterator.js');
require('core-js/modules/es.array.sort.js');
require('core-js/modules/es.array.concat.js');
require('core-js/modules/es.number.constructor.js');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var _typeof = require('@babel/runtime/helpers/typeof');
var loglevelLog = require('loglevel');
var iso8601Duration = require('iso8601-duration');
require('core-js/modules/es.array.map.js');
require('core-js/modules/es.regexp.exec.js');
require('core-js/modules/es.string.replace.js');
require('core-js/modules/es.array.join.js');
var declarativeTypeValidator = require('@twilio/declarative-type-validator');
var isEqual = require('lodash.isequal');
var replayEventEmitter = require('@twilio/replay-event-emitter');
require('core-js/modules/es.array.slice.js');
require('core-js/modules/es.function.name.js');
require('core-js/modules/es.symbol.description.js');
require('core-js/modules/es.symbol.iterator.js');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
require('core-js/modules/es.map.js');
var operationRetrier = require('@twilio/operation-retrier');
var notifications = require('@twilio/notifications');
var twilsock = require('twilsock');
var twilioSync = require('twilio-sync');
var mcsClient = require('@twilio/mcs-client');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
require('core-js/modules/es.set.js');
require('core-js/modules/es.array.includes.js');
require('core-js/modules/es.number.is-integer.js');
require('core-js/modules/es.typed-array.uint8-array.js');
require('core-js/modules/es.typed-array.copy-within.js');
require('core-js/modules/es.typed-array.every.js');
require('core-js/modules/es.typed-array.fill.js');
require('core-js/modules/es.typed-array.filter.js');
require('core-js/modules/es.typed-array.find.js');
require('core-js/modules/es.typed-array.find-index.js');
require('core-js/modules/es.typed-array.for-each.js');
require('core-js/modules/es.typed-array.includes.js');
require('core-js/modules/es.typed-array.index-of.js');
require('core-js/modules/es.typed-array.iterator.js');
require('core-js/modules/es.typed-array.join.js');
require('core-js/modules/es.typed-array.last-index-of.js');
require('core-js/modules/es.typed-array.map.js');
require('core-js/modules/es.typed-array.reduce.js');
require('core-js/modules/es.typed-array.reduce-right.js');
require('core-js/modules/es.typed-array.reverse.js');
require('core-js/modules/es.typed-array.set.js');
require('core-js/modules/es.typed-array.slice.js');
require('core-js/modules/es.typed-array.some.js');
require('core-js/modules/es.typed-array.sort.js');
require('core-js/modules/es.typed-array.subarray.js');
require('core-js/modules/es.typed-array.to-locale-string.js');
require('core-js/modules/es.typed-array.to-string.js');
require('core-js/modules/es.array-buffer.constructor.js');
require('core-js/modules/es.array.find.js');
require('core-js/modules/es.array.splice.js');
require('core-js/modules/es.object.entries.js');
var uuid = require('uuid');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);
var _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);
var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);
var _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);
var _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var loglevelLog__namespace = /*#__PURE__*/_interopNamespace(loglevelLog);
var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof__default['default'](Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __metadata(metadataKey, metadataValue) {
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof__default['default'](Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function prepareLine(prefix, args) {
  return ["".concat(new Date().toISOString(), " Chat ").concat(prefix, ":")].concat(Array.from(args));
}

var log$b = loglevelLog__namespace.getLogger('twilio-chat'); // twilio-chat is used by Flex SDK. Please DO NOT change

var Logger = /*#__PURE__*/function () {
  function Logger(prefix) {
    _classCallCheck__default['default'](this, Logger);

    _defineProperty__default['default'](this, "prefix", '');

    this.prefix = prefix !== null && prefix !== undefined && prefix.length > 0 ? prefix + ' ' : '';
  }

  _createClass__default['default'](Logger, [{
    key: "setLevel",
    value: function setLevel(level) {
      log$b.setLevel(level);
    }
  }, {
    key: "trace",
    value: function trace() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      log$b.trace.apply(null, prepareLine(this.prefix + 'T', args));
    }
  }, {
    key: "debug",
    value: function debug() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      log$b.debug.apply(null, prepareLine(this.prefix + 'D', args));
    }
  }, {
    key: "info",
    value: function info() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      log$b.info.apply(null, prepareLine(this.prefix + 'I', args));
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      log$b.warn.apply(null, prepareLine(this.prefix + 'W', args));
    }
  }, {
    key: "error",
    value: function error() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      log$b.error.apply(null, prepareLine(this.prefix + 'E', args));
    }
  }], [{
    key: "scope",
    value: function scope(prefix) {
      return new Logger(prefix);
    }
  }, {
    key: "setLevel",
    value: function setLevel(level) {
      log$b.setLevel(level);
    }
  }, {
    key: "trace",
    value: function trace() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      log$b.trace.apply(null, prepareLine('T', args));
    }
  }, {
    key: "debug",
    value: function debug() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      log$b.debug.apply(null, prepareLine('D', args));
    }
  }, {
    key: "info",
    value: function info() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      log$b.info.apply(null, prepareLine('I', args));
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      log$b.warn.apply(null, prepareLine('W', args));
    }
  }, {
    key: "error",
    value: function error() {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      log$b.error.apply(null, prepareLine('E', args));
    }
  }]);

  return Logger;
}();

function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var TYPING_TIMEOUT = 5;
var HTTP_CACHE_LIFETIME = 'PT5S';
var CONSUMPTION_HORIZON_SENDING_INTERVAL = 'PT5S';
var USER_INFOS_TO_SUBSCRIBE = 100;
var MINIMUM_RETRY_DELAY = 1000;
var MAXIMUM_RETRY_DELAY = 4000;
var MAXIMUM_ATTEMPTS_COUNT = 3;
var RETRY_WHEN_THROTTLED = true;

var Configuration = function Configuration() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var configurationResponse = arguments.length > 1 ? arguments[1] : undefined;
  var logger = arguments.length > 2 ? arguments[2] : undefined;

  _classCallCheck__default['default'](this, Configuration);

  _defineProperty__default['default'](this, "typingIndicatorTimeoutDefault", TYPING_TIMEOUT * 1000);

  var constructorOptions = options.Chat || options.IPMessaging || options || {};
  this.productId = constructorOptions.productId;
  this.links = {
    myConversations: configurationResponse.links.my_conversations,
    conversations: configurationResponse.links.conversations,
    users: configurationResponse.links.users,
    currentUser: configurationResponse.links.current_user,
    typing: configurationResponse.links.typing,
    mediaService: configurationResponse.links.media_service,
    messagesReceipts: configurationResponse.links.messages_receipts
  };
  this.typingIndicatorTimeoutOverride = constructorOptions.typingIndicatorTimeoutOverride;
  this.backoffConfiguration = _objectSpread$4({
    min: MINIMUM_RETRY_DELAY,
    max: MAXIMUM_RETRY_DELAY,
    maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT
  }, constructorOptions.backoffConfigOverride);
  this.retryWhenThrottled = constructorOptions.retryWhenThrottledOverride !== undefined ? constructorOptions.retryWhenThrottledOverride : RETRY_WHEN_THROTTLED;
  this.userInfosToSubscribe = constructorOptions.userInfosToSubscribeOverride || configurationResponse.options.user_infos_to_subscribe || USER_INFOS_TO_SUBSCRIBE;
  this.reachabilityEnabled = configurationResponse.options.reachability_enabled;
  this.userIdentity = configurationResponse.identity;
  this.userInfo = configurationResponse.sync_objects.my_user_info;
  this.myConversations = configurationResponse.sync_objects.my_conversations;
  var httpCacheInterval = constructorOptions.httpCacheIntervalOverride || configurationResponse.options.http_cache_interval || HTTP_CACHE_LIFETIME;

  try {
    this.httpCacheInterval = iso8601Duration.toSeconds(iso8601Duration.parse(httpCacheInterval));
  } catch (_unused) {
    logger.error("Failed to parse http cache interval ".concat(httpCacheInterval, ", using default value ").concat(HTTP_CACHE_LIFETIME));
    this.httpCacheInterval = iso8601Duration.toSeconds(iso8601Duration.parse(HTTP_CACHE_LIFETIME));
  }

  var consumptionReportInterval = constructorOptions.consumptionReportIntervalOverride || configurationResponse.options.consumption_report_interval || CONSUMPTION_HORIZON_SENDING_INTERVAL;

  try {
    this.consumptionReportInterval = iso8601Duration.toSeconds(iso8601Duration.parse(consumptionReportInterval));
  } catch (_unused2) {
    logger.error("Failed to parse consumption report interval ".concat(consumptionReportInterval, ", using default value ").concat(CONSUMPTION_HORIZON_SENDING_INTERVAL));
    this.consumptionReportInterval = iso8601Duration.toSeconds(iso8601Duration.parse(CONSUMPTION_HORIZON_SENDING_INTERVAL));
  }
};

/**
 * Deep-clone an object. Note that this does not work on object containing
 * functions.
 * @param {object} obj - the object to deep-clone
 * @returns {object}
 */
function deepClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}

function parseToNumber(value) {
  if (typeof value !== 'undefined' && !isNaN(Number(value))) {
    return Number(value);
  }

  return null;
} // timeString cannot be typed `string` because in member.ts
// call to parseTime(data.lastConsumptionTimestamp) uses number not a string for timestamp.


function parseTime$1(timeString) {
  try {
    return new Date(timeString);
  } catch (e) {
    return null;
  }
}

function parseAttributes(rawAttributes, warningMessage, log) {
  var attributes = {};

  if (rawAttributes) {
    try {
      attributes = JSON.parse(rawAttributes);
    } catch (e) {
      log.warn(warningMessage, e);
    }
  }

  return attributes;
}
/**
 * Construct URI with query parameters
 */


var UriBuilder = /*#__PURE__*/function () {
  function UriBuilder(base) {
    _classCallCheck__default['default'](this, UriBuilder);

    this.base = base.replace(/\/$/, '');
    this.args = [];
    this.paths = [];
  }

  _createClass__default['default'](UriBuilder, [{
    key: "arg",
    value: function arg(name, value) {
      if (typeof value !== 'undefined') {
        this.args.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));
      }

      return this;
    }
  }, {
    key: "path",
    value: function path(name) {
      this.paths.push(encodeURIComponent(name));
      return this;
    }
  }, {
    key: "build",
    value: function build() {
      var result = this.base;

      if (this.paths.length) {
        result += '/' + this.paths.join('/');
      }

      if (this.args.length) {
        result += '?' + this.args.join('&');
      }

      return result;
    }
  }]);

  return UriBuilder;
}();

function _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$8() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$a = Logger.scope('User');
/**
 * Extended user information.
 * Note that `isOnline` and `isNotifiable` properties are eligible
 * for use only if the reachability function is enabled.
 * You may check if it is enabled by reading the value of {@link Client.reachabilityEnabled}.
 */

var User = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](User, _ReplayEventEmitter);

  var _super = _createSuper$8(User);

  /**
   * @internal
   */
  function User(identity, entityName, configuration, services) {
    var _this;

    _classCallCheck__default['default'](this, User);

    _this = _super.call(this);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "promiseToFetch", null);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "updated", 'updated');

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "userSubscribed", 'userSubscribed');

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "userUnsubscribed", 'userUnsubscribed');

    _this.services = services;
    _this.subscribed = 'initializing';

    _this.setMaxListeners(0);

    _this.state = {
      identity: identity,
      entityName: entityName,
      friendlyName: null,
      attributes: {},
      online: null,
      notifiable: null
    };
    _this._initializationPromise = new Promise(function (resolve) {
      _this._resolveInitializationPromise = resolve;
    });

    if (configuration !== null) {
      _this._resolveInitialization(configuration, identity, entityName, false);
    }

    return _this;
  }
  /**
   * Fired when the properties or the reachability status of the message have been updated.
   *
   * Parameters:
   * 1. object `data` - info object provided with the event. It has the following properties:
   *     * {@link User} `user` - the user in question
   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the update
   * @event
   */


  _createClass__default['default'](User, [{
    key: "identity",
    get:
    /**
     * User identity.
     */
    function get() {
      return this.state.identity;
    },
    set: function set(identity) {
      this.state.identity = identity;
    }
  }, {
    key: "entityName",
    set: function set(name) {
      this.state.entityName = name;
    }
    /**
     * Custom attributes of the user.
     */

  }, {
    key: "attributes",
    get: function get() {
      return this.state.attributes;
    }
    /**
     * Friendly name of the user, null if not set.
     */

  }, {
    key: "friendlyName",
    get: function get() {
      return this.state.friendlyName;
    }
    /**
     * Status of the real-time conversation connection of the user.
     */

  }, {
    key: "online",
    get: function get() {
      return this.state.online;
    }
    /**
     * User push notification registration status.
     */

  }, {
    key: "notifiable",
    get: function get() {
      return this.state.notifiable;
    }
    /**
     * True if this user is receiving real-time status updates.
     */

  }, {
    key: "isSubscribed",
    get: function get() {
      return this.subscribed == 'subscribed';
    } // Handles service updates

  }, {
    key: "_update",
    value: function () {
      var _update2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(key, value) {
        var updateReasons, updateAttributes;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._initializationPromise;

              case 2:
                updateReasons = [];
                log$a.debug('User for', this.state.identity, 'updated:', key, value);
                _context.t0 = key;
                _context.next = _context.t0 === 'friendlyName' ? 7 : _context.t0 === 'attributes' ? 9 : _context.t0 === 'reachability' ? 12 : 15;
                break;

              case 7:
                if (this.state.friendlyName !== value.value) {
                  updateReasons.push('friendlyName');
                  this.state.friendlyName = value.value;
                }

                return _context.abrupt("break", 16);

              case 9:
                updateAttributes = parseAttributes(value.value, "Retrieved malformed attributes from the server for user: ".concat(this.state.identity), log$a);

                if (!isEqual__default['default'](this.state.attributes, updateAttributes)) {
                  this.state.attributes = updateAttributes;
                  updateReasons.push('attributes');
                }

                return _context.abrupt("break", 16);

              case 12:
                if (this.state.online !== value.online) {
                  this.state.online = value.online;
                  updateReasons.push('online');
                }

                if (this.state.notifiable !== value.notifiable) {
                  this.state.notifiable = value.notifiable;
                  updateReasons.push('notifiable');
                }

                return _context.abrupt("break", 16);

              case 15:
                return _context.abrupt("return");

              case 16:
                if (updateReasons.length > 0) {
                  this.emit('updated', {
                    user: this,
                    updateReasons: updateReasons
                  });
                }

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _update(_x, _x2) {
        return _update2.apply(this, arguments);
      }

      return _update;
    }() // Fetch reachability info

  }, {
    key: "_updateReachabilityInfo",
    value: function () {
      var _updateReachabilityInfo2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(map, update) {
        var _this2 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._initializationPromise;

              case 2:
                if (this.configuration.reachabilityEnabled) {
                  _context2.next = 4;
                  break;
                }

                return _context2.abrupt("return");

              case 4:
                return _context2.abrupt("return", map.get('reachability').then(update).catch(function (err) {
                  log$a.warn('Failed to get reachability info for ', _this2.state.identity, err);
                }));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _updateReachabilityInfo(_x3, _x4) {
        return _updateReachabilityInfo2.apply(this, arguments);
      }

      return _updateReachabilityInfo;
    }() // Fetch user

  }, {
    key: "_fetch",
    value: function () {
      var _fetch2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        var _this3 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._initializationPromise;

              case 2:
                if (this.state.entityName) {
                  _context3.next = 4;
                  break;
                }

                return _context3.abrupt("return", this);

              case 4:
                this.promiseToFetch = this.services.syncClient.map({
                  id: this.state.entityName,
                  mode: 'open_existing',
                  includeItems: true
                }).then(function (map) {
                  _this3.entity = map;
                  map.on('itemUpdated', function (args) {
                    log$a.debug("".concat(_this3.state.entityName, " (").concat(_this3.state.identity, ") itemUpdated: ").concat(args.item.key));
                    return _this3._update(args.item.key, args.item.data);
                  });
                  return Promise.all([map.get('friendlyName').then(function (item) {
                    return _this3._update(item.key, item.data);
                  }), map.get('attributes').then(function (item) {
                    return _this3._update(item.key, item.data);
                  }), _this3._updateReachabilityInfo(map, function (item) {
                    return _this3._update(item.key, item.data);
                  })]);
                }).then(function () {
                  log$a.debug('Fetched for', _this3.identity);
                  _this3.subscribed = 'subscribed';

                  _this3.emit('userSubscribed', _this3);

                  return _this3;
                }).catch(function (err) {
                  _this3.promiseToFetch = null;
                  throw err;
                });
                return _context3.abrupt("return", this.promiseToFetch);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _fetch() {
        return _fetch2.apply(this, arguments);
      }

      return _fetch;
    }() // Not private because it is accessed from Client constructor.

  }, {
    key: "_ensureFetched",
    value: function () {
      var _ensureFetched2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._initializationPromise;

              case 2:
                return _context4.abrupt("return", this.promiseToFetch || this._fetch());

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function _ensureFetched() {
        return _ensureFetched2.apply(this, arguments);
      }

      return _ensureFetched;
    }()
    /**
     * Edit user attributes.
     * @param attributes New attributes.
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._initializationPromise;

              case 2:
                if (!(this.subscribed == 'unsubscribed')) {
                  _context5.next = 4;
                  break;
                }

                throw new Error('Can\'t modify unsubscribed object');

              case 4:
                _context5.next = 6;
                return this.services.commandExecutor.mutateResource('post', this.links.self, {
                  attributes: JSON.stringify(attributes)
                });

              case 6:
                return _context5.abrupt("return", this);

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function updateAttributes(_x5) {
        return _updateAttributes.apply(this, arguments);
      }

      return updateAttributes;
    }()
    /**
     * Update the friendly name of the user.
     * @param friendlyName New friendly name.
     */

  }, {
    key: "updateFriendlyName",
    value: function () {
      var _updateFriendlyName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(friendlyName) {
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._initializationPromise;

              case 2:
                if (!(this.subscribed == 'unsubscribed')) {
                  _context6.next = 4;
                  break;
                }

                throw new Error('Can\'t modify unsubscribed object');

              case 4:
                _context6.next = 6;
                return this.services.commandExecutor.mutateResource('post', this.links.self, {
                  friendly_name: friendlyName
                });

              case 6:
                return _context6.abrupt("return", this);

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function updateFriendlyName(_x6) {
        return _updateFriendlyName.apply(this, arguments);
      }

      return updateFriendlyName;
    }()
    /**
     * Remove the user from the subscription list.
     * @return A promise of completion.
     */

  }, {
    key: "unsubscribe",
    value: function () {
      var _unsubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7() {
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this._initializationPromise;

              case 2:
                if (!this.promiseToFetch) {
                  _context7.next = 9;
                  break;
                }

                _context7.next = 5;
                return this.promiseToFetch;

              case 5:
                this.entity.close();
                this.promiseToFetch = null;
                this.subscribed = 'unsubscribed';
                this.emit('userUnsubscribed', this);

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function unsubscribe() {
        return _unsubscribe.apply(this, arguments);
      }

      return unsubscribe;
    }()
  }, {
    key: "_resolveInitialization",
    value: function _resolveInitialization(configuration, identity, entityName, emitUpdated) {
      this.configuration = configuration;
      this.identity = identity;
      this.entityName = entityName;
      this.links = {
        self: "".concat(this.configuration.links.users, "/").concat(this.identity)
      };

      this._resolveInitializationPromise();

      if (emitUpdated) {
        this.emit('updated', {
          user: this,
          updateReasons: ['friendlyName', 'attributes', 'online', 'notifiable']
        });
      }
    }
  }]);

  return User;
}(replayEventEmitter.ReplayEventEmitter);

__decorate([declarativeTypeValidator.validateTypesAsync(['string', 'number', 'boolean', 'object', declarativeTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], User.prototype, "updateAttributes", null);

__decorate([declarativeTypeValidator.validateTypesAsync('string'), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], User.prototype, "updateFriendlyName", null);

/**
 * Pagination helper class.
 */
var RestPaginator = /*#__PURE__*/function () {
  /**
   * @internal
   */
  function RestPaginator(items, source, prevToken, nextToken) {
    _classCallCheck__default['default'](this, RestPaginator);

    this.state = {
      prevToken: prevToken,
      nextToken: nextToken,
      source: source,
      items: items
    };
  }
  /**
   * Request the next page. Does not modify the existing object.
   */


  _createClass__default['default'](RestPaginator, [{
    key: "hasNextPage",
    get:
    /**
     * Indicates the existence of the next page.
     */
    function get() {
      return !!this.state.nextToken;
    }
    /**
     * Indicates the existence of the previous page
     */

  }, {
    key: "hasPrevPage",
    get: function get() {
      return !!this.state.prevToken;
    }
    /**
     * Array of elements on the current page.
     */

  }, {
    key: "items",
    get: function get() {
      return this.state.items;
    }
  }, {
    key: "nextPage",
    value: function () {
      var _nextPage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.hasNextPage ? this.state.source(this.state.nextToken) : Promise.reject(new Error('No next page')));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function nextPage() {
        return _nextPage.apply(this, arguments);
      }

      return nextPage;
    }()
    /**
     * Request the previous page. Does not modify the existing object.
     */

  }, {
    key: "prevPage",
    value: function () {
      var _prevPage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.hasPrevPage ? this.state.source(this.state.prevToken) : Promise.reject(new Error('No previous page')));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function prevPage() {
        return _prevPage.apply(this, arguments);
      }

      return prevPage;
    }()
  }]);

  return RestPaginator;
}();

var log$9 = Logger.scope('ChannelDescriptor');
/**
 * Contains channel information.
 * Unlike {@link Channel}, this information won't be updated in realtime.
 * To have fresh data, user should query for channel descriptors again.
 */

var ChannelDescriptor = /*#__PURE__*/function () {
  /**
   * Unique system identifier of the channel.
   */

  /**
   * Custom attributes of the channel.
   */

  /**
   * Unique name of the channel.
   */

  /**
   * Name of the channel.
   */

  /**
   * Custom attributes of the channel.
   */

  /**
   * Identity of the user that created this channel.
   */

  /**
   * Date this channel was created on.
   */

  /**
   * Date this channel was last updated on.
   */

  /**
   * Amount of messages in the channel.
   */

  /**
   * Amount of members in the channel.
   */

  /**
   * Index of the last message the user has read in this channel.
   */

  /**
   * Delivery status of the channel.
   */

  /**
   * MemberType of the channel.
   */

  /**
   * Signifies whether the channel is private.
   */

  /**
   * User notification level for this channel.
   */

  /**
   * @internal
   */
  function ChannelDescriptor(client, descriptor) {
    _classCallCheck__default['default'](this, ChannelDescriptor);

    this.client = client;
    this.descriptor = descriptor;
    this.sid = descriptor.sid || descriptor.conversation_sid;
    this.channel = "".concat(this.sid, ".channel");
    this.uniqueName = descriptor.unique_name;
    this.friendlyName = descriptor.friendly_name;
    this.attributes = parseAttributes(descriptor.attributes, 'Failed to parse channel attributes', log$9);
    this.createdBy = descriptor.created_by;
    this.dateCreated = parseTime$1(descriptor.date_created);
    this.dateUpdated = parseTime$1(descriptor.date_updated);
    this.messagesCount = descriptor.messages_count;
    this.membersCount = descriptor.participants_count;
    this.type = descriptor.type;
    this.isPrivate = descriptor.type === 'private';
    this.lastConsumedMessageIndex = descriptor.last_consumed_message_index;
    this.notificationLevel = descriptor.notification_level || undefined;
    this.status = descriptor.status || 'unknown';
  }
  /**
   * Get the channel object from the descriptor.
   */


  _createClass__default['default'](ChannelDescriptor, [{
    key: "getChannel",
    value: function getChannel() {
      return this.client.getChannelBySid(this.sid);
    }
  }]);

  return ChannelDescriptor;
}();

/**
 * Public channels collection
 * It's a cassandra-backed pull-based collection
 */

var PublicChannels = /*#__PURE__*/function () {
  function PublicChannels(client, services, url) {
    _classCallCheck__default['default'](this, PublicChannels);

    this.client = client;
    this.services = services;
    this.url = url;
  }

  _createClass__default['default'](PublicChannels, [{
    key: "getChannels",
    value: function () {
      var _getChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this = this;

        var args,
            url,
            response,
            _args = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                args = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                url = new UriBuilder(this.url).arg('PageToken', args.pageToken).build();
                _context.next = 4;
                return this.services.network.get(url);

              case 4:
                response = _context.sent;
                return _context.abrupt("return", new RestPaginator(response.body.conversations.map(function (x) {
                  return new ChannelDescriptor(_this.client, x);
                }), function (pageToken) {
                  return _this.getChannels({
                    pageToken: pageToken
                  });
                }, response.body.meta.previous_token, response.body.meta.next_token));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getChannels() {
        return _getChannels.apply(this, arguments);
      }

      return getChannels;
    }()
  }, {
    key: "getChannelBySid",
    value: function () {
      var _getChannelBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(sid) {
        var url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                url = new UriBuilder(this.url).path(sid).build();
                _context2.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context2.sent;
                return _context2.abrupt("return", new ChannelDescriptor(this.client, response.body));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getChannelBySid(_x) {
        return _getChannelBySid.apply(this, arguments);
      }

      return getChannelBySid;
    }()
  }, {
    key: "getChannelByUniqueName",
    value: function () {
      var _getChannelByUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(uniqueName) {
        var url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                url = new UriBuilder(this.url).path(uniqueName).build();
                _context3.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context3.sent;
                return _context3.abrupt("return", new ChannelDescriptor(this.client, response.body));

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getChannelByUniqueName(_x2) {
        return _getChannelByUniqueName.apply(this, arguments);
      }

      return getChannelByUniqueName;
    }()
  }]);

  return PublicChannels;
}();

function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var Network = /*#__PURE__*/function () {
  function Network(configuration, services) {
    _classCallCheck__default['default'](this, Network);

    this.configuration = configuration;
    this.services = services;
    this.cache = new Map();
    this.cacheLifetime = this.configuration.httpCacheInterval * 100;
    this.cleanupCache();
  }

  _createClass__default['default'](Network, [{
    key: "isExpired",
    value: function isExpired(timestamp) {
      return !this.cacheLifetime || Date.now() - timestamp > this.cacheLifetime;
    }
  }, {
    key: "cleanupCache",
    value: function cleanupCache() {
      var _iterator = _createForOfIteratorHelper$2(this.cache),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray__default['default'](_step.value, 2),
              k = _step$value[0],
              v = _step$value[1];

          if (this.isExpired(v.timestamp)) {
            this.cache.delete(k);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (this.cache.size === 0) {
        clearInterval(this.timer);
      }
    }
  }, {
    key: "pokeTimer",
    value: function pokeTimer() {
      var _this = this;

      this.timer = this.timer || setInterval(function () {
        return _this.cleanupCache();
      }, this.cacheLifetime * 2);
    }
  }, {
    key: "executeWithRetry",
    value: function () {
      var _executeWithRetry = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(request) {
        var _this2 = this;

        var retryWhenThrottled,
            _args = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                retryWhenThrottled = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;
                return _context.abrupt("return", new Promise(function (resolve, reject) {
                  var codesToRetryOn = [502, 503, 504];

                  if (retryWhenThrottled) {
                    codesToRetryOn.push(429);
                  }

                  var retrier = new operationRetrier.Retrier(_this2.configuration.backoffConfiguration);
                  retrier.on('attempt', function () {
                    request().then(function (result) {
                      return retrier.succeeded(result);
                    }).catch(function (err) {
                      if (codesToRetryOn.indexOf(err.status) > -1) {
                        retrier.failed(err);
                      } else if (err.message === 'Twilsock disconnected') {
                        // Ugly hack. We must make a proper exceptions for twilsock
                        retrier.failed(err);
                      } else {
                        // Fatal error
                        retrier.removeAllListeners();
                        retrier.cancel();
                        reject(err);
                      }
                    });
                  });
                  retrier.on('succeeded', function (result) {
                    resolve(result);
                  });
                  retrier.on('cancelled', function (err) {
                    return reject(err);
                  });
                  retrier.on('failed', function (err) {
                    return reject(err);
                  });
                  retrier.start();
                }));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function executeWithRetry(_x) {
        return _executeWithRetry.apply(this, arguments);
      }

      return executeWithRetry;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(url) {
        var _this3 = this;

        var cacheEntry, headers, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                cacheEntry = this.cache.get(url);

                if (!(cacheEntry && !this.isExpired(cacheEntry.timestamp))) {
                  _context2.next = 3;
                  break;
                }

                return _context2.abrupt("return", cacheEntry.response);

              case 3:
                headers = {};
                _context2.next = 6;
                return this.executeWithRetry(function () {
                  return _this3.services.transport.get(url, headers, _this3.configuration.productId);
                }, this.configuration.retryWhenThrottled);

              case 6:
                response = _context2.sent;
                this.cache.set(url, {
                  response: response,
                  timestamp: Date.now()
                });
                this.pokeTimer();
                return _context2.abrupt("return", response);

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function get(_x2) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }]);

  return Network;
}();

var NotificationTypes = function NotificationTypes() {
  _classCallCheck__default['default'](this, NotificationTypes);
};

_defineProperty__default['default'](NotificationTypes, "TYPING_INDICATOR", 'twilio.ipmsg.typing_indicator');

_defineProperty__default['default'](NotificationTypes, "NEW_MESSAGE", 'twilio.channel.new_message');

_defineProperty__default['default'](NotificationTypes, "ADDED_TO_CHANNEL", 'twilio.channel.added_to_channel');

_defineProperty__default['default'](NotificationTypes, "INVITED_TO_CHANNEL", 'twilio.channel.invited_to_channel');

_defineProperty__default['default'](NotificationTypes, "REMOVED_FROM_CHANNEL", 'twilio.channel.removed_from_channel');

_defineProperty__default['default'](NotificationTypes, "CONSUMPTION_UPDATE", 'twilio.channel.consumption_update');

function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$8 = Logger.scope('Member');
/**
 * A member represents a remote client in a channel.
 */

var Member = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Member, _ReplayEventEmitter);

  var _super = _createSuper$7(Member);

  /**
   * Channel that the remote client is a member of.
   */

  /**
   * @internal
   */
  function Member(data, sid, channel, links, services) {
    var _this;

    _classCallCheck__default['default'](this, Member);

    _this = _super.call(this);
    _this.channel = channel;
    _this.links = links;
    _this.services = services;
    _this.state = {
      attributes: parseAttributes(data.attributes, 'Retrieved malformed attributes from the server for member: ' + sid, log$8),
      dateCreated: data.dateCreated ? parseTime$1(data.dateCreated) : null,
      dateUpdated: data.dateCreated ? parseTime$1(data.dateUpdated) : null,
      sid: sid,
      typingTimeout: null,
      isTyping: false,
      identity: data.identity || null,
      roleSid: data.roleSid || null,
      lastConsumedMessageIndex: Number.isInteger(data.lastConsumedMessageIndex) ? data.lastConsumedMessageIndex : null,
      lastConsumptionTimestamp: data.lastConsumptionTimestamp ? parseTime$1(data.lastConsumptionTimestamp) : null,
      type: data.type || 'chat',
      userInfo: data.userInfo
    };

    if (!data.identity && !data.type) {
      throw new Error('Received invalid Member object from server: Missing identity or type of Member.');
    }

    return _this;
  }
  /**
   * Fired when the member has started typing.
   *
   * Parameters:
   * 1. {@link Member} `member` - the member in question
   * @event
   */


  _createClass__default['default'](Member, [{
    key: "sid",
    get:
    /**
     * The server-assigned unique identifier for the member.
     */
    function get() {
      return this.state.sid;
    }
    /**
     * Custom attributes of the member.
     */

  }, {
    key: "attributes",
    get: function get() {
      return this.state.attributes;
    }
    /**
     * Date this member was created on.
     */

  }, {
    key: "dateCreated",
    get: function get() {
      return this.state.dateCreated;
    }
    /**
     * Date this member was last updated on.
     */

  }, {
    key: "dateUpdated",
    get: function get() {
      return this.state.dateUpdated;
    }
    /**
     * Identity of the member.
     */

  }, {
    key: "identity",
    get: function get() {
      return this.state.identity;
    }
    /**
     * Indicates whether the member is currently typing.
     */

  }, {
    key: "isTyping",
    get: function get() {
      return this.state.isTyping;
    }
    /**
     * The index of the last consumed message by the member.
     * Note that retrieving messages on a client endpoint does not mean that messages are read,
     * please consider reading about the [Read Horizon feature](https://www.twilio.com/docs/api/chat/guides/consumption-horizon)
     * to find out about the proper way to mark messages as read.
     */

  }, {
    key: "lastConsumedMessageIndex",
    get: function get() {
      return this.state.lastConsumedMessageIndex;
    }
    /**
     * Date of the most recent consumption horizon update.
     */

  }, {
    key: "lastConsumptionTimestamp",
    get: function get() {
      return this.state.lastConsumptionTimestamp;
    }
  }, {
    key: "roleSid",
    get: function get() {
      return this.state.roleSid;
    }
    /**
     * Message type of the member.
     */

  }, {
    key: "type",
    get: function get() {
      return this.state.type;
    }
    /**
     * Internal method used to start or reset the typing indicator timeout (with event emitting).
     * @internal
     */

  }, {
    key: "_startTyping",
    value: function _startTyping(timeout) {
      var _this2 = this;

      clearTimeout(this.state.typingTimeout);
      this.state.isTyping = true;
      this.emit('typingStarted', this);
      this.channel.emit('typingStarted', this);
      this.state.typingTimeout = setTimeout(function () {
        return _this2._endTyping();
      }, timeout);
      return this;
    }
    /**
     * Internal method function used to stop typing indicator timeout (with event emitting).
     * @internal
     */

  }, {
    key: "_endTyping",
    value: function _endTyping() {
      if (!this.state.typingTimeout) {
        return;
      }

      this.state.isTyping = false;
      this.emit('typingEnded', this);
      this.channel.emit('typingEnded', this);
      clearInterval(this.state.typingTimeout);
      this.state.typingTimeout = null;
    }
    /**
     * Internal method function used update local object's property roleSid with a new value.
     * @internal
     */

  }, {
    key: "_update",
    value: function _update(data) {
      var _this$state$dateUpdat, _this$state$dateCreat, _this$state$lastConsu;

      var updateReasons = [];
      var updateAttributes = parseAttributes(data.attributes, 'Retrieved malformed attributes from the server for member: ' + this.state.sid, log$8);

      if (data.attributes && !isEqual__default['default'](this.state.attributes, updateAttributes)) {
        this.state.attributes = updateAttributes;
        updateReasons.push('attributes');
      }

      var updatedDateUpdated = parseTime$1(data.dateUpdated);

      if (data.dateUpdated && (updatedDateUpdated === null || updatedDateUpdated === void 0 ? void 0 : updatedDateUpdated.getTime()) !== ((_this$state$dateUpdat = this.state.dateUpdated) === null || _this$state$dateUpdat === void 0 ? void 0 : _this$state$dateUpdat.getTime())) {
        this.state.dateUpdated = updatedDateUpdated;
        updateReasons.push('dateUpdated');
      }

      var updatedDateCreated = parseTime$1(data.dateCreated);

      if (data.dateCreated && (updatedDateCreated === null || updatedDateCreated === void 0 ? void 0 : updatedDateCreated.getTime()) !== ((_this$state$dateCreat = this.state.dateCreated) === null || _this$state$dateCreat === void 0 ? void 0 : _this$state$dateCreat.getTime())) {
        this.state.dateCreated = updatedDateCreated;
        updateReasons.push('dateCreated');
      }

      if (data.roleSid && this.state.roleSid !== data.roleSid) {
        this.state.roleSid = data.roleSid;
        updateReasons.push('roleSid');
      }

      var indexIsValid = Number.isInteger(data.lastConsumedMessageIndex) || data.lastConsumedMessageIndex === null;

      if (indexIsValid && this.state.lastConsumedMessageIndex !== data.lastConsumedMessageIndex) {
        this.state.lastConsumedMessageIndex = data.lastConsumedMessageIndex;
        updateReasons.push('lastConsumedMessageIndex');
      }

      var updatedTimestamp = parseTime$1(data.lastConsumptionTimestamp);

      if (data.lastConsumptionTimestamp && (updatedTimestamp === null || updatedTimestamp === void 0 ? void 0 : updatedTimestamp.getTime()) !== ((_this$state$lastConsu = this.state.lastConsumptionTimestamp) === null || _this$state$lastConsu === void 0 ? void 0 : _this$state$lastConsu.getTime())) {
        this.state.lastConsumptionTimestamp = updatedTimestamp;
        updateReasons.push('lastConsumptionTimestamp');
      }

      if (updateReasons.length > 0) {
        this.emit('updated', {
          member: this,
          updateReasons: updateReasons
        });
      }

      return this;
    }
    /**
     * Get the user descriptor for this member. Supported only for members of type `chat`.
     */

  }, {
    key: "getUserDescriptor",
    value: function () {
      var _getUserDescriptor = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.type != 'chat')) {
                  _context.next = 2;
                  break;
                }

                throw new Error('Getting User Descriptor is not supported for this Member type: ' + this.type);

              case 2:
                return _context.abrupt("return", this.services.users.getUserDescriptor(this.state.identity));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getUserDescriptor() {
        return _getUserDescriptor.apply(this, arguments);
      }

      return getUserDescriptor;
    }()
    /**
     * Get the user for this member and subscribes to it. Supported only for members of type `chat`.
     */

  }, {
    key: "getUser",
    value: function () {
      var _getUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(this.type != 'chat')) {
                  _context2.next = 2;
                  break;
                }

                throw new Error('Getting User is not supported for this Member type: ' + this.type);

              case 2:
                return _context2.abrupt("return", this.services.users.getUser(this.state.identity, this.state.userInfo));

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getUser() {
        return _getUser.apply(this, arguments);
      }

      return getUser;
    }()
    /**
     * Remove the member from the channel.
     */

  }, {
    key: "remove",
    value: function () {
      var _remove = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.channel.removeMember(this));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function remove() {
        return _remove.apply(this, arguments);
      }

      return remove;
    }()
    /**
     * Update the attributes of the member.
     * @param attributes New attributes.
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.services.commandExecutor.mutateResource('post', this.links.self, {
                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined
                });

              case 2:
                return _context4.abrupt("return", this);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function updateAttributes(_x) {
        return _updateAttributes.apply(this, arguments);
      }

      return updateAttributes;
    }()
  }]);

  return Member;
}(replayEventEmitter.ReplayEventEmitter);

_defineProperty__default['default'](Member, "typingStarted", 'typingStarted');

_defineProperty__default['default'](Member, "typingEnded", 'typingEnded');

_defineProperty__default['default'](Member, "updated", 'updated');

__decorate([declarativeTypeValidator.validateTypesAsync(['string', 'number', 'boolean', 'object', declarativeTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Member.prototype, "updateAttributes", null);

function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$7 = Logger.scope('Members');
/**
 * @classdesc Represents the collection of members for the channel
 * @fires Members#memberJoined
 * @fires Members#memberLeft
 * @fires Members#memberUpdated
 */

var Members = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Members, _ReplayEventEmitter);

  var _super = _createSuper$6(Members);

  function Members(channel, members, links, configuration, services) {
    var _this;

    _classCallCheck__default['default'](this, Members);

    _this = _super.call(this);
    _this.channel = channel;
    _this.members = members;
    _this.links = links;
    _this.configuration = configuration;
    _this.services = services;
    return _this;
  }

  _createClass__default['default'](Members, [{
    key: "unsubscribe",
    value: function () {
      var _unsubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var entity;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.rosterEntityPromise) {
                  _context.next = 6;
                  break;
                }

                _context.next = 3;
                return this.rosterEntityPromise;

              case 3:
                entity = _context.sent;
                entity.close();
                this.rosterEntityPromise = null;

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function unsubscribe() {
        return _unsubscribe.apply(this, arguments);
      }

      return unsubscribe;
    }()
  }, {
    key: "subscribe",
    value: function () {
      var _subscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(rosterObjectName) {
        var _this2 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.rosterEntityPromise = this.rosterEntityPromise || this.services.syncClient.map({
                  id: rosterObjectName,
                  mode: 'open_existing'
                }).then(function (rosterMap) {
                  rosterMap.on('itemAdded', function (args) {
                    log$7.debug(_this2.channel.sid + ' itemAdded: ' + args.item.key);

                    _this2.upsertMember(args.item.key, args.item.data).then(function (member) {
                      _this2.emit('memberJoined', member);
                    });
                  });
                  rosterMap.on('itemRemoved', function (args) {
                    log$7.debug(_this2.channel.sid + ' itemRemoved: ' + args.key);
                    var memberSid = args.key;

                    if (!_this2.members.has(memberSid)) {
                      return;
                    }

                    var leftMember = _this2.members.get(memberSid);

                    _this2.members.delete(memberSid);

                    _this2.emit('memberLeft', leftMember);
                  });
                  rosterMap.on('itemUpdated', function (args) {
                    log$7.debug(_this2.channel.sid + ' itemUpdated: ' + args.item.key);

                    _this2.upsertMember(args.item.key, args.item.data);
                  });
                  var membersPromises = [];
                  var that = _this2;

                  var rosterMapHandler = function rosterMapHandler(paginator) {
                    paginator.items.forEach(function (item) {
                      membersPromises.push(that.upsertMember(item.key, item.data));
                    });
                    return paginator.hasNextPage ? paginator.nextPage().then(rosterMapHandler) : null;
                  };

                  return rosterMap.getItems().then(rosterMapHandler).then(function () {
                    return Promise.all(membersPromises);
                  }).then(function () {
                    return rosterMap;
                  });
                }).catch(function (err) {
                  _this2.rosterEntityPromise = null;

                  if (_this2.services.syncClient.connectionState != 'disconnected') {
                    log$7.error('Failed to get roster object for channel', _this2.channel.sid, err);
                  }

                  log$7.debug('ERROR: Failed to get roster object for channel', _this2.channel.sid, err);
                  throw err;
                }));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function subscribe(_x) {
        return _subscribe.apply(this, arguments);
      }

      return subscribe;
    }()
  }, {
    key: "upsertMember",
    value: function () {
      var _upsertMember = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(memberSid, data) {
        var _this3 = this;

        var member, links;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                member = this.members.get(memberSid);

                if (!member) {
                  _context3.next = 3;
                  break;
                }

                return _context3.abrupt("return", member._update(data));

              case 3:
                links = {
                  self: "".concat(this.links.participants, "/").concat(memberSid)
                };
                member = new Member(data, memberSid, this.channel, links, this.services);
                this.members.set(memberSid, member);
                member.on('updated', function (args) {
                  return _this3.emit('memberUpdated', args);
                });
                return _context3.abrupt("return", member);

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function upsertMember(_x2, _x3) {
        return _upsertMember.apply(this, arguments);
      }

      return upsertMember;
    }()
    /**
     * @returns {Promise<Array<Member>>} returns list of members {@see Member}
     */

  }, {
    key: "getMembers",
    value: function () {
      var _getMembers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
        var _this4 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", this.rosterEntityPromise.then(function () {
                  var members = [];

                  _this4.members.forEach(function (member) {
                    return members.push(member);
                  });

                  return members;
                }));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getMembers() {
        return _getMembers.apply(this, arguments);
      }

      return getMembers;
    }()
    /**
     * Get member by SID from channel
     * @returns {Promise<Member>}
     */

  }, {
    key: "getMemberBySid",
    value: function () {
      var _getMemberBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(memberSid) {
        var _this5 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", this.rosterEntityPromise.then(function () {
                  var member = _this5.members.get(memberSid);

                  if (!member) {
                    throw new Error('Member with SID ' + memberSid + ' was not found');
                  }

                  return member;
                }));

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getMemberBySid(_x4) {
        return _getMemberBySid.apply(this, arguments);
      }

      return getMemberBySid;
    }()
    /**
     * Get member by identity from channel
     * @returns {Promise<Member>}
     */

  }, {
    key: "getMemberByIdentity",
    value: function () {
      var _getMemberByIdentity = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(identity) {
        var _this6 = this;

        var foundMember;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                foundMember = null;
                return _context6.abrupt("return", this.rosterEntityPromise.then(function () {
                  _this6.members.forEach(function (member) {
                    if (member.identity === identity) {
                      foundMember = member;
                    }
                  });

                  if (!foundMember) {
                    throw new Error('Member with identity ' + identity + ' was not found');
                  }

                  return foundMember;
                }));

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getMemberByIdentity(_x5) {
        return _getMemberByIdentity.apply(this, arguments);
      }

      return getMemberByIdentity;
    }()
    /**
     * Add user to the channel
     * @returns {Promise<any>}
     */

  }, {
    key: "add",
    value: function () {
      var _add = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(identity) {
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.services.commandExecutor.mutateResource('post', this.links.participants, {
                  identity: identity
                });

              case 2:
                return _context7.abrupt("return", _context7.sent);

              case 3:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function add(_x6) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
    /**
     * Invites user to the channel
     * User can choose either to join or not
     * @returns {Promise<any>}
     */

  }, {
    key: "invite",
    value: function () {
      var _invite = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(identity) {
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.services.commandExecutor.mutateResource('post', this.channel.links.invites, {
                  identity: identity
                });

              case 2:
                return _context8.abrupt("return", _context8.sent);

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function invite(_x7) {
        return _invite.apply(this, arguments);
      }

      return invite;
    }()
    /**
     * Remove member from channel
     * @returns {Promise<any>}
     */

  }, {
    key: "remove",
    value: function () {
      var _remove = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9(identity) {
        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.services.commandExecutor.mutateResource('delete', "".concat(this.links.participants, "/").concat(identity));

              case 2:
                return _context9.abrupt("return", _context9.sent);

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function remove(_x8) {
        return _remove.apply(this, arguments);
      }

      return remove;
    }()
  }]);

  return Members;
}(replayEventEmitter.ReplayEventEmitter);
/**
 * Fired when member joined channel
 * @event Members#memberJoined
 * @type {Member}
 */

/**
 * Fired when member left channel
 * @event Members#memberLeft
 * @type {Member}
 */

/**
 * Fired when member updated
 * @event Members#memberUpdated
 * @type {Object}
 * @property {Member} member - Updated Member
 * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons
 */

/**
 * Represents media information for a message in a channel.
 */
var Media = /*#__PURE__*/function () {
  /**
   * @internal
   */
  function Media(data, services) {
    _classCallCheck__default['default'](this, Media);

    _defineProperty__default['default'](this, "mcsMedia", null);

    this.services = services;
    this.state = {
      sid: data.sid,
      filename: data.filename,
      contentType: data.contentType,
      size: data.size
    };
  }
  /**
   * Server-assigned unique identifier for the media.
   */


  _createClass__default['default'](Media, [{
    key: "sid",
    get: function get() {
      return this.state.sid;
    }
    /**
     * File name. Null if absent.
     */

  }, {
    key: "filename",
    get: function get() {
      return this.state.filename;
    }
    /**
     * Content type of the media.
     */

  }, {
    key: "contentType",
    get: function get() {
      return this.state.contentType;
    }
    /**
     * Size of the media in bytes.
     */

  }, {
    key: "size",
    get: function get() {
      return this.state.size;
    }
    /**
     * Returns the direct content URL for the media.
     *
     * This URL is impermanent, it will expire in several minutes and cannot be cached.
     * If the URL becomes expired, you need to request a new one.
     * Each call to this function produces a new temporary URL.
     */

  }, {
    key: "getContentTemporaryUrl",
    value: function () {
      var _getContentTemporaryUrl = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.mcsMedia) {
                  _context.next = 8;
                  break;
                }

                if (!this.services.mcsClient) {
                  _context.next = 7;
                  break;
                }

                _context.next = 4;
                return this.services.mcsClient.get(this.state.sid);

              case 4:
                this.mcsMedia = _context.sent;
                _context.next = 8;
                break;

              case 7:
                throw new Error('Media Content Service is unavailable');

              case 8:
                return _context.abrupt("return", this.mcsMedia.getContentUrl());

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getContentTemporaryUrl() {
        return _getContentTemporaryUrl.apply(this, arguments);
      }

      return getContentTemporaryUrl;
    }()
  }]);

  return Media;
}();

function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$6 = Logger.scope('Message');
/**
 * A message in a channel.
 */

var Message = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Message, _ReplayEventEmitter);

  var _super = _createSuper$5(Message);

  /**
   * Channel that the message is in.
   */

  /**
   * @internal
   */
  function Message(index, data, channel, links, configuration, services) {
    var _this;

    _classCallCheck__default['default'](this, Message);

    _this = _super.call(this);
    _this.channel = channel;
    _this.links = links;
    _this.configuration = configuration;
    _this.services = services;
    _this.state = {
      sid: data.sid,
      index: index,
      author: data.author == null ? null : data.author,
      body: data.text,
      timestamp: data.timestamp ? new Date(data.timestamp) : null,
      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,
      lastUpdatedBy: data.lastUpdatedBy ? data.lastUpdatedBy : null,
      attributes: parseAttributes(data.attributes, "Got malformed attributes for the message ".concat(data.sid), log$6),
      type: data.type ? data.type : 'text',
      media: data.type && data.type === 'media' && data.media ? new Media(data.media, _this.services) : null,
      memberSid: data.memberSid == null ? null : data.memberSid
    };
    return _this;
  }
  /**
   * Fired when the properties or the body of the message have been updated.
   *
   * Parameters:
   * 1. object `data` - info object provided with the event. It has the following properties:
   *     * {@link Message} message - the message in question
   *     * {@link MessageUpdateReason}[] updateReasons - array of reasons for the update
   */


  _createClass__default['default'](Message, [{
    key: "sid",
    get:
    /**
     * The server-assigned unique identifier for the message.
     */
    function get() {
      return this.state.sid;
    }
    /**
     * Name of the user that sent the message.
     */

  }, {
    key: "author",
    get: function get() {
      return this.state.author;
    }
    /**
     * Body of the message. Null if the message is a media message.
     */

  }, {
    key: "body",
    get: function get() {
      if (this.type === 'media') {
        return null;
      }

      return this.state.body;
    }
    /**
     * Date this message was last updated on.
     */

  }, {
    key: "dateUpdated",
    get: function get() {
      return this.state.dateUpdated;
    }
    /**
     * Index of the message in the channel's messages list.
     * By design of the Programmable Chat system, the message indices may have arbitrary gaps between them,
     * that does not necessarily mean they were deleted or otherwise modified - just that
     * messages may have some non-contiguous indices even if they are being sent immediately one after another.
     *
     * Trying to use indices for some calculations is going to be unreliable.
     *
     * To calculate the number of unread messages it is better to use the read horizon API.
     * See {@link Channel.getUnconsumedMessagesCount} for details.
     */

  }, {
    key: "index",
    get: function get() {
      return this.state.index;
    }
    /**
     * Identity of the last user that updated the message.
     */

  }, {
    key: "lastUpdatedBy",
    get: function get() {
      return this.state.lastUpdatedBy;
    }
    /**
     * Date this message was created on.
     */

  }, {
    key: "dateCreated",
    get: function get() {
      return this.state.timestamp;
    }
    /**
     * Custom attributes of the message.
     */

  }, {
    key: "attributes",
    get: function get() {
      return this.state.attributes;
    }
    /**
     * Push notification type of the message.
     */

  }, {
    key: "type",
    get: function get() {
      return this.state.type;
    }
    /**
     * Media information (if present).
     */

  }, {
    key: "media",
    get: function get() {
      return this.state.media;
    }
    /**
     * The server-assigned unique identifier of the authoring member.
     */

  }, {
    key: "memberSid",
    get: function get() {
      return this.state.memberSid;
    }
  }, {
    key: "_update",
    value: function _update(data) {
      var updateReasons = [];

      if ((data.text || typeof data.text === 'string') && data.text !== this.state.body) {
        this.state.body = data.text;
        updateReasons.push('body');
      }

      if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {
        this.state.lastUpdatedBy = data.lastUpdatedBy;
        updateReasons.push('lastUpdatedBy');
      }

      if (data.author && data.author !== this.state.author) {
        this.state.author = data.author;
        updateReasons.push('author');
      }

      if (data.dateUpdated && new Date(data.dateUpdated).getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {
        this.state.dateUpdated = new Date(data.dateUpdated);
        updateReasons.push('dateUpdated');
      }

      if (data.timestamp && new Date(data.timestamp).getTime() !== (this.state.timestamp && this.state.timestamp.getTime())) {
        this.state.timestamp = new Date(data.timestamp);
        updateReasons.push('dateCreated');
      }

      var updatedAttributes = parseAttributes(data.attributes, "Got malformed attributes for the message ".concat(this.sid), log$6);

      if (!isEqual__default['default'](this.state.attributes, updatedAttributes)) {
        this.state.attributes = updatedAttributes;
        updateReasons.push('attributes');
      }

      if (updateReasons.length > 0) {
        this.emit('updated', {
          message: this,
          updateReasons: updateReasons
        });
      }
    }
    /**
     * Get the member who is the author of the message.
     */

  }, {
    key: "getMember",
    value: function () {
      var _getMember = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this2 = this;

        var member, errorMesage;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                member = null;

                if (!this.state.memberSid) {
                  _context.next = 5;
                  break;
                }

                _context.next = 4;
                return this.channel.getMemberBySid(this.memberSid).catch(function () {
                  log$6.debug('Member with sid "' + _this2.memberSid + '" not found for message ' + _this2.sid);
                  return null;
                });

              case 4:
                member = _context.sent;

              case 5:
                if (!(!member && this.state.author)) {
                  _context.next = 9;
                  break;
                }

                _context.next = 8;
                return this.channel.getMemberByIdentity(this.state.author).catch(function () {
                  log$6.debug('Member with identity "' + _this2.author + '" not found for message ' + _this2.sid);
                  return null;
                });

              case 8:
                member = _context.sent;

              case 9:
                if (!member) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("return", member);

              case 11:
                errorMesage = 'Member with ';

                if (this.state.memberSid) {
                  errorMesage += 'SID \'' + this.state.memberSid + '\' ';
                }

                if (this.state.author) {
                  if (this.state.memberSid) {
                    errorMesage += 'or ';
                  }

                  errorMesage += 'identity \'' + this.state.author + '\' ';
                }

                if (errorMesage === 'Member with ') {
                  errorMesage = 'Member ';
                }

                errorMesage += 'was not found';
                throw new Error(errorMesage);

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getMember() {
        return _getMember.apply(this, arguments);
      }

      return getMember;
    }()
    /**
     * Remove the message.
     */

  }, {
    key: "remove",
    value: function () {
      var _remove = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.services.commandExecutor.mutateResource('delete', this.links.self);

              case 2:
                return _context2.abrupt("return", this);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function remove() {
        return _remove.apply(this, arguments);
      }

      return remove;
    }()
    /**
     * Edit the message body.
     * @param body New body of the message.
     */

  }, {
    key: "updateBody",
    value: function () {
      var _updateBody = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(body) {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.services.commandExecutor.mutateResource('post', this.links.self, {
                  body: body
                });

              case 2:
                return _context3.abrupt("return", this);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function updateBody(_x) {
        return _updateBody.apply(this, arguments);
      }

      return updateBody;
    }()
    /**
     * Edit the message attributes.
     * @param attributes New attributes.
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.services.commandExecutor.mutateResource('post', this.links.self, {
                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined
                });

              case 2:
                return _context4.abrupt("return", this);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function updateAttributes(_x2) {
        return _updateAttributes.apply(this, arguments);
      }

      return updateAttributes;
    }()
  }]);

  return Message;
}(replayEventEmitter.ReplayEventEmitter);

_defineProperty__default['default'](Message, "updated", 'updated');

__decorate([declarativeTypeValidator.validateTypesAsync('string'), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Message.prototype, "updateBody", null);

__decorate([declarativeTypeValidator.validateTypesAsync(['string', 'number', 'boolean', 'object', declarativeTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Message.prototype, "updateAttributes", null);

function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$5 = Logger.scope('Messages');
/**
 * Represents the collection of messages in a channel
 */

var Messages = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Messages, _ReplayEventEmitter);

  var _super = _createSuper$4(Messages);

  function Messages(channel, configuration, services) {
    var _this;

    _classCallCheck__default['default'](this, Messages);

    _this = _super.call(this);
    _this.channel = channel;
    _this.configuration = configuration;
    _this.services = services;
    _this.messagesByIndex = new Map();
    _this.messagesListPromise = null;
    return _this;
  }
  /**
   * Subscribe to the Messages Event Stream
   * @param {String} name - The name of Sync object for the Messages resource.
   * @returns {Promise}
   */


  _createClass__default['default'](Messages, [{
    key: "subscribe",
    value: function () {
      var _subscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(name) {
        var _this2 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.messagesListPromise = this.messagesListPromise || this.services.syncClient.list({
                  id: name,
                  mode: 'open_existing'
                }).then(function (list) {
                  list.on('itemAdded', function (args) {
                    log$5.debug(_this2.channel.sid + ' itemAdded: ' + args.item.index);
                    var links = {
                      self: "".concat(_this2.channel.links.messages, "/").concat(args.item.data.sid),
                      conversation: _this2.channel.links.self,
                      messages_receipts: "".concat(_this2.channel.links.messages, "/").concat(args.item.data.sid, "/Receipts")
                    };
                    var message = new Message(args.item.index, args.item.data, _this2.channel, links, _this2.configuration, _this2.services);

                    if (_this2.messagesByIndex.has(message.index)) {
                      log$5.debug('Message arrived, but already known and ignored', _this2.channel.sid, message.index);
                      return;
                    }

                    _this2.messagesByIndex.set(message.index, message);

                    message.on('updated', function (args) {
                      return _this2.emit('messageUpdated', args);
                    });

                    _this2.emit('messageAdded', message);
                  });
                  list.on('itemRemoved', function (args) {
                    log$5.debug(_this2.channel.sid + ' itemRemoved: ' + args.index);
                    var index = args.index;

                    if (_this2.messagesByIndex.has(index)) {
                      var message = _this2.messagesByIndex.get(index);

                      _this2.messagesByIndex.delete(message.index);

                      message.removeAllListeners('updated');

                      _this2.emit('messageRemoved', message);
                    }
                  });
                  list.on('itemUpdated', function (args) {
                    log$5.debug(_this2.channel.sid + ' itemUpdated: ' + args.item.index);

                    var message = _this2.messagesByIndex.get(args.item.index);

                    if (message) {
                      message._update(args.item.data);
                    }
                  });
                  return list;
                }).catch(function (err) {
                  _this2.messagesListPromise = null;

                  if (_this2.services.syncClient.connectionState != 'disconnected') {
                    log$5.error('Failed to get messages object for channel', _this2.channel.sid, err);
                  }

                  log$5.debug('ERROR: Failed to get messages object for channel', _this2.channel.sid, err);
                  throw err;
                }));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function subscribe(_x) {
        return _subscribe.apply(this, arguments);
      }

      return subscribe;
    }()
  }, {
    key: "unsubscribe",
    value: function () {
      var _unsubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var entity;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this.messagesListPromise) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 3;
                return this.messagesListPromise;

              case 3:
                entity = _context2.sent;
                entity.close();
                this.messagesListPromise = null;

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function unsubscribe() {
        return _unsubscribe.apply(this, arguments);
      }

      return unsubscribe;
    }()
    /**
     * Send Message to the channel
     * @param {String} message - Message to post
     * @param {any} attributes Message attributes
     * @returns Returns promise which can fail
     */

  }, {
    key: "send",
    value: function () {
      var _send = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(message) {
        var attributes,
            _args3 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                attributes = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                log$5.debug('Sending text message', message, attributes);
                _context3.next = 4;
                return this.services.commandExecutor.mutateResource('post', this.channel.links.messages, {
                  body: message || '',
                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined
                });

              case 4:
                return _context3.abrupt("return", _context3.sent);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function send(_x2) {
        return _send.apply(this, arguments);
      }

      return send;
    }()
    /**
     * Send Media Message to the channel
     * @param {FormData | Channel#SendMediaOptions} mediaContent - Media content to post
     * @param {any} attributes Message attributes
     * @returns Returns promise which can fail
     */

  }, {
    key: "sendMedia",
    value: function () {
      var _sendMedia = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(mediaContent) {
        var attributes,
            media,
            mediaOptions,
            _args4 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                attributes = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                log$5.debug('Sending media message', mediaContent, attributes);

                if (!(typeof FormData !== 'undefined' && mediaContent instanceof FormData)) {
                  _context4.next = 9;
                  break;
                }

                log$5.debug('Sending media message as FormData', mediaContent, attributes);
                _context4.next = 6;
                return this.services.mcsClient.postFormData(mediaContent);

              case 6:
                media = _context4.sent;
                _context4.next = 16;
                break;

              case 9:
                log$5.debug('Sending media message as SendMediaOptions', mediaContent, attributes);
                mediaOptions = mediaContent;

                if (!(!mediaOptions.contentType || !mediaOptions.media)) {
                  _context4.next = 13;
                  break;
                }

                throw new Error('Media content <Channel#SendMediaOptions> must contain non-empty contentType and media');

              case 13:
                _context4.next = 15;
                return this.services.mcsClient.post(mediaOptions.contentType, mediaOptions.media, null);

              case 15:
                media = _context4.sent;

              case 16:
                _context4.next = 18;
                return this.services.commandExecutor.mutateResource('post', this.channel.links.messages, {
                  media_sid: media.sid,
                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined
                });

              case 18:
                return _context4.abrupt("return", _context4.sent);

              case 19:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function sendMedia(_x3) {
        return _sendMedia.apply(this, arguments);
      }

      return sendMedia;
    }()
    /**
     * Returns messages from channel using paginator interface
     * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.
     * @param {String} [anchor] Most early message id which is already known, or 'end' by default
     * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default
     * @returns {Promise<Paginator<Message>>} last page of messages by default
     */

  }, {
    key: "getMessages",
    value: function () {
      var _getMessages2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(pageSize, anchor, direction) {
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                anchor = typeof anchor !== 'undefined' ? anchor : 'end';
                direction = direction || 'backwards';
                return _context5.abrupt("return", this._getMessages(pageSize, anchor, direction));

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getMessages(_x4, _x5, _x6) {
        return _getMessages2.apply(this, arguments);
      }

      return getMessages;
    }()
  }, {
    key: "wrapPaginator",
    value: function () {
      var _wrapPaginator = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(order, page, op) {
        var _this3 = this;

        var shouldReverse, np, pp;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                // We should swap next and prev page here, because of misfit of Sync and Chat paging conceptions
                shouldReverse = order === 'desc';

                np = function np() {
                  return page.nextPage().then(function (x) {
                    return _this3.wrapPaginator(order, x, op);
                  });
                };

                pp = function pp() {
                  return page.prevPage().then(function (x) {
                    return _this3.wrapPaginator(order, x, op);
                  });
                };

                return _context6.abrupt("return", op(page.items).then(function (items) {
                  return {
                    items: items.sort(function (x, y) {
                      return x.index - y.index;
                    }),
                    hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,
                    hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,
                    prevPage: shouldReverse ? np : pp,
                    nextPage: shouldReverse ? pp : np
                  };
                }));

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function wrapPaginator(_x7, _x8, _x9) {
        return _wrapPaginator.apply(this, arguments);
      }

      return wrapPaginator;
    }()
  }, {
    key: "_upsertMessage",
    value: function _upsertMessage(index, value) {
      var _this4 = this;

      var cachedMessage = this.messagesByIndex.get(index);

      if (cachedMessage) {
        return cachedMessage;
      }

      var links = {
        self: "".concat(this.channel.links.messages, "/").concat(value.sid),
        conversation: this.channel.links.self,
        messages_receipts: "".concat(this.channel.links.messages, "/").concat(value.sid, "/Receipts")
      };
      var message = new Message(index, value, this.channel, links, this.configuration, this.services);
      this.messagesByIndex.set(message.index, message);
      message.on('updated', function (args) {
        return _this4.emit('messageUpdated', args);
      });
      return message;
    }
    /**
     * Returns last messages from channel
     * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.
     * @param {String} [anchor] Most early message id which is already known, or 'end' by default
     * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default
     * @returns {Promise<SyncPaginator<Message>>} last page of messages by default
     * @private
     */

  }, {
    key: "_getMessages",
    value: function () {
      var _getMessages3 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(pageSize, anchor, direction) {
        var _this5 = this;

        var order;
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                anchor = typeof anchor !== 'undefined' ? anchor : 'end';
                pageSize = pageSize || 30;
                order = direction === 'backwards' ? 'desc' : 'asc';
                return _context7.abrupt("return", this.messagesListPromise.then(function (messagesList) {
                  return messagesList.getItems({
                    from: anchor !== 'end' ? anchor : void 0,
                    pageSize: pageSize,
                    order: order,
                    limit: pageSize // @todo Limit equals pageSize by default in Sync. This is probably not ideal.

                  });
                }).then(function (page) {
                  return _this5.wrapPaginator(order, page, function (items) {
                    return Promise.all(items.map(function (item) {
                      return _this5._upsertMessage(item.index, item.data);
                    }));
                  });
                }));

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _getMessages(_x10, _x11, _x12) {
        return _getMessages3.apply(this, arguments);
      }

      return _getMessages;
    }()
  }]);

  return Messages;
}(replayEventEmitter.ReplayEventEmitter);

function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$4 = Logger.scope('Channel');
var fieldMappings = {
  lastMessage: 'lastMessage',
  attributes: 'attributes',
  createdBy: 'createdBy',
  dateCreated: 'dateCreated',
  dateUpdated: 'dateUpdated',
  friendlyName: 'friendlyName',
  lastConsumedMessageIndex: 'lastConsumedMessageIndex',
  notificationLevel: 'notificationLevel',
  sid: 'sid',
  status: 'status',
  type: 'type',
  uniqueName: 'uniqueName',
  state: 'state'
};

function parseTime(timeString) {
  try {
    return new Date(timeString);
  } catch (e) {
    return null;
  }
}
/**
 * A channel represents a remote channel of communication between multiple Programmable Chat clients.
 */


var Channel = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Channel, _ReplayEventEmitter);

  var _super = _createSuper$3(Channel);

  /**
   * Unique system identifier of the channel.
   */

  /**
   * @internal
   */
  function Channel(descriptor, sid, links, configuration, services) {
    var _this;

    _classCallCheck__default['default'](this, Channel);

    _this = _super.call(this);
    _this.sid = sid;
    _this.links = links;
    _this.configuration = configuration;
    _this.services = services;
    var attributes = descriptor.attributes || {};
    var createdBy = descriptor.createdBy;
    var dateCreated = parseTime(descriptor.dateCreated);
    var dateUpdated = parseTime(descriptor.dateUpdated);
    var friendlyName = descriptor.friendlyName || null;
    var lastConsumedMessageIndex = Number.isInteger(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;
    var uniqueName = descriptor.uniqueName || null;

    try {
      JSON.stringify(attributes);
    } catch (e) {
      throw new Error('Attributes must be a valid JSON object.');
    }

    _this.entityName = descriptor.channel;
    _this.channelState = {
      uniqueName: uniqueName,
      status: 'notParticipating',
      type: descriptor.type,
      attributes: attributes,
      createdBy: createdBy,
      dateCreated: dateCreated,
      dateUpdated: dateUpdated,
      friendlyName: friendlyName,
      lastConsumedMessageIndex: lastConsumedMessageIndex
    };

    if (descriptor.notificationLevel) {
      _this.channelState.notificationLevel = descriptor.notificationLevel;
    }

    var membersLinks = {
      participants: _this.links.participants
    };
    _this.members = new Map();
    _this.membersEntity = new Members(_assertThisInitialized__default['default'](_this), _this.members, membersLinks, _this.configuration, _this.services);

    _this.membersEntity.on('memberJoined', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'memberJoined'));

    _this.membersEntity.on('memberLeft', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'memberLeft'));

    _this.membersEntity.on('memberUpdated', function (args) {
      return _this.emit('memberUpdated', args);
    });

    _this.messagesEntity = new Messages(_assertThisInitialized__default['default'](_this), _this.configuration, services);

    _this.messagesEntity.on('messageAdded', function (message) {
      return _this._onMessageAdded(message);
    });

    _this.messagesEntity.on('messageUpdated', function (args) {
      return _this.emit('messageUpdated', args);
    });

    _this.messagesEntity.on('messageRemoved', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'messageRemoved'));

    return _this;
  }
  /**
   * Fired when a member has joined the channel.
   *
   * Parameters:
   * 1. {@link Member} `member` - member that joined the channel
   * @event
   */


  _createClass__default['default'](Channel, [{
    key: "status",
    get:
    /**
     * Delivery status of the channel.
     */
    function get() {
      return this.channelState.status;
    }
    /**
     * MemberType of the channel.
     */

  }, {
    key: "type",
    get: function get() {
      return this.channelState.type;
    }
    /**
     * Unique name of the channel.
     */

  }, {
    key: "uniqueName",
    get: function get() {
      return this.channelState.uniqueName;
    }
    /**
     * Signifies whether the channel is private.
     */

  }, {
    key: "isPrivate",
    get: function get() {
      return this.channelState.type === 'private';
    }
    /**
     * Name of the channel.
     */

  }, {
    key: "friendlyName",
    get: function get() {
      return this.channelState.friendlyName;
    }
    /**
     * Date this channel was last updated on.
     */

  }, {
    key: "dateUpdated",
    get: function get() {
      return this.channelState.dateUpdated;
    }
    /**
     * Date this channel was created on.
     */

  }, {
    key: "dateCreated",
    get: function get() {
      return this.channelState.dateCreated;
    }
    /**
     * Identity of the user that created this channel.
     */

  }, {
    key: "createdBy",
    get: function get() {
      return this.channelState.createdBy;
    }
    /**
     * Custom attributes of the channel.
     */

  }, {
    key: "attributes",
    get: function get() {
      return this.channelState.attributes;
    }
    /**
     * Index of the last message the user has read in this channel.
     */

  }, {
    key: "lastConsumedMessageIndex",
    get: function get() {
      return this.channelState.lastConsumedMessageIndex;
    }
    /**
     * Last message sent to this channel.
     */

  }, {
    key: "lastMessage",
    get: function get() {
      return this.channelState.lastMessage;
    }
    /**
     * User notification level for this channel.
     */

  }, {
    key: "notificationLevel",
    get: function get() {
      return this.channelState.notificationLevel;
    }
    /**
     * State of the channel.
     */

  }, {
    key: "state",
    get: function get() {
      return this.channelState.state;
    }
    /**
     * Load and subscribe to this channel and do not subscribe to its members and messages.
     * This or _subscribeStreams will need to be called before any events on channel will fire.
     * @internal
     */

  }, {
    key: "_subscribe",
    value: function () {
      var _subscribe2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this2 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.entityPromise) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", this.entityPromise);

              case 2:
                return _context.abrupt("return", this.entityPromise = this.entityPromise || this.services.syncClient.document({
                  id: this.entityName,
                  mode: 'open_existing'
                }).then(function (entity) {
                  _this2.entity = entity;

                  _this2.entity.on('updated', function (args) {
                    _this2._update(args.data);
                  });

                  _this2.entity.on('removed', function () {
                    return _this2.emit('removed', _this2);
                  });

                  _this2._update(_this2.entity.data);

                  return entity;
                }).catch(function (err) {
                  _this2.entity = null;
                  _this2.entityPromise = null;

                  if (_this2.services.syncClient.connectionState != 'disconnected') {
                    log$4.error('Failed to get channel object', err);
                  }

                  log$4.debug('ERROR: Failed to get channel object', err);
                  throw err;
                }));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _subscribe() {
        return _subscribe2.apply(this, arguments);
      }

      return _subscribe;
    }()
    /**
     * Load the attributes of this channel and instantiate its members and messages.
     * This or _subscribe will need to be called before any events on the channel will fire.
     * This will need to be called before any events on members or messages will fire
     * @internal
     */

  }, {
    key: "_subscribeStreams",
    value: function () {
      var _subscribeStreams2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var messagesObjectName, rosterObjectName;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return this._subscribe();

              case 3:
                log$4.trace('_subscribeStreams, this.entity.data=', this.entity.data);
                messagesObjectName = this.entity.data.messages;
                rosterObjectName = this.entity.data.roster;
                _context2.next = 8;
                return Promise.all([this.messagesEntity.subscribe(messagesObjectName), this.membersEntity.subscribe(rosterObjectName)]);

              case 8:
                _context2.next = 15;
                break;

              case 10:
                _context2.prev = 10;
                _context2.t0 = _context2["catch"](0);

                if (this.services.syncClient.connectionState !== 'disconnected') {
                  log$4.error('Failed to subscribe on channel objects', this.sid, _context2.t0);
                }

                log$4.debug('ERROR: Failed to subscribe on channel objects', this.sid, _context2.t0);
                throw _context2.t0;

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 10]]);
      }));

      function _subscribeStreams() {
        return _subscribeStreams2.apply(this, arguments);
      }

      return _subscribeStreams;
    }()
    /**
     * Stop listening for and firing events on this channel.
     * @internal
     */

  }, {
    key: "_unsubscribe",
    value: function () {
      var _unsubscribe2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(this.isPrivate && this.entity)) {
                  _context3.next = 5;
                  break;
                }

                _context3.next = 3;
                return this.entity.close();

              case 3:
                this.entity = null;
                this.entityPromise = null;

              case 5:
                return _context3.abrupt("return", Promise.all([this.membersEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _unsubscribe() {
        return _unsubscribe2.apply(this, arguments);
      }

      return _unsubscribe;
    }()
    /**
     * Set channel status.
     * @internal
     */

  }, {
    key: "_setStatus",
    value: function _setStatus(status, source) {
      var _this3 = this;

      this.statusSource = source;

      if (this.channelState.status === status) {
        return;
      }

      this.channelState.status = status;

      if (status === 'joined') {
        this._subscribeStreams().catch(function (err) {
          log$4.debug('ERROR while setting channel status ' + status, err);

          if (_this3.services.syncClient.connectionState !== 'disconnected') {
            throw err;
          }
        });
      } else if (status === 'invited') {
        this._subscribe().catch(function (err) {
          log$4.debug('ERROR while setting channel status ' + status, err);

          if (_this3.services.syncClient.connectionState !== 'disconnected') {
            throw err;
          }
        });
      } else if (this.entityPromise) {
        this._unsubscribe().catch(function (err) {
          log$4.debug('ERROR while setting channel status ' + status, err);

          if (_this3.services.syncClient.connectionState !== 'disconnected') {
            throw err;
          }
        });
      }
    }
    /**
     * Update source of the channel.
     * @internal
     */

  }, {
    key: "_statusSource",
    value: function _statusSource() {
      return this.statusSource;
    }
  }, {
    key: "_update",
    value:
    /**
     * Update the local channel object with new values.
     * @internal
     */
    function _update(update) {
      var _update$lastMessage, _update$lastMessage2, _this$channelState$la, _this$channelState$la2, _this$channelState$lo;

      log$4.trace('_update', update);
      Channel.preprocessUpdate(update, this.sid);
      var updateReasons = new Set();

      for (var _i = 0, _Object$keys = Object.keys(update); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        var localKey = fieldMappings[key];

        if (!localKey) {
          continue;
        }

        switch (localKey) {
          case fieldMappings.status:
            if (!update.status || update.status === 'unknown' || this.channelState.status === update.status) {
              break;
            }

            this.channelState.status = update.status;
            updateReasons.add(localKey);
            break;

          case fieldMappings.attributes:
            if (isEqual__default['default'](this.channelState.attributes, update.attributes)) {
              break;
            }

            this.channelState.attributes = update.attributes;
            updateReasons.add(localKey);
            break;

          case fieldMappings.lastConsumedMessageIndex:
            if (update.lastConsumedMessageIndex === undefined || update.lastConsumedMessageIndex === this.channelState.lastConsumedMessageIndex) {
              break;
            }

            this.channelState.lastConsumedMessageIndex = update.lastConsumedMessageIndex;
            updateReasons.add(localKey);
            break;

          case fieldMappings.lastMessage:
            if (this.channelState.lastMessage && !update.lastMessage) {
              delete this.channelState.lastMessage;
              updateReasons.add(localKey);
              break;
            }

            this.channelState.lastMessage = this.channelState.lastMessage || {};

            if (((_update$lastMessage = update.lastMessage) === null || _update$lastMessage === void 0 ? void 0 : _update$lastMessage.index) !== undefined && update.lastMessage.index !== this.channelState.lastMessage.index) {
              this.channelState.lastMessage.index = update.lastMessage.index;
              updateReasons.add(localKey);
            }

            if (((_update$lastMessage2 = update.lastMessage) === null || _update$lastMessage2 === void 0 ? void 0 : _update$lastMessage2.timestamp) !== undefined && ((_this$channelState$la = this.channelState.lastMessage) === null || _this$channelState$la === void 0 ? void 0 : (_this$channelState$la2 = _this$channelState$la.dateCreated) === null || _this$channelState$la2 === void 0 ? void 0 : _this$channelState$la2.getTime()) !== update.lastMessage.timestamp.getTime()) {
              this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;
              updateReasons.add(localKey);
            }

            if (isEqual__default['default'](this.channelState.lastMessage, {})) {
              delete this.channelState.lastMessage;
            }

            break;

          case fieldMappings.state:
            var state = update.state || undefined;

            if (state !== undefined) {
              state.dateUpdated = new Date(state.dateUpdated);
            }

            if (isEqual__default['default'](this.channelState.state, state)) {
              break;
            }

            this.channelState.state = state;
            updateReasons.add(localKey);
            break;

          default:
            var isDate = update[key] instanceof Date;
            var keysMatchAsDates = isDate && ((_this$channelState$lo = this.channelState[localKey]) === null || _this$channelState$lo === void 0 ? void 0 : _this$channelState$lo.getTime()) === update[key].getTime();
            var keysMatchAsNonDates = !isDate && this[localKey] === update[key];

            if (keysMatchAsDates || keysMatchAsNonDates) {
              break;
            }

            this.channelState[localKey] = update[key];
            updateReasons.add(localKey);
        }
      }

      if (updateReasons.size > 0) {
        this.emit('updated', {
          channel: this,
          updateReasons: _toConsumableArray__default['default'](updateReasons)
        });
      }
    }
    /**
     * @internal
     */

  }, {
    key: "_onMessageAdded",
    value: function _onMessageAdded(message) {
      var _iterator = _createForOfIteratorHelper$1(this.members.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var member = _step.value;

          if (member.identity === message.author) {
            member._endTyping();

            break;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.emit('messageAdded', message);
    }
  }, {
    key: "_setLastConsumedMessageIndex",
    value: function () {
      var _setLastConsumedMessageIndex2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(index) {
        var result;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.services.commandExecutor.mutateResource('post', "".concat(this.configuration.links.myConversations, "/").concat(this.sid), {
                  last_consumed_message_index: index
                });

              case 2:
                result = _context4.sent;
                return _context4.abrupt("return", result.unread_messages_count);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function _setLastConsumedMessageIndex(_x) {
        return _setLastConsumedMessageIndex2.apply(this, arguments);
      }

      return _setLastConsumedMessageIndex;
    }()
    /**
     * Add a member to the channel by its identity.
     * @param identity Identity of the Client to add.
     */

  }, {
    key: "add",
    value: function () {
      var _add = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(identity) {
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.membersEntity.add(identity);

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function add(_x2) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
    /**
     * Advance the channel's last consumed message index to the current read horizon.
     * Rejects if the user is not a member of the channel.
     * Last consumed message index is updated only if the new index value is higher than the previous.
     * @param index Message index to advance to.
     * @return Resulting unread messages count in the channel.
     */

  }, {
    key: "advanceLastConsumedMessageIndex",
    value: function () {
      var _advanceLastConsumedMessageIndex = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(index) {
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._subscribeStreams();

              case 2:
                if (!(index < this.lastConsumedMessageIndex)) {
                  _context6.next = 6;
                  break;
                }

                _context6.next = 5;
                return this._setLastConsumedMessageIndex(this.lastConsumedMessageIndex);

              case 5:
                return _context6.abrupt("return", _context6.sent);

              case 6:
                _context6.next = 8;
                return this._setLastConsumedMessageIndex(index);

              case 8:
                return _context6.abrupt("return", _context6.sent);

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function advanceLastConsumedMessageIndex(_x3) {
        return _advanceLastConsumedMessageIndex.apply(this, arguments);
      }

      return advanceLastConsumedMessageIndex;
    }()
    /**
     * Decline an invitation to the channel and unsubscribe from its events.
     */

  }, {
    key: "decline",
    value: function () {
      var _decline = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7() {
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.services.commandExecutor.mutateResource('delete', "".concat(this.links.invites, "/").concat(this.configuration.userIdentity));

              case 2:
                return _context7.abrupt("return", this);

              case 3:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function decline() {
        return _decline.apply(this, arguments);
      }

      return decline;
    }()
    /**
     * Delete the channel and unsubscribe from its events.
     */

  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8() {
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.services.commandExecutor.mutateResource('delete', this.links.self);

              case 2:
                return _context8.abrupt("return", this);

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
    /**
     * Get the custom attributes of this Channel.
     *
     * *Note: {@link Channel.attributes} will be empty for public channels until this function is called.*
     */

  }, {
    key: "getAttributes",
    value: function () {
      var _getAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9() {
        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this._subscribe();

              case 2:
                return _context9.abrupt("return", this.attributes);

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getAttributes() {
        return _getAttributes.apply(this, arguments);
      }

      return getAttributes;
    }()
    /**
     * Return messages from the channel using the paginator interface.
     * @param pageSize Number of messages to return in a single chunk. Default is 30.
     * @param anchor Index of the newest message to fetch. Default is from the end.
     * @param direction Query direction. By default it queries backwards
     * from newer to older. The `"forward"` value will query in the opposite direction.
     * @return A page of messages.
     */

  }, {
    key: "getMessages",
    value: function () {
      var _getMessages = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10(pageSize, anchor, direction) {
        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this._subscribeStreams();

              case 2:
                _context10.next = 4;
                return this.messagesEntity.getMessages(pageSize, anchor, direction);

              case 4:
                return _context10.abrupt("return", _context10.sent);

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function getMessages(_x4, _x5, _x6) {
        return _getMessages.apply(this, arguments);
      }

      return getMessages;
    }()
    /**
     * Get a list of all the members who are joined to this channel.
     */

  }, {
    key: "getMembers",
    value: function () {
      var _getMembers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee11() {
        return _regeneratorRuntime__default['default'].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this._subscribeStreams();

              case 2:
                _context11.next = 4;
                return this.membersEntity.getMembers();

              case 4:
                return _context11.abrupt("return", _context11.sent);

              case 5:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function getMembers() {
        return _getMembers.apply(this, arguments);
      }

      return getMembers;
    }()
    /**
     * Get channel members count.
     *
     * This method is semi-realtime. This means that this data will be eventually correct,
     * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not
     * provide real time events for counter values changes.
     *
     * This is useful for any UI badges, but it is not recommended to build any core application
     * logic based on these counters being accurate in real time.
     */

  }, {
    key: "getMembersCount",
    value: function () {
      var _getMembersCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee12() {
        var url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();
                _context12.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context12.sent;
                return _context12.abrupt("return", response.body.participants_count);

              case 5:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function getMembersCount() {
        return _getMembersCount.apply(this, arguments);
      }

      return getMembersCount;
    }()
    /**
     * Get a member by its SID.
     * @param memberSid Member SID.
     */

  }, {
    key: "getMemberBySid",
    value: function () {
      var _getMemberBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee13(memberSid) {
        return _regeneratorRuntime__default['default'].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.membersEntity.getMemberBySid(memberSid);

              case 2:
                return _context13.abrupt("return", _context13.sent);

              case 3:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function getMemberBySid(_x7) {
        return _getMemberBySid.apply(this, arguments);
      }

      return getMemberBySid;
    }()
    /**
     * Get a member by its identity.
     * @param identity Member identity.
     */

  }, {
    key: "getMemberByIdentity",
    value: function () {
      var _getMemberByIdentity = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee14(identity) {
        return _regeneratorRuntime__default['default'].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.membersEntity.getMemberByIdentity(identity);

              case 2:
                return _context14.abrupt("return", _context14.sent);

              case 3:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function getMemberByIdentity(_x8) {
        return _getMemberByIdentity.apply(this, arguments);
      }

      return getMemberByIdentity;
    }()
    /**
     * Get the total message count in the channel.
     *
     * This method is semi-realtime. This means that this data will be eventually correct,
     * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not
     * provide real time events for counter values changes.
     *
     * This is useful for any UI badges, but it is not recommended to build any core application
     * logic based on these counters being accurate in real time.
     */

  }, {
    key: "getMessagesCount",
    value: function () {
      var _getMessagesCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee15() {
        var url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();
                _context15.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context15.sent;
                return _context15.abrupt("return", response.body.messages_count);

              case 5:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function getMessagesCount() {
        return _getMessagesCount.apply(this, arguments);
      }

      return getMessagesCount;
    }()
    /**
     * Get unread messages count for the user if they are a member of this channel.
     * Rejects if the user is not a member of the channel.
     *
     * Use this method to obtain the number of unread messages together with
     * {@link Channel.updateLastConsumedMessageIndex} instead of relying on the
     * message indices which may have gaps. See {@link Message.index} for details.
     *
     * This method is semi-realtime. This means that this data will be eventually correct,
     * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not
     * provide real time events for counter values changes.
     *
     * This is useful for any UI badges, but it is not recommended to build any core application
     * logic based on these counters being accurate in real time.
     */

  }, {
    key: "getUnconsumedMessagesCount",
    value: function () {
      var _getUnconsumedMessagesCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee16() {
        var url, response, unreadMessageCount;
        return _regeneratorRuntime__default['default'].wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                url = new UriBuilder(this.configuration.links.myConversations).path(this.sid).build();
                _context16.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context16.sent;

                if (!(response.body.conversation_sid !== this.sid)) {
                  _context16.next = 6;
                  break;
                }

                throw new Error('Channel was not found in the user channels list');

              case 6:
                unreadMessageCount = response.body.unread_messages_count;

                if (!(typeof unreadMessageCount === 'number')) {
                  _context16.next = 9;
                  break;
                }

                return _context16.abrupt("return", unreadMessageCount);

              case 9:
                return _context16.abrupt("return", null);

              case 10:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function getUnconsumedMessagesCount() {
        return _getUnconsumedMessagesCount.apply(this, arguments);
      }

      return getUnconsumedMessagesCount;
    }()
    /**
     * Invite a user to the channel by their identity.
     * @param identity Identity of the user.
     */

  }, {
    key: "invite",
    value: function () {
      var _invite = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee17(identity) {
        return _regeneratorRuntime__default['default'].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return this.membersEntity.invite(identity);

              case 2:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function invite(_x9) {
        return _invite.apply(this, arguments);
      }

      return invite;
    }()
    /**
     * Join the channel and subscribe to its events.
     */

  }, {
    key: "join",
    value: function () {
      var _join = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee18() {
        return _regeneratorRuntime__default['default'].wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return this.services.commandExecutor.mutateResource('post', this.links.participants, {
                  identity: this.configuration.userIdentity
                });

              case 2:
                return _context18.abrupt("return", this);

              case 3:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function join() {
        return _join.apply(this, arguments);
      }

      return join;
    }()
    /**
     * Leave the channel.
     */

  }, {
    key: "leave",
    value: function () {
      var _leave = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee19() {
        return _regeneratorRuntime__default['default'].wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                if (!(this.channelState.status === 'joined')) {
                  _context19.next = 3;
                  break;
                }

                _context19.next = 3;
                return this.services.commandExecutor.mutateResource('delete', "".concat(this.links.participants, "/").concat(this.configuration.userIdentity));

              case 3:
                return _context19.abrupt("return", this);

              case 4:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function leave() {
        return _leave.apply(this, arguments);
      }

      return leave;
    }()
    /**
     * Remove a member from the channel. When a string is passed as the argument, it will assume that the string is an identity.
     * @param member Identity or the member object to remove.
     */

  }, {
    key: "removeMember",
    value: function () {
      var _removeMember = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee20(member) {
        return _regeneratorRuntime__default['default'].wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _context20.next = 2;
                return this.membersEntity.remove(typeof member === 'string' ? member : member.sid);

              case 2:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function removeMember(_x10) {
        return _removeMember.apply(this, arguments);
      }

      return removeMember;
    }()
    /**
     * Send a message to the channel.
     * @param message Message body for the text message,
     * `FormData` or {@link Channel.MediaOptions) for media content. Sending FormData is supported only with the browser engine.
     * @param messageAttributes Attributes for the message.
     * @return Index of the new message.
     */

  }, {
    key: "sendMessage",
    value: function () {
      var _sendMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee21(message, messageAttributes) {
        var _response, response;

        return _regeneratorRuntime__default['default'].wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                if (!(typeof message === 'string' || message === null)) {
                  _context21.next = 5;
                  break;
                }

                _context21.next = 3;
                return this.messagesEntity.send(message, messageAttributes);

              case 3:
                _response = _context21.sent;
                return _context21.abrupt("return", parseToNumber(_response.index));

              case 5:
                _context21.next = 7;
                return this.messagesEntity.sendMedia(message, messageAttributes);

              case 7:
                response = _context21.sent;
                return _context21.abrupt("return", parseToNumber(response.index));

              case 9:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function sendMessage(_x11, _x12) {
        return _sendMessage.apply(this, arguments);
      }

      return sendMessage;
    }()
    /**
     * Set last consumed message index of the channel to the index of the last known message.
     * @return Resulting unread messages count in the channel.
     */

  }, {
    key: "setAllMessagesConsumed",
    value: function () {
      var _setAllMessagesConsumed = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee22() {
        var messagesPage;
        return _regeneratorRuntime__default['default'].wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return this._subscribeStreams();

              case 2:
                _context22.next = 4;
                return this.getMessages(1);

              case 4:
                messagesPage = _context22.sent;

                if (!(messagesPage.items.length > 0)) {
                  _context22.next = 7;
                  break;
                }

                return _context22.abrupt("return", this.advanceLastConsumedMessageIndex(messagesPage.items[0].index));

              case 7:
                return _context22.abrupt("return", Promise.resolve(0));

              case 8:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function setAllMessagesConsumed() {
        return _setAllMessagesConsumed.apply(this, arguments);
      }

      return setAllMessagesConsumed;
    }()
    /**
     * Set all messages in the channel unread.
     * @return Resulting unread messages count in the channel.
     */

  }, {
    key: "setNoMessagesConsumed",
    value: function () {
      var _setNoMessagesConsumed = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee23() {
        return _regeneratorRuntime__default['default'].wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return this._subscribeStreams();

              case 2:
                _context23.next = 4;
                return this._setLastConsumedMessageIndex(null);

              case 4:
                return _context23.abrupt("return", _context23.sent);

              case 5:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function setNoMessagesConsumed() {
        return _setNoMessagesConsumed.apply(this, arguments);
      }

      return setNoMessagesConsumed;
    }()
    /**
     * Set user notification level for this channel.
     * @param notificationLevel New user notification level.
     */

  }, {
    key: "setUserNotificationLevel",
    value: function () {
      var _setUserNotificationLevel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee24(notificationLevel) {
        return _regeneratorRuntime__default['default'].wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return this.services.commandExecutor.mutateResource('post', "".concat(this.configuration.links.myConversations, "/").concat(this.sid), {
                  notification_level: notificationLevel
                });

              case 2:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function setUserNotificationLevel(_x13) {
        return _setUserNotificationLevel.apply(this, arguments);
      }

      return setUserNotificationLevel;
    }()
    /**
     * Send a notification to the server indicating that this client is currently typing in this channel.
     * Typing ended notification is sent after a while automatically, but by calling this method again you ensure that typing ended is not received.
     */

  }, {
    key: "typing",
    value: function typing() {
      return this.services.typingIndicator.send(this.sid);
    }
    /**
     * Update the attributes of the channel.
     * @param attributes New attributes.
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee25(attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                _context25.next = 2;
                return this.services.commandExecutor.mutateResource('post', this.links.self, {
                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined
                });

              case 2:
                return _context25.abrupt("return", this);

              case 3:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function updateAttributes(_x14) {
        return _updateAttributes.apply(this, arguments);
      }

      return updateAttributes;
    }()
    /**
     * Update the friendly name of the channel.
     * @param friendlyName New friendly name.
     */

  }, {
    key: "updateFriendlyName",
    value: function () {
      var _updateFriendlyName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee26(friendlyName) {
        return _regeneratorRuntime__default['default'].wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                if (!(this.channelState.friendlyName !== friendlyName)) {
                  _context26.next = 3;
                  break;
                }

                _context26.next = 3;
                return this.services.commandExecutor.mutateResource('post', this.links.self, {
                  friendly_name: friendlyName
                });

              case 3:
                return _context26.abrupt("return", this);

              case 4:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function updateFriendlyName(_x15) {
        return _updateFriendlyName.apply(this, arguments);
      }

      return updateFriendlyName;
    }()
    /**
     * Set the last consumed message index to the current read horizon.
     * @param index Message index to set as last consumed.
     * If null is provided, then the behavior is identical to {@link Channel.setNoMessagesConsumed}.
     * @returns Resulting unread messages count in the channel.
     */

  }, {
    key: "updateLastConsumedMessageIndex",
    value: function () {
      var _updateLastConsumedMessageIndex = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee27(index) {
        return _regeneratorRuntime__default['default'].wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                _context27.next = 2;
                return this._subscribeStreams();

              case 2:
                _context27.next = 4;
                return this._setLastConsumedMessageIndex(index);

              case 4:
                return _context27.abrupt("return", _context27.sent);

              case 5:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function updateLastConsumedMessageIndex(_x16) {
        return _updateLastConsumedMessageIndex.apply(this, arguments);
      }

      return updateLastConsumedMessageIndex;
    }()
    /**
     * Update the unique name of the channel.
     * @param uniqueName New unique name for the channel. Setting unique name to null removes it.
     */

  }, {
    key: "updateUniqueName",
    value: function () {
      var _updateUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee28(uniqueName) {
        return _regeneratorRuntime__default['default'].wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                if (!(this.channelState.uniqueName !== uniqueName)) {
                  _context28.next = 4;
                  break;
                }

                if (!uniqueName) {
                  uniqueName = '';
                }

                _context28.next = 4;
                return this.services.commandExecutor.mutateResource('post', this.links.self, {
                  unique_name: uniqueName
                });

              case 4:
                return _context28.abrupt("return", this);

              case 5:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function updateUniqueName(_x17) {
        return _updateUniqueName.apply(this, arguments);
      }

      return updateUniqueName;
    }()
    /**
     * Get user descriptors of this channel.
     */

  }, {
    key: "getUserDescriptors",
    value: function () {
      var _getUserDescriptors = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee29() {
        return _regeneratorRuntime__default['default'].wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                _context29.next = 2;
                return this.services.users.getChannelUserDescriptors(this.sid);

              case 2:
                return _context29.abrupt("return", _context29.sent);

              case 3:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function getUserDescriptors() {
        return _getUserDescriptors.apply(this, arguments);
      }

      return getUserDescriptors;
    }()
  }], [{
    key: "preprocessUpdate",
    value: function preprocessUpdate(update, channelSid) {
      try {
        if (typeof update.attributes === 'string') {
          update.attributes = JSON.parse(update.attributes);
        } else if (update.attributes) {
          JSON.stringify(update.attributes);
        }
      } catch (e) {
        log$4.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);
        update.attributes = {};
      }

      try {
        if (update.dateCreated) {
          update.dateCreated = new Date(update.dateCreated);
        }
      } catch (e) {
        log$4.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);
        delete update.dateCreated;
      }

      try {
        if (update.dateUpdated) {
          update.dateUpdated = new Date(update.dateUpdated);
        }
      } catch (e) {
        log$4.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);
        delete update.dateUpdated;
      }

      try {
        if (update.lastMessage && update.lastMessage.timestamp) {
          update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);
        }
      } catch (e) {
        log$4.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);
        delete update.lastMessage.timestamp;
      }
    }
  }]);

  return Channel;
}(replayEventEmitter.ReplayEventEmitter);

_defineProperty__default['default'](Channel, "memberJoined", 'memberJoined');

_defineProperty__default['default'](Channel, "memberLeft", 'memberLeft');

_defineProperty__default['default'](Channel, "memberUpdated", 'memberUpdated');

_defineProperty__default['default'](Channel, "messageAdded", 'messageAdded');

_defineProperty__default['default'](Channel, "messageRemoved", 'messageRemoved');

_defineProperty__default['default'](Channel, "messageUpdated", 'messageUpdated');

_defineProperty__default['default'](Channel, "typingEnded", 'typingEnded');

_defineProperty__default['default'](Channel, "typingStarted", 'typingStarted');

_defineProperty__default['default'](Channel, "updated", 'updated');

_defineProperty__default['default'](Channel, "removed", 'removed');

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Channel.prototype, "add", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonNegativeInteger), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], Channel.prototype, "advanceLastConsumedMessageIndex", null);

__decorate([declarativeTypeValidator.validateTypesAsync(['undefined', declarativeTypeValidator.nonNegativeInteger], ['undefined', declarativeTypeValidator.nonNegativeInteger], ['undefined', declarativeTypeValidator.literal('backwards', 'forward')]), __metadata("design:type", Function), __metadata("design:paramtypes", [Number, Number, String]), __metadata("design:returntype", Promise)], Channel.prototype, "getMessages", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Channel.prototype, "getMemberBySid", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Channel.prototype, "getMemberByIdentity", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Channel.prototype, "invite", null);

__decorate([declarativeTypeValidator.validateTypesAsync([declarativeTypeValidator.nonEmptyString, Member]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Channel.prototype, "removeMember", null);

__decorate([declarativeTypeValidator.validateTypesAsync(['string', declarativeTypeValidator.literal(null), // Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.
declarativeTypeValidator.custom(function (value) {
  return [value instanceof FormData, 'an instance of FormData'];
}), declarativeTypeValidator.objectSchema('media options', {
  contentType: [declarativeTypeValidator.nonEmptyString, 'undefined'],
  media: declarativeTypeValidator.custom(function (value) {
    var isValid = typeof value === 'string' && value.length > 0 || value instanceof Uint8Array || value instanceof ArrayBuffer;

    if (typeof Blob === 'function') {
      isValid = isValid || value instanceof Blob;
    }

    return [isValid, 'a non-empty string, an instance of Buffer or an instance of Blob'];
  })
})], ['undefined', 'string', 'number', 'boolean', 'object', declarativeTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object]), __metadata("design:returntype", Promise)], Channel.prototype, "sendMessage", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.literal('default', 'muted')), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Channel.prototype, "setUserNotificationLevel", null);

__decorate([declarativeTypeValidator.validateTypesAsync(['string', 'number', 'boolean', 'object', declarativeTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Channel.prototype, "updateAttributes", null);

__decorate([declarativeTypeValidator.validateTypesAsync('string'), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Channel.prototype, "updateFriendlyName", null);

__decorate([declarativeTypeValidator.validateTypesAsync([declarativeTypeValidator.literal(null), declarativeTypeValidator.nonNegativeInteger]), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], Channel.prototype, "updateLastConsumedMessageIndex", null);

__decorate([declarativeTypeValidator.validateTypesAsync(['string', declarativeTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Channel.prototype, "updateUniqueName", null);

var Deferred = /*#__PURE__*/function () {
  function Deferred() {
    var _this = this;

    _classCallCheck__default['default'](this, Deferred);

    this._promise = new Promise(function (resolve, reject) {
      _this._resolve = resolve;
      _this._reject = reject;
    });
  }

  _createClass__default['default'](Deferred, [{
    key: "promise",
    get: function get() {
      return this._promise;
    }
  }, {
    key: "update",
    value: function update(value) {
      this._resolve(value);
    }
  }, {
    key: "set",
    value: function set(value) {
      this.current = value;

      this._resolve(value);
    }
  }, {
    key: "fail",
    value: function fail(e) {
      this._reject(e);
    }
  }]);

  return Deferred;
}();

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$3 = Logger.scope('Channels');
/**
 * Represents channels collection
 * {@see Channel}
 */

var Channels = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Channels, _ReplayEventEmitter);

  var _super = _createSuper$2(Channels);

  function Channels(configuration, services) {
    var _this;

    _classCallCheck__default['default'](this, Channels);

    _this = _super.call(this);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "channels", new Map());

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "tombstones", new Set());

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "myChannelsFetched", false);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "myChannelsRead", new Deferred());

    _this.configuration = configuration;
    _this.services = services;
    return _this;
  }

  _createClass__default['default'](Channels, [{
    key: "getMap",
    value: function () {
      var _getMap = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.services.syncClient.map({
                  id: this.configuration.myConversations,
                  mode: 'open_existing'
                });

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getMap() {
        return _getMap.apply(this, arguments);
      }

      return getMap;
    }()
    /**
     * Add channel to server
     * @private
     * @returns {Promise<Channel>} Channel
     */

  }, {
    key: "addChannel",
    value: function () {
      var _addChannel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(options) {
        var attributes, response, channelSid, channelDocument, links, existingChannel, channel;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (typeof options.attributes === 'undefined') {
                  attributes = {};
                } else {
                  attributes = options.attributes;
                }

                _context2.next = 3;
                return this.services.commandExecutor.mutateResource('post', this.configuration.links.conversations, {
                  type: options.isPrivate ? 'private' : 'public',
                  unique_name: options.uniqueName,
                  friendly_name: options.friendlyName,
                  attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined
                });

              case 3:
                response = _context2.sent;
                channelSid = response.sid || null;
                channelDocument = response.sync_objects.conversation || null;
                links = _objectSpread$3({
                  self: response.url
                }, response.links);
                existingChannel = this.channels.get(channelSid);

                if (!existingChannel) {
                  _context2.next = 12;
                  break;
                }

                _context2.next = 11;
                return existingChannel._subscribe();

              case 11:
                return _context2.abrupt("return", existingChannel);

              case 12:
                channel = new Channel({
                  channel: channelDocument,
                  entityName: null,
                  uniqueName: null,
                  attributes: null,
                  createdBy: null,
                  friendlyName: null,
                  lastConsumedMessageIndex: null,
                  type: options.isPrivate ? 'private' : 'public',
                  dateCreated: null,
                  dateUpdated: null
                }, channelSid, links, this.configuration, this.services);
                this.channels.set(channel.sid, channel);
                this.registerForEvents(channel);
                _context2.next = 17;
                return channel._subscribe();

              case 17:
                this.emit('channelAdded', channel);
                return _context2.abrupt("return", channel);

              case 19:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function addChannel(_x) {
        return _addChannel.apply(this, arguments);
      }

      return addChannel;
    }()
    /**
     * Fetch channels list and instantiate all necessary objects
     */

  }, {
    key: "fetchChannels",
    value: function () {
      var _fetchChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        var _this2 = this;

        var map, myChannels, upserts, _iterator, _step, channel, errorMessage;

        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.next = 3;
                return this.getMap();

              case 3:
                map = _context3.sent;
                map.on('itemAdded', function (args) {
                  log$3.debug("itemAdded: ".concat(args.item.key));

                  _this2.upsertChannel('sync', args.item.key, args.item.data);
                });
                map.on('itemRemoved', function (args) {
                  log$3.debug("itemRemoved: ".concat(args.key));
                  var sid = args.key;

                  if (!_this2.myChannelsFetched) {
                    _this2.tombstones.add(sid);
                  }

                  var channel = _this2.channels.get(sid);

                  if (!channel) {
                    return;
                  }

                  if (channel.status === 'joined' || channel.status === 'invited') {
                    channel._setStatus('notParticipating', 'sync');

                    _this2.emit('channelLeft', channel);
                  }

                  if (channel.isPrivate) {
                    _this2.channels.delete(sid);

                    _this2.emit('channelRemoved', channel);

                    channel.emit('removed', channel);
                  }
                });
                map.on('itemUpdated', function (args) {
                  log$3.debug("itemUpdated: ".concat(args.item.key));

                  _this2.upsertChannel('sync', args.item.key, args.item.data);
                });
                _context3.next = 9;
                return this._fetchMyChannels();

              case 9:
                myChannels = _context3.sent;
                upserts = [];
                _iterator = _createForOfIteratorHelper(myChannels);

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    channel = _step.value;
                    upserts.push(this.upsertChannel('rest', channel.channel_sid, channel));
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                this.myChannelsRead.set(true);
                _context3.next = 16;
                return Promise.all(upserts);

              case 16:
                this.myChannelsFetched = true;
                this.tombstones.clear();
                log$3.debug('The channels list has been successfully fetched');
                return _context3.abrupt("return", this);

              case 22:
                _context3.prev = 22;
                _context3.t0 = _context3["catch"](0);
                errorMessage = 'Failed to fetch the channels list';

                if (this.services.syncClient.connectionState !== 'disconnected') {
                  log$3.error(errorMessage, _context3.t0);
                }

                log$3.debug("ERROR: ".concat(errorMessage), _context3.t0);
                throw _context3.t0;

              case 28:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[0, 22]]);
      }));

      function fetchChannels() {
        return _fetchChannels.apply(this, arguments);
      }

      return fetchChannels;
    }()
  }, {
    key: "_wrapPaginator",
    value: function () {
      var _wrapPaginator2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(page, op) {
        var _this3 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", op(page.items).then(function (items) {
                  return {
                    items: items,
                    hasNextPage: page.hasNextPage,
                    hasPrevPage: page.hasPrevPage,
                    nextPage: function nextPage() {
                      return page.nextPage().then(function (x) {
                        return _this3._wrapPaginator(x, op);
                      });
                    },
                    prevPage: function prevPage() {
                      return page.prevPage().then(function (x) {
                        return _this3._wrapPaginator(x, op);
                      });
                    }
                  };
                }));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function _wrapPaginator(_x2, _x3) {
        return _wrapPaginator2.apply(this, arguments);
      }

      return _wrapPaginator;
    }()
  }, {
    key: "getChannels",
    value: function () {
      var _getChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(args) {
        var _this4 = this;

        var channelsMap, page;
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.getMap();

              case 2:
                channelsMap = _context5.sent;
                _context5.next = 5;
                return channelsMap.getItems(args);

              case 5:
                page = _context5.sent;
                return _context5.abrupt("return", this._wrapPaginator(page, function (items) {
                  return Promise.all(items.map(function (item) {
                    return _this4.upsertChannel('sync', item.key, item.data);
                  }));
                }));

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getChannels(_x4) {
        return _getChannels.apply(this, arguments);
      }

      return getChannels;
    }()
  }, {
    key: "getChannel",
    value: function () {
      var _getChannel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(sid) {
        var _this5 = this;

        var channelsMap, page, items;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.getMap();

              case 2:
                channelsMap = _context6.sent;
                _context6.next = 5;
                return channelsMap.getItems({
                  key: sid
                });

              case 5:
                page = _context6.sent;
                items = page.items.map(function (item) {
                  return _this5.upsertChannel('sync', item.key, item.data);
                });
                return _context6.abrupt("return", items.length > 0 ? items[0] : null);

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getChannel(_x5) {
        return _getChannel.apply(this, arguments);
      }

      return getChannel;
    }()
  }, {
    key: "pushChannel",
    value: function () {
      var _pushChannel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(descriptor) {
        var sid, data;
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                sid = descriptor.sid;
                data = {
                  entityName: null,
                  lastConsumedMessageIndex: descriptor.lastConsumedMessageIndex,
                  type: descriptor.type,
                  status: descriptor.status,
                  friendlyName: descriptor.friendlyName,
                  dateUpdated: descriptor.dateUpdated,
                  dateCreated: descriptor.dateCreated,
                  uniqueName: descriptor.uniqueName,
                  createdBy: descriptor.createdBy,
                  attributes: descriptor.attributes,
                  channel: descriptor instanceof ChannelDescriptor ? descriptor.channel : null,
                  notificationLevel: descriptor.notificationLevel,
                  sid: sid
                };
                _context7.next = 4;
                return this.upsertChannel('chat', sid, data);

              case 4:
                return _context7.abrupt("return", _context7.sent);

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function pushChannel(_x6) {
        return _pushChannel.apply(this, arguments);
      }

      return pushChannel;
    }()
  }, {
    key: "_updateChannel",
    value: function _updateChannel(source, channel, data) {
      var _this6 = this;

      var areSourcesDifferent = channel._statusSource() !== undefined && source !== channel._statusSource();

      var isChannelSourceSync = source !== 'rest' || channel._statusSource() === 'sync';

      if (areSourcesDifferent && isChannelSourceSync && source !== 'sync') {
        log$3.trace('upsertChannel: the channel is known from sync and it came from chat, ignoring', {
          sid: channel.sid,
          data: data.status,
          channel: channel.status
        });
        return;
      }

      if (['joined', 'invited'].includes(data.status) && channel.status !== data.status) {
        channel._setStatus(data.status, source);

        var updateData = {};

        if (data.notificationLevel !== undefined) {
          updateData.notificationLevel = data.notificationLevel;
        }

        if (data.lastConsumedMessageIndex !== undefined) {
          updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;
        }

        if (!isEqual__default['default'](updateData, {})) {
          channel._update(updateData);
        }

        channel._subscribe().then(function () {
          _this6.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', channel);
        });

        return;
      }

      if (['joined', 'invited'].includes(channel.status) && data.status === 'notParticipating') {
        channel._setStatus('notParticipating', source);

        channel._update(data);

        channel._subscribe().then(function () {
          _this6.emit('channelLeft', channel);
        });

        return;
      }

      if (data.type === 'private' && data.status === 'notParticipating') {
        channel._subscribe();

        return;
      }

      channel._update(data);
    }
  }, {
    key: "upsertChannel",
    value: function () {
      var _upsertChannel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(source, sid, data) {
        var channel, baseLink, links, newChannel;
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                log$3.trace("upsertChannel called for ".concat(sid), data);
                channel = this.channels.get(sid); // If the channel is known, update it

                if (!channel) {
                  _context8.next = 8;
                  break;
                }

                log$3.trace("upsertChannel: the channel ".concat(channel.sid, " is known;") + "its status is known from source ".concat(channel._statusSource(), " ") + "and the update came from source ".concat(source), channel);

                this._updateChannel(source, channel, data);

                _context8.next = 7;
                return channel._subscribe();

              case 7:
                return _context8.abrupt("return", channel);

              case 8:
                if (!(['chat', 'rest'].includes(source) && this.tombstones.has(sid))) {
                  _context8.next = 11;
                  break;
                }

                log$3.trace('upsertChannel: the channel is deleted but reappeared again from chat, ignoring', sid);
                return _context8.abrupt("return", null);

              case 11:
                // If the channel is unknown, fetch it
                log$3.trace("upsertChannel: creating a local channel object with sid ".concat(sid), data);
                baseLink = "".concat(this.configuration.links.conversations, "/").concat(sid);
                links = {
                  self: baseLink,
                  messages: "".concat(baseLink, "/Messages"),
                  participants: "".concat(baseLink, "/Participants"),
                  invites: "".concat(baseLink, "/Invites")
                };
                newChannel = new Channel(data, sid, links, this.configuration, this.services);
                this.channels.set(sid, newChannel);
                _context8.next = 18;
                return newChannel._subscribe();

              case 18:
                this.registerForEvents(newChannel);
                this.emit('channelAdded', newChannel);

                if (['joined', 'invited'].includes(data.status)) {
                  newChannel._setStatus(data.status, source);

                  this.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', newChannel);
                }

                return _context8.abrupt("return", newChannel);

              case 22:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function upsertChannel(_x7, _x8, _x9) {
        return _upsertChannel.apply(this, arguments);
      }

      return upsertChannel;
    }()
  }, {
    key: "onChannelRemoved",
    value: function onChannelRemoved(sid) {
      var channel = this.channels.get(sid);

      if (channel) {
        this.channels.delete(sid);
        this.emit('channelRemoved', channel);
      }
    }
  }, {
    key: "registerForEvents",
    value: function registerForEvents(channel) {
      var _this7 = this;

      channel.on('removed', function () {
        return _this7.onChannelRemoved(channel.sid);
      });
      channel.on('updated', function (args) {
        return _this7.emit('channelUpdated', args);
      });
      channel.on('memberJoined', this.emit.bind(this, 'memberJoined'));
      channel.on('memberLeft', this.emit.bind(this, 'memberLeft'));
      channel.on('memberUpdated', function (args) {
        return _this7.emit('memberUpdated', args);
      });
      channel.on('messageAdded', this.emit.bind(this, 'messageAdded'));
      channel.on('messageUpdated', function (args) {
        return _this7.emit('messageUpdated', args);
      });
      channel.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));
      channel.on('typingStarted', this.emit.bind(this, 'typingStarted'));
      channel.on('typingEnded', this.emit.bind(this, 'typingEnded'));
    }
  }, {
    key: "_fetchMyChannels",
    value: function () {
      var _fetchMyChannels2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9() {
        var channels, pageToken, url, response, preProcessedChannels;
        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                channels = [];
                pageToken = null;

              case 2:
                url = new UriBuilder(this.configuration.links.myConversations);

                if (pageToken) {
                  url.arg('PageToken', pageToken);
                }

                _context9.next = 6;
                return this.services.network.get(url.build());

              case 6:
                response = _context9.sent;
                preProcessedChannels = response.body.conversations.map(function (channelDescriptor) {
                  return {
                    descriptor: channelDescriptor,
                    channel_sid: channelDescriptor.conversation_sid,
                    status: channelDescriptor.status,
                    channel: channelDescriptor.sync_objects.conversation,
                    messages: channelDescriptor.sync_objects.messages,
                    roster: "".concat(channelDescriptor.conversation_sid, ".roster"),
                    lastConsumedMessageIndex: channelDescriptor.last_consumed_message_index,
                    notificationLevel: channelDescriptor.notification_level
                  };
                });
                pageToken = response.body.meta.next_token;
                channels = [].concat(_toConsumableArray__default['default'](channels), _toConsumableArray__default['default'](preProcessedChannels));

              case 10:
                if (pageToken) {
                  _context9.next = 2;
                  break;
                }

              case 11:
                return _context9.abrupt("return", channels);

              case 12:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function _fetchMyChannels() {
        return _fetchMyChannels2.apply(this, arguments);
      }

      return _fetchMyChannels;
    }()
  }]);

  return Channels;
}(replayEventEmitter.ReplayEventEmitter);

var log$2 = Logger.scope('UserDescriptor');
/**
 * Contains extended user information.
 */

var UserDescriptor = /*#__PURE__*/function () {
  /**
   * User identity.
   */

  /**
   * Friendly name of the user, null if not set.
   */

  /**
   * Custom attributes of the user.
   */

  /**
   * Status of the real-time conversation connection of the user.
   *
   * Works only when the reachability functionality is enabled.
   * Refer to {@link Client.reachabilityEnabled}.
   */

  /**
   * User push notification registration status.
   *
   * Works only when the reachability functionality is enabled.
   * Refer to {@link Client.reachabilityEnabled}.
   */

  /**
   * @internal
   */
  function UserDescriptor(services, descriptor) {
    _classCallCheck__default['default'](this, UserDescriptor);

    this.services = services;
    this.descriptor = descriptor;
    this.identity = descriptor.identity;
    this.friendlyName = descriptor.friendly_name;
    this.attributes = parseAttributes(descriptor.attributes, 'Failed to parse user attributes', log$2);
    this.online = descriptor.is_online;
    this.notifiable = descriptor.is_notifiable;
  }
  /**
   * Get the user object from the descriptor and subscribe to it.
   */


  _createClass__default['default'](UserDescriptor, [{
    key: "subscribe",
    value: function subscribe() {
      return this.services.users.getUser(this.identity, this.descriptor.sync_unique_name);
    }
  }, {
    key: "_getDescriptor",
    value: function _getDescriptor() {
      return this.descriptor;
    }
  }]);

  return UserDescriptor;
}();

var UserDescriptors = /*#__PURE__*/function () {
  function UserDescriptors(configuration, services) {
    _classCallCheck__default['default'](this, UserDescriptors);

    this.configuration = configuration;
    this.services = services;
  }

  _createClass__default['default'](UserDescriptors, [{
    key: "getUserDescriptor",
    value: function () {
      var _getUserDescriptor = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(identity) {
        var url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                url = new UriBuilder(this.configuration.links.users).path(identity).build();
                _context.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context.sent;
                return _context.abrupt("return", new UserDescriptor(this.services, response.body));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getUserDescriptor(_x) {
        return _getUserDescriptor.apply(this, arguments);
      }

      return getUserDescriptor;
    }()
  }, {
    key: "getChannelUserDescriptors",
    value: function () {
      var _getChannelUserDescriptors = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(channelSid) {
        var _this = this;

        var args,
            url,
            response,
            _args2 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                args = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                url = new UriBuilder(this.configuration.links.users).arg('ConversationSid', channelSid).arg('PageToken', args.pageToken).build();
                _context2.next = 4;
                return this.services.network.get(url);

              case 4:
                response = _context2.sent;
                return _context2.abrupt("return", new RestPaginator(response.body.users.map(function (x) {
                  return new UserDescriptor(_this.services, x);
                }), function (pageToken) {
                  return _this.getChannelUserDescriptors(channelSid, {
                    pageToken: pageToken
                  });
                }, response.body.meta.prev_token, response.body.meta.next_token));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getChannelUserDescriptors(_x2) {
        return _getChannelUserDescriptors.apply(this, arguments);
      }

      return getChannelUserDescriptors;
    }()
  }]);

  return UserDescriptors;
}();

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/**
 * @classdesc Container for known users
 * @fires Users#userUpdated
 */

var Users = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Users, _ReplayEventEmitter);

  var _super = _createSuper$1(Users);

  function Users(myself, configuration, services) {
    var _this;

    _classCallCheck__default['default'](this, Users);

    _this = _super.call(this);
    _this.configuration = configuration;
    _this.services = services;
    _this.fifoStack = [];
    _this.myself = myself;

    _this.myself.on('updated', function (args) {
      return _this.emit('userUpdated', args);
    });

    _this.myself.on('userSubscribed', function () {
      return _this.emit('userSubscribed', _this.myself);
    });

    _this.myself.on('userUnsubscribed', function () {
      _this.emit('userUnsubscribed', _this.myself);

      _this.myself._ensureFetched();
    });

    _this.subscribedUsers = new Map();
    _this.userDescriptors = new UserDescriptors(_this.configuration, _objectSpread$2(_objectSpread$2({}, _this.services), {}, {
      users: _assertThisInitialized__default['default'](_this)
    }));
    return _this;
  }

  _createClass__default['default'](Users, [{
    key: "handleUnsubscribeUser",
    value: function handleUnsubscribeUser(user) {
      if (this.subscribedUsers.has(user.identity)) {
        this.subscribedUsers.delete(user.identity);
      }

      var foundItemIndex = -1;
      var foundItem = this.fifoStack.find(function (item, index) {
        if (item == user.identity) {
          foundItemIndex = index;
          return true;
        }

        return false;
      });

      if (foundItem) {
        this.fifoStack.splice(foundItemIndex, 1);
      }

      this.emit('userUnsubscribed', user);
    }
  }, {
    key: "handleSubscribeUser",
    value: function handleSubscribeUser(user) {
      if (this.subscribedUsers.has(user.identity)) {
        return;
      }

      if (this.fifoStack.length >= this.configuration.userInfosToSubscribe) {
        this.subscribedUsers.get(this.fifoStack.shift()).unsubscribe();
      }

      this.fifoStack.push(user.identity);
      this.subscribedUsers.set(user.identity, user);
      this.emit('userSubscribed', user);
    }
    /**
     * Gets user, if it's in subscribed list - then return the user object from it,
     * if not - then subscribes and adds user to the FIFO stack
     * @returns {Promise<User>} Fully initialized user
     */

  }, {
    key: "getUser",
    value: function () {
      var _getUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(identity) {
        var _this2 = this;

        var entityName,
            user,
            userDescriptor,
            _args = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                entityName = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                _context.next = 3;
                return this.myself._ensureFetched();

              case 3:
                if (!(identity == this.myself.identity)) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return", this.myself);

              case 5:
                user = this.subscribedUsers.get(identity);

                if (user) {
                  _context.next = 18;
                  break;
                }

                if (entityName) {
                  _context.next = 12;
                  break;
                }

                _context.next = 10;
                return this.getUserDescriptor(identity);

              case 10:
                userDescriptor = _context.sent;
                entityName = userDescriptor._getDescriptor().sync_objects.user_info_map;

              case 12:
                user = new User(identity, entityName, this.configuration, this.services);
                user.on('updated', function (args) {
                  return _this2.emit('userUpdated', args);
                });
                user.on('userSubscribed', function () {
                  return _this2.handleSubscribeUser(user);
                });
                user.on('userUnsubscribed', function () {
                  return _this2.handleUnsubscribeUser(user);
                });
                _context.next = 18;
                return user._ensureFetched();

              case 18:
                return _context.abrupt("return", user);

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getUser(_x) {
        return _getUser.apply(this, arguments);
      }

      return getUser;
    }()
    /**
     * @returns {Promise<UserDescriptor>} User descriptor
     */

  }, {
    key: "getUserDescriptor",
    value: function () {
      var _getUserDescriptor = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(identity) {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.userDescriptors.getUserDescriptor(identity));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getUserDescriptor(_x2) {
        return _getUserDescriptor.apply(this, arguments);
      }

      return getUserDescriptor;
    }()
    /**
     * @returns {Promise<Paginator<UserDescriptor>>} Users descriptors page for given channel sid
     */

  }, {
    key: "getChannelUserDescriptors",
    value: function () {
      var _getChannelUserDescriptors = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(channelSid) {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.userDescriptors.getChannelUserDescriptors(channelSid));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getChannelUserDescriptors(_x3) {
        return _getChannelUserDescriptors.apply(this, arguments);
      }

      return getChannelUserDescriptors;
    }()
    /**
     * @returns {Promise<Array<User>>} returns list of subscribed User objects {@see User}
     */

  }, {
    key: "getSubscribedUsers",
    value: function () {
      var _getSubscribedUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
        var users;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.myself._ensureFetched();

              case 2:
                users = [this.myself];
                this.subscribedUsers.forEach(function (user) {
                  return users.push(user);
                });
                return _context4.abrupt("return", users);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getSubscribedUsers() {
        return _getSubscribedUsers.apply(this, arguments);
      }

      return getSubscribedUsers;
    }()
  }]);

  return Users;
}(replayEventEmitter.ReplayEventEmitter);

var log$1 = Logger.scope('TypingIndicator');
/**
 * An important note in regards to typing timeout timers. There are two places that the SDK can get the "typing_timeout" attribute from. The first
 * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the
 * "typing_timeout" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a
 * notification of type "twilio.ipmsg.typing_indicator". In this case, the "typing_timeout" value will be +1 of that in the console. This
 * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,
 * the timeout returned from the notification should be used as the timeout for the "typingEnded" event, +1 is to account for latency.
 *
 * @private
 */

/**
 * @class TypingIndicator
 *
 * @constructor
 * @private
 */

var TypingIndicator = /*#__PURE__*/function () {
  function TypingIndicator(getChannel, configuration, services) {
    _classCallCheck__default['default'](this, TypingIndicator);

    this.getChannel = getChannel;
    this.configuration = configuration;
    this.services = services;
    this.serviceTypingTimeout = null;
    this.sentUpdates = new Map();
  }

  _createClass__default['default'](TypingIndicator, [{
    key: "typingTimeout",
    get: function get() {
      return this.configuration.typingIndicatorTimeoutOverride || this.serviceTypingTimeout || this.configuration.typingIndicatorTimeoutDefault;
    }
    /**
     * Initialize TypingIndicator controller
     * Registers for needed message types and sets listeners
     * @private
     */

  }, {
    key: "initialize",
    value: function initialize() {
      var _this = this;

      this.services.notificationClient.on('message', function (type, message) {
        if (type === NotificationTypes.TYPING_INDICATOR) {
          _this._handleRemoteTyping(message);
        }
      });
    }
    /**
     * Remote members typing events handler
     * @private
     */

  }, {
    key: "_handleRemoteTyping",
    value: function () {
      var _handleRemoteTyping2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(message) {
        var _this2 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                log$1.trace('Got new typing indicator ', message);
                this.getChannel(message.channel_sid).then(function (channel) {
                  if (!channel) {
                    return;
                  }

                  channel.members.forEach(function (member) {
                    if (member.identity !== message.identity) {
                      return;
                    }

                    var timeout = _this2.configuration.typingIndicatorTimeoutOverride + 1000 || message.typing_timeout * 1000;

                    member._startTyping(timeout);
                  });
                }).catch(function (err) {
                  log$1.error(err);
                  throw err;
                });

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _handleRemoteTyping(_x) {
        return _handleRemoteTyping2.apply(this, arguments);
      }

      return _handleRemoteTyping;
    }()
    /**
     * Send typing event for the given channel sid
     * @param {String} channelSid
     */

  }, {
    key: "send",
    value: function () {
      var _send2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(channelSid) {
        var lastUpdate;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                lastUpdate = this.sentUpdates.get(channelSid);

                if (!(lastUpdate && lastUpdate > Date.now() - this.typingTimeout)) {
                  _context2.next = 3;
                  break;
                }

                return _context2.abrupt("return", Promise.resolve());

              case 3:
                this.sentUpdates.set(channelSid, Date.now());
                return _context2.abrupt("return", this._send(channelSid));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function send(_x2) {
        return _send2.apply(this, arguments);
      }

      return send;
    }()
  }, {
    key: "_send",
    value: function () {
      var _send3 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(channelSid) {
        var _this3 = this;

        var url, headers, body;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                log$1.trace('Sending typing indicator');
                url = this.configuration.links.typing;
                headers = {
                  'Content-Type': 'application/x-www-form-urlencoded'
                };
                body = 'ChannelSid=' + channelSid;
                return _context3.abrupt("return", this.services.transport.post(url, headers, body, this.configuration.productId).then(function (response) {
                  if (response.body.hasOwnProperty('typing_timeout')) {
                    _this3.serviceTypingTimeout = response.body.typing_timeout * 1000;
                  }
                }).catch(function (err) {
                  log$1.error('Failed to send typing indicator:', err);
                  throw err;
                }));

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _send(_x3) {
        return _send3.apply(this, arguments);
      }

      return _send;
    }()
  }]);

  return TypingIndicator;
}();

/**
 * Users channels collection
 * It's a cassandra-backed pull-based collection
 */

var UserChannels = /*#__PURE__*/function () {
  function UserChannels(client, services, url) {
    _classCallCheck__default['default'](this, UserChannels);

    this.client = client;
    this.services = services;
    this.url = url;
  }

  _createClass__default['default'](UserChannels, [{
    key: "getChannels",
    value: function () {
      var _getChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this = this;

        var args,
            url,
            response,
            _args = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                args = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
                url = new UriBuilder(this.url).arg('PageToken', args.pageToken).build();
                _context.next = 4;
                return this.services.network.get(url);

              case 4:
                response = _context.sent;
                return _context.abrupt("return", new RestPaginator(response.body.conversations.map(function (x) {
                  return new ChannelDescriptor(_this.client, x);
                }), function (pageToken) {
                  return _this.getChannels({
                    pageToken: pageToken
                  });
                }, response.body.meta.previous_token, response.body.meta.next_token));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getChannels() {
        return _getChannels.apply(this, arguments);
      }

      return getChannels;
    }()
  }]);

  return UserChannels;
}();

/**
 * Push notification for a Conversations client.
 */
var PushNotification =
/**
 * Title of the notification.
 */

/**
 * Text of the notification.
 */

/**
 * Sound of the notification.
 */

/**
 * Number of the badge.
 */

/**
 * Notification action (`click_action` in FCM/GCM terms and `category` in APN terms).
 */

/**
 * Type of the notification.
 */

/**
 * Additional data of the conversation.
 */

/**
 * @internal
 */
function PushNotification(data) {
  _classCallCheck__default['default'](this, PushNotification);

  this.title = data.title || null;
  this.body = data.body || null;
  this.sound = data.sound || null;
  this.badge = data.badge || null;
  this.action = data.action || null;
  this.type = data.type || null;
  this.data = data.data || {};
};

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var trimSlashes = function trimSlashes(url) {
  return url.replace(/(^\/+|\/+$)/g, '');
};

var isMutationConflictResponse = function isMutationConflictResponse(response) {
  return response.status.code === 202;
};

var CommandExecutor = /*#__PURE__*/function () {
  function CommandExecutor(_serviceUrl, _services, _productId) {
    _classCallCheck__default['default'](this, CommandExecutor);

    this._serviceUrl = _serviceUrl;
    this._services = _services;
    this._productId = _productId;
  }

  _createClass__default['default'](CommandExecutor, [{
    key: "_preProcessUrl",
    value: function _preProcessUrl(url) {
      var trimmedUrl = trimSlashes(url);

      if (/^https?:\/\//.test(url)) {
        return trimmedUrl;
      }

      return "".concat(trimSlashes(this._serviceUrl), "/").concat(trimmedUrl);
    }
  }, {
    key: "_makeRequest",
    value: function () {
      var _makeRequest2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(method, url, requestBody, headers) {
        var preProcessedUrl, finalHeaders, response, getUrl;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                preProcessedUrl = this._preProcessUrl(url);
                finalHeaders = _objectSpread$1({
                  'Content-Type': 'application/json; charset=utf-8'
                }, headers || {});
                _context.t0 = method;
                _context.next = _context.t0 === 'get' ? 5 : _context.t0 === 'post' ? 11 : _context.t0 === 'delete' ? 15 : 19;
                break;

              case 5:
                getUrl = preProcessedUrl;

                if (requestBody) {
                  getUrl += '?' + Object.entries(requestBody).map(function (entry) {
                    return entry.map(encodeURIComponent).join('=');
                  }).join('&');
                }

                _context.next = 9;
                return this._services.transport.get(getUrl, finalHeaders, this._productId);

              case 9:
                response = _context.sent;
                return _context.abrupt("break", 19);

              case 11:
                _context.next = 13;
                return this._services.transport.post(preProcessedUrl, finalHeaders, JSON.stringify(requestBody), this._productId);

              case 13:
                response = _context.sent;
                return _context.abrupt("break", 19);

              case 15:
                _context.next = 17;
                return this._services.transport.delete(preProcessedUrl, finalHeaders, null, this._productId);

              case 17:
                response = _context.sent;
                return _context.abrupt("break", 19);

              case 19:
                if (!(response.status.code < 200 || response.status.code >= 300)) {
                  _context.next = 21;
                  break;
                }

                throw new Error("Request responded with a non-success code ".concat(response.status.code));

              case 21:
                return _context.abrupt("return", response);

              case 22:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _makeRequest(_x, _x2, _x3, _x4) {
        return _makeRequest2.apply(this, arguments);
      }

      return _makeRequest;
    }()
  }, {
    key: "fetchResource",
    value: function () {
      var _fetchResource = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(url, requestBody) {
        var _this = this;

        var maxAttemptsCount, result;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                maxAttemptsCount = 6;
                _context2.prev = 1;
                _context2.next = 4;
                return new operationRetrier.AsyncRetrier({
                  min: 50,
                  max: 1600,
                  maxAttemptsCount: maxAttemptsCount
                }).run(function () {
                  return _this._makeRequest('get', url, requestBody);
                });

              case 4:
                result = _context2.sent;
                _context2.next = 10;
                break;

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](1);
                throw new Error("Fetch resource from \"".concat(url, "\" failed."));

              case 10:
                return _context2.abrupt("return", result.body);

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[1, 7]]);
      }));

      function fetchResource(_x5, _x6) {
        return _fetchResource.apply(this, arguments);
      }

      return fetchResource;
    }()
  }, {
    key: "mutateResource",
    value: function () {
      var _mutateResource = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(method, url, requestBody) {
        var result;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._makeRequest(method, url, requestBody, {
                  'X-Twilio-Mutation-Id': uuid.v4()
                });

              case 2:
                result = _context3.sent;

                if (!isMutationConflictResponse(result)) {
                  _context3.next = 7;
                  break;
                }

                _context3.next = 6;
                return this.fetchResource(result.body.resource_url);

              case 6:
                return _context3.abrupt("return", _context3.sent);

              case 7:
                return _context3.abrupt("return", result.body);

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function mutateResource(_x7, _x8, _x9) {
        return _mutateResource.apply(this, arguments);
      }

      return mutateResource;
    }()
  }]);

  return CommandExecutor;
}();

var version = "6.0.0";

var _class, _temp;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Client_1;
var log = Logger.scope('Client');
var SDK_VERSION = version;

var ClientServices = function ClientServices() {
  _classCallCheck__default['default'](this, ClientServices);
};
/**
 * A client is the starting point to the Twilio Programmable Chat functionality.
 */


exports.Client = Client_1 = (_temp = _class = /*#__PURE__*/function (_ReplayEventEmitter) {
  _inherits__default['default'](Client, _ReplayEventEmitter);

  var _super = _createSuper(Client);

  /**
   * Client connection state.
   */
  // @todo make private?

  /**
   * Current version of the Chat client.
   */

  /**
   * Current version of the Chat client.
   */

  /**
   * Returned client instance is not yet fully initialized. Calling any operations will block until it is.
   * Use connection events to monitor when client becomes fully available (connectionStateChanged with state
   * 'connected') or not available (connectionStateChange with state 'denied', event tokenExpired, event connectionError).
   *
   * @param fpaToken Access token
   * @param options Options to customize the Client
   * @returns A not yet fully-initialized client.
   */
  function Client(fpaToken) {
    var _this$options, _this$options$logLeve, _this$options$clientM, _this$options$Sync, _this$options$Sync2, _this$options$twilsoc, _this$options$transpo, _this$options$notific, _this$options$syncCli, _ref, _ref2, _this$options$Chat, _this$options2, _this$options3, _configurationOptions, _ref3, _configurationOptions2;

    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck__default['default'](this, Client);

    _this = _super.call(this);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "connectionState", 'unknown');

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "_ensureReady", null);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "_resolveEnsureReady", null);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "_rejectEnsureReady", null);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "channelsPromise", null);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "configurationPromise", null);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "version", SDK_VERSION);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "parsePushNotification", Client_1.parsePushNotification);

    _this.fpaToken = fpaToken;
    _this.options = options;
    _this.options = (_this$options = _this.options) !== null && _this$options !== void 0 ? _this$options : {};

    if (!_this.options.disableDeepClone) {
      var _options = _objectSpread(_objectSpread({}, _this.options), {}, {
        transport: undefined,
        twilsockClient: undefined
      });

      _options = deepClone(_options);
      _options.transport = _this.options.transport;
      _options.twilsockClient = _this.options.twilsockClient;
      _this.options = _options;
    }

    _this.options.logLevel = (_this$options$logLeve = _this.options.logLevel) !== null && _this$options$logLeve !== void 0 ? _this$options$logLeve : 'silent';
    log.setLevel(_this.options.logLevel);
    var productId = _this.options.productId = 'ip_messaging'; // Fill ClientMetadata

    _this.options.clientMetadata = (_this$options$clientM = _this.options.clientMetadata) !== null && _this$options$clientM !== void 0 ? _this$options$clientM : {};

    if (!_this.options.clientMetadata.hasOwnProperty('type')) {
      _this.options.clientMetadata.type = 'chat';
    }

    if (!_this.options.clientMetadata.hasOwnProperty('sdk')) {
      _this.options.clientMetadata.sdk = 'JS';
      _this.options.clientMetadata.sdkv = SDK_VERSION;
    } // Enable session local storage for Sync


    _this.options.Sync = (_this$options$Sync = _this.options.Sync) !== null && _this$options$Sync !== void 0 ? _this$options$Sync : {};

    if (!((_this$options$Sync2 = _this.options.Sync) !== null && _this$options$Sync2 !== void 0 && _this$options$Sync2.enableSessionStorage)) {
      _this.options.Sync.enableSessionStorage = true;
    }

    if (_this.options.region) {
      _this.options.Sync.region = _this.options.region;
    }

    _this.services = new ClientServices();
    var startTwilsock = !_this.options.twilsockClient; // Create default init registrations if none were provided.
    // Otherwise, the outside party have to list all the init registrations they need, including Sync ones.

    if (!_this.options.initRegistrations) {
      var initRegistration = new twilsock.InitRegistration(productId);
      Client_1.populateInitRegistrations(initRegistration);
      twilioSync.SyncClient.populateInitRegistrations(initRegistration);
      _this.options.initRegistrations = [initRegistration];
    }

    _this.services.twilsockClient = _this.options.twilsockClient = (_this$options$twilsoc = _this.options.twilsockClient) !== null && _this$options$twilsoc !== void 0 ? _this$options$twilsoc : new twilsock.TwilsockClient(fpaToken, productId, _this.options);

    _this.services.twilsockClient.on('tokenAboutToExpire', function (ttl) {
      return _this.emit('tokenAboutToExpire', ttl);
    });

    _this.services.twilsockClient.on('tokenExpired', function () {
      return _this.emit('tokenExpired');
    });

    _this.services.twilsockClient.on('connectionError', function (error) {
      return _this.emit('connectionError', error);
    });

    _this.services.twilsockClient.on('stateChanged', function (state) {
      log.debug("Handling stateChanged for ChatClient: new state ".concat(state));

      if (state !== _this.connectionState) {
        _this.connectionState = state;

        _this.emit('connectionStateChanged', _this.connectionState);
      }
    });

    _this.services.transport = _this.options.transport = (_this$options$transpo = _this.options.transport) !== null && _this$options$transpo !== void 0 ? _this$options$transpo : _this.options.twilsockClient;
    _this.services.notificationClient = _this.options.notificationsClient = (_this$options$notific = _this.options.notificationsClient) !== null && _this$options$notific !== void 0 ? _this$options$notific : new notifications.Notifications(fpaToken, _this.options);
    _this.services.syncClient = _this.options.syncClient = (_this$options$syncCli = _this.options.syncClient) !== null && _this$options$syncCli !== void 0 ? _this$options$syncCli : new twilioSync.SyncClient(fpaToken, _this.options);
    var configurationOptions = (_ref = (_ref2 = (_this$options$Chat = (_this$options2 = _this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.Chat) !== null && _this$options$Chat !== void 0 ? _this$options$Chat : (_this$options3 = _this.options) === null || _this$options3 === void 0 ? void 0 : _this$options3.IPMessaging) !== null && _ref2 !== void 0 ? _ref2 : _this.options) !== null && _ref !== void 0 ? _ref : {};
    var region = (_configurationOptions = configurationOptions.region) !== null && _configurationOptions !== void 0 ? _configurationOptions : _this.options.region;
    var baseUrl = (_ref3 = (_configurationOptions2 = configurationOptions.apiUri) !== null && _configurationOptions2 !== void 0 ? _configurationOptions2 : configurationOptions.typingUri) !== null && _ref3 !== void 0 ? _ref3 : "https://aim.".concat(region || 'us1', ".twilio.com");
    _this.services.commandExecutor = new CommandExecutor(baseUrl, {
      transport: _this.options.transport
    }, productId);

    var emitFailed = function emitFailed(err) {
      _this._rejectEnsureReady(err);

      _this.emit('stateChanged', 'failed');
    };

    _this.services.twilsockClient.once('connectionError', emitFailed);

    _this.services.twilsockClient.once('disconnected', emitFailed); // ChatClient will be able to initialize only after twilsock is connected


    _this.services.twilsockClient.once('connected', /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
      return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              log.debug("ChatClient started INITIALIZING");

              _this.services.twilsockClient.off('connectionError', emitFailed);

              _this.services.twilsockClient.off('disconnected', emitFailed);

              _context.prev = 3;
              _context.next = 6;
              return _this._initialize();

            case 6:
              _context.next = 12;
              break;

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](3);

              // Fail ChatClient if initialization is incomplete
              _this._rejectEnsureReady(_context.t0);

              _this.emit('stateChanged', 'failed');

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[3, 8]]);
    })));

    _this._ensureReady = new Promise(function (resolve, reject) {
      _this._resolveEnsureReady = resolve;
      _this._rejectEnsureReady = reject;
    }).catch(function (err) {}); // @todo How to process unhandled rejection here?

    _this._myself = new User('', '', null, _this.services);

    if (startTwilsock) {
      _this.services.twilsockClient.connect();
    }

    return _this;
  }
  /**
   * Fired when a channel becomes visible to the client. The event is also triggered when the client creates a new channel.
   * Fired for all channels client has joined.
   *
   * Parameters:
   * 1. {@link Channel} `channel` - the channel in question
   * @event
   */


  _createClass__default['default'](Client, [{
    key: "user",
    get:
    /**
     * Information of the logged-in user. Before client initialization, returns an
     * uninitialized user. Will trigger a {@link Client.userUpdated} event after
     * initialization.
     */
    function get() {
      return this._myself;
    }
    /**
     * Client reachability state. Throws if accessed before the client
     * initialization was completed.
     */

  }, {
    key: "reachabilityEnabled",
    get: function get() {
      if (!this.configuration) {
        throw new Error('Reachability information could not yet be accessed as the client ' + "has not yet been initialized. Subscribe to the 'stateChanged' event " + 'to properly react to the client initialization.');
      }

      return this.configuration.reachabilityEnabled;
    }
  }, {
    key: "token",
    get: function get() {
      return this.fpaToken;
    }
  }, {
    key: "_subscribeToPushNotifications",
    value: function _subscribeToPushNotifications(channelType) {
      var _this2 = this;

      [NotificationTypes.NEW_MESSAGE, NotificationTypes.ADDED_TO_CHANNEL, NotificationTypes.INVITED_TO_CHANNEL, NotificationTypes.REMOVED_FROM_CHANNEL, NotificationTypes.CONSUMPTION_UPDATE] // Supported only on iOS
      .forEach(function (messageType) {
        _this2.services.notificationClient.subscribe(channelType, messageType);
      });
    }
  }, {
    key: "_unsubscribeFromPushNotifications",
    value: function _unsubscribeFromPushNotifications(channelType) {
      var _this3 = this;

      [NotificationTypes.NEW_MESSAGE, NotificationTypes.ADDED_TO_CHANNEL, NotificationTypes.INVITED_TO_CHANNEL, NotificationTypes.REMOVED_FROM_CHANNEL, NotificationTypes.CONSUMPTION_UPDATE] // Supported only on iOS
      .forEach(function (messageType) {
        _this3.services.notificationClient.unsubscribe(channelType, messageType);
      });
    }
  }, {
    key: "_initialize",
    value: function () {
      var _initialize2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var _this4 = this;

        var configurationResponse;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.services.commandExecutor.fetchResource('Client/v1/Configuration');

              case 2:
                configurationResponse = _context2.sent;
                this.configuration = new Configuration(this.options, configurationResponse, log);

                this._myself._resolveInitialization(this.configuration, this.configuration.userIdentity, this.configuration.userInfo, true);

                this.services.typingIndicator = new TypingIndicator(this.getChannelBySid.bind(this), this.configuration, this.services);
                this.services.network = new Network(this.configuration, this.services);
                this.services.users = new Users(this._myself, this.configuration, this.services);
                this.services.users.on('userSubscribed', this.emit.bind(this, 'userSubscribed'));
                this.services.users.on('userUpdated', function (args) {
                  return _this4.emit('userUpdated', args);
                });
                this.services.users.on('userUnsubscribed', this.emit.bind(this, 'userUnsubscribed'));
                this.channels = new Channels(this.configuration, this.services);
                this.channels.on('channelAdded', this.emit.bind(this, 'channelAdded'));
                this.channels.on('channelInvited', this.emit.bind(this, 'channelInvited'));
                this.channels.on('channelRemoved', this.emit.bind(this, 'channelRemoved'));
                this.channels.on('channelJoined', this.emit.bind(this, 'channelJoined'));
                this.channels.on('channelLeft', this.emit.bind(this, 'channelLeft'));
                this.channels.on('channelUpdated', function (args) {
                  return _this4.emit('channelUpdated', args);
                });
                this.channels.on('memberJoined', this.emit.bind(this, 'memberJoined'));
                this.channels.on('memberLeft', this.emit.bind(this, 'memberLeft'));
                this.channels.on('memberUpdated', function (args) {
                  return _this4.emit('memberUpdated', args);
                });
                this.channels.on('messageAdded', this.emit.bind(this, 'messageAdded'));
                this.channels.on('messageUpdated', function (args) {
                  return _this4.emit('messageUpdated', args);
                });
                this.channels.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));
                this.channels.on('typingStarted', this.emit.bind(this, 'typingStarted'));
                this.channels.on('typingEnded', this.emit.bind(this, 'typingEnded'));
                this.channelsPromise = this.channels.fetchChannels().then(function () {
                  return _this4.channels;
                }).catch(function (err) {
                  throw err;
                });
                _context2.next = 29;
                return this.services.users.myself._ensureFetched();

              case 29:
                Client_1.supportedPushChannels.forEach(function (channelType) {
                  return _this4._subscribeToPushNotifications(channelType);
                });
                this.services.typingIndicator.initialize();
                this.services.publicChannels = new PublicChannels(this, this.services, this.configuration.links.conversations);
                this.services.userChannels = new UserChannels(this, this.services, this.configuration.links.myConversations);
                this.services.mcsClient = new mcsClient.McsClient(this.fpaToken, this.configuration.links.mediaService, null, _objectSpread(_objectSpread({}, this.options), {}, {
                  transport: null
                }));

                this._resolveEnsureReady();

                this.emit('stateChanged', 'initialized');

              case 36:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _initialize() {
        return _initialize2.apply(this, arguments);
      }

      return _initialize;
    }()
    /**
     * Gracefully shut down the client.
     */

  }, {
    key: "shutdown",
    value: function () {
      var _shutdown = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this._ensureReady;

              case 2:
                _context3.next = 4;
                return this.services.syncClient.shutdown();

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function shutdown() {
        return _shutdown.apply(this, arguments);
      }

      return shutdown;
    }()
    /**
     * Update the token used by the client and re-register with the Programmable Chat services.
     * @param token New access token.
     */

  }, {
    key: "updateToken",
    value: function () {
      var _updateToken = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(token) {
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._ensureReady;

              case 2:
                log.info('updateToken');

                if (!(this.fpaToken === token)) {
                  _context4.next = 5;
                  break;
                }

                return _context4.abrupt("return", this);

              case 5:
                _context4.next = 7;
                return this.services.twilsockClient.updateToken(token);

              case 7:
                this.fpaToken = token;
                this.services.mcsClient.updateToken(token);
                _context4.next = 11;
                return this.configurationPromise;

              case 11:
                return _context4.abrupt("return", this);

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function updateToken(_x) {
        return _updateToken.apply(this, arguments);
      }

      return updateToken;
    }()
    /**
     * Get a known channel by its SID.
     * @param channelSid Channel sid
     */

  }, {
    key: "getChannelBySid",
    value: function () {
      var _getChannelBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(channelSid) {
        var channel;
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._ensureReady;

              case 2:
                _context5.next = 4;
                return this.channels.myChannelsRead.promise;

              case 4:
                _context5.next = 6;
                return this.channels.getChannel(channelSid);

              case 6:
                channel = _context5.sent;

                if (channel) {
                  _context5.next = 11;
                  break;
                }

                _context5.next = 10;
                return this.services.publicChannels.getChannelBySid(channelSid);

              case 10:
                channel = _context5.sent;

              case 11:
                _context5.next = 13;
                return this.channels.pushChannel(channel);

              case 13:
                return _context5.abrupt("return", _context5.sent);

              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getChannelBySid(_x2) {
        return _getChannelBySid.apply(this, arguments);
      }

      return getChannelBySid;
    }()
    /**
     * Get a known channel by its unique identifier name.
     * @param uniqueName The unique identifier name of the channel.
     */

  }, {
    key: "getChannelByUniqueName",
    value: function () {
      var _getChannelByUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(uniqueName) {
        var channel;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._ensureReady;

              case 2:
                _context6.next = 4;
                return this.channels.myChannelsRead.promise;

              case 4:
                _context6.next = 6;
                return this.services.publicChannels.getChannelByUniqueName(uniqueName);

              case 6:
                channel = _context6.sent;
                _context6.next = 9;
                return this.channels.pushChannel(channel);

              case 9:
                return _context6.abrupt("return", _context6.sent);

              case 10:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getChannelByUniqueName(_x3) {
        return _getChannelByUniqueName.apply(this, arguments);
      }

      return getChannelByUniqueName;
    }()
    /**
     * Get the current list of all the subscribed channels.
     */

  }, {
    key: "getSubscribedChannels",
    value: function () {
      var _getSubscribedChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(args) {
        var channelsEntity;
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this._ensureReady;

              case 2:
                _context7.next = 4;
                return this.channelsPromise;

              case 4:
                channelsEntity = _context7.sent;
                _context7.next = 7;
                return channelsEntity.getChannels(args);

              case 7:
                return _context7.abrupt("return", _context7.sent);

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getSubscribedChannels(_x4) {
        return _getSubscribedChannels.apply(this, arguments);
      }

      return getSubscribedChannels;
    }()
    /**
     * Get an array of channels that are locally known to the client in the provided sorting order.
     * Locally known channels are the ones that are created and/or joined during the client runtime
     * and all the subscribed channel of the currently-logged-in user.
     * To ensure that the full list of the subscribed channels has fetched, call the
     * {@link Client.getSubscribedChannels} method
     * and fetch all the pages with the help of the {@link RestPaginator.nextPage} method.
     * @param sortingOptions Sorting options.
     */

  }, {
    key: "getLocalChannels",
    value: function () {
      var _getLocalChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(sortingOptions) {
        var channelsEntity, result, sortingOrder;
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this._ensureReady;

              case 2:
                _context8.next = 4;
                return this.channelsPromise;

              case 4:
                channelsEntity = _context8.sent;
                result = Array.from(channelsEntity.channels.values());
                sortingOrder = (sortingOptions === null || sortingOptions === void 0 ? void 0 : sortingOptions.order) || 'ascending';

                if (sortingOptions !== null && sortingOptions !== void 0 && sortingOptions.criteria) {
                  if (sortingOptions.criteria === 'lastMessage') {
                    result.sort(function (a, b) {
                      return Client_1.compareChannelsByLastMessage(a, b, sortingOrder);
                    });
                  } else if (sortingOptions.criteria === 'uniqueName') {
                    result.sort(function (a, b) {
                      return Client_1.compareChannelsByStringProperty(a.uniqueName, b.uniqueName, sortingOrder);
                    });
                  } else if (sortingOptions.criteria === 'friendlyName') {
                    result.sort(function (a, b) {
                      return Client_1.compareChannelsByStringProperty(a.friendlyName, b.friendlyName, sortingOrder);
                    });
                  }
                }

                return _context8.abrupt("return", result);

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getLocalChannels(_x5) {
        return _getLocalChannels.apply(this, arguments);
      }

      return getLocalChannels;
    }()
  }, {
    key: "getPublicChannelDescriptors",
    value:
    /**
     * Get the content of the public channels directory.
     */
    function () {
      var _getPublicChannelDescriptors = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9() {
        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this._ensureReady;

              case 2:
                _context9.next = 4;
                return this.services.publicChannels.getChannels();

              case 4:
                return _context9.abrupt("return", _context9.sent);

              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getPublicChannelDescriptors() {
        return _getPublicChannelDescriptors.apply(this, arguments);
      }

      return getPublicChannelDescriptors;
    }()
    /**
     * Get the content of the channels directory of the user (created by, joined or invited to).
     */

  }, {
    key: "getUserChannelDescriptors",
    value: function () {
      var _getUserChannelDescriptors = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10() {
        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this._ensureReady;

              case 2:
                _context10.next = 4;
                return this.services.userChannels.getChannels();

              case 4:
                return _context10.abrupt("return", _context10.sent);

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function getUserChannelDescriptors() {
        return _getUserChannelDescriptors.apply(this, arguments);
      }

      return getUserChannelDescriptors;
    }()
    /**
     * Create a channel on the server and subscribe to its events.
     * The default is a public channel with an empty friendly name.
     * @param options Options for the channel.
     */

  }, {
    key: "createChannel",
    value: function () {
      var _createChannel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee11(options) {
        var channelsEntity;
        return _regeneratorRuntime__default['default'].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this._ensureReady;

              case 2:
                options = options || {};
                _context11.next = 5;
                return this.channelsPromise;

              case 5:
                channelsEntity = _context11.sent;
                _context11.next = 8;
                return channelsEntity.addChannel(options);

              case 8:
                return _context11.abrupt("return", _context11.sent);

              case 9:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function createChannel(_x6) {
        return _createChannel.apply(this, arguments);
      }

      return createChannel;
    }()
    /**
     * Register for push notifications.
     * @param channelType Channel type.
     * @param registrationId Push notification ID provided by the platform.
     */

  }, {
    key: "setPushRegistrationId",
    value: function () {
      var _setPushRegistrationId = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee12(channelType, registrationId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this._ensureReady;

              case 2:
                this.services.notificationClient.setPushRegistrationId(channelType, registrationId);
                _context12.next = 5;
                return this.services.notificationClient.commitChanges();

              case 5:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function setPushRegistrationId(_x7, _x8) {
        return _setPushRegistrationId.apply(this, arguments);
      }

      return setPushRegistrationId;
    }()
    /**
     * Unregister from push notifications.
     * @param channelType Channel type.
     */

  }, {
    key: "unsetPushRegistrationId",
    value: function () {
      var _unsetPushRegistrationId = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee13(channelType) {
        return _regeneratorRuntime__default['default'].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this._ensureReady;

              case 2:
                // await this.services.notificationClient.removeRegistrations(..) // @todo
                // old version:
                this._unsubscribeFromPushNotifications(channelType);

                _context13.next = 5;
                return this.services.notificationClient.commitChanges();

              case 5:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function unsetPushRegistrationId(_x9) {
        return _unsetPushRegistrationId.apply(this, arguments);
      }

      return unsetPushRegistrationId;
    }()
  }, {
    key: "handlePushNotification",
    value:
    /**
     * Handle push notification payload parsing and emit the {@link Client.pushNotification} event on this {@link Client} instance.
     * @param notificationPayload Push notification payload
     */
    function () {
      var _handlePushNotification = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee14(notificationPayload) {
        return _regeneratorRuntime__default['default'].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this._ensureReady;

              case 2:
                log.debug('handlePushNotification, notificationPayload=', notificationPayload);
                this.emit('pushNotification', Client_1.parsePushNotification(notificationPayload));

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function handlePushNotification(_x10) {
        return _handlePushNotification.apply(this, arguments);
      }

      return handlePushNotification;
    }()
    /**
     * Gets a user with the given identity. If it's in the subscribed list, then return the user object from it;
     * if not, then subscribe and add user to the subscribed list.
     * @param identity Identity of the user.
     * @returns A fully initialized user.
     */

  }, {
    key: "getUser",
    value: function () {
      var _getUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee15(identity) {
        return _regeneratorRuntime__default['default'].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this._ensureReady;

              case 2:
                _context15.next = 4;
                return this.services.users.getUser(identity);

              case 4:
                return _context15.abrupt("return", _context15.sent);

              case 5:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function getUser(_x11) {
        return _getUser.apply(this, arguments);
      }

      return getUser;
    }()
    /**
     * Gets the user descriptor for given identity.
     * @param identity Identity of the user.
     * @returns The user descriptor.
     */

  }, {
    key: "getUserDescriptor",
    value: function () {
      var _getUserDescriptor = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee16(identity) {
        return _regeneratorRuntime__default['default'].wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this._ensureReady;

              case 2:
                _context16.next = 4;
                return this.services.users.getUserDescriptor(identity);

              case 4:
                return _context16.abrupt("return", _context16.sent);

              case 5:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function getUserDescriptor(_x12) {
        return _getUserDescriptor.apply(this, arguments);
      }

      return getUserDescriptor;
    }()
    /**
     * Get a list of subscribed user objects.
     */

  }, {
    key: "getSubscribedUsers",
    value: function () {
      var _getSubscribedUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee17() {
        return _regeneratorRuntime__default['default'].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return this._ensureReady;

              case 2:
                _context17.next = 4;
                return this.services.users.getSubscribedUsers();

              case 4:
                return _context17.abrupt("return", _context17.sent);

              case 5:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function getSubscribedUsers() {
        return _getSubscribedUsers.apply(this, arguments);
      }

      return getSubscribedUsers;
    }()
  }], [{
    key: "create",
    value:
    /**
     * @deprecated Call constructor directly.
     *
     * Factory method to create Chat client instance.
     *
     * The factory method will automatically trigger connection.
     * Do not use it if you need finer-grained control.
     *
     * @param token Access token.
     * @param options Options to customize the client.
     * @returns Returns a fully initialized client.
     */
    function () {
      var _create = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee18(token, options) {
        var client;
        return _regeneratorRuntime__default['default'].wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                if (!(options !== null && options !== void 0 && options.twilsockClient)) {
                  _context18.next = 2;
                  break;
                }

                throw new Error('Obsolete usage of ChatClient.create() factory method: if you pass twilsock from the outside then you must use ChatClient constructor and be prepared to work with uninitialized client.');

              case 2:
                client = new Client_1(token, options);
                _context18.next = 5;
                return client._ensureReady;

              case 5:
                return _context18.abrupt("return", client);

              case 6:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      function create(_x13, _x14) {
        return _create.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: "populateInitRegistrations",
    value: function populateInitRegistrations(reg) {
      reg.populateInitRegistrations([NotificationTypes.TYPING_INDICATOR]);
    }
  }, {
    key: "compareChannelsByLastMessage",
    value: function compareChannelsByLastMessage(a, b, order) {
      var lessThan = function lessThan(a, b) {
        var _a$lastMessage, _a$lastMessage$dateCr, _b$lastMessage, _b$lastMessage$dateCr, _a$lastMessage2, _a$lastMessage2$dateC, _b$lastMessage2, _b$lastMessage2$dateC, _b$lastMessage3, _a$lastMessage3;

        if (((_a$lastMessage = a.lastMessage) === null || _a$lastMessage === void 0 ? void 0 : (_a$lastMessage$dateCr = _a$lastMessage.dateCreated) === null || _a$lastMessage$dateCr === void 0 ? void 0 : _a$lastMessage$dateCr.getTime()) > ((_b$lastMessage = b.lastMessage) === null || _b$lastMessage === void 0 ? void 0 : (_b$lastMessage$dateCr = _b$lastMessage.dateCreated) === null || _b$lastMessage$dateCr === void 0 ? void 0 : _b$lastMessage$dateCr.getTime())) {
          // console.log('A time > B time');
          return 1;
        } else if (((_a$lastMessage2 = a.lastMessage) === null || _a$lastMessage2 === void 0 ? void 0 : (_a$lastMessage2$dateC = _a$lastMessage2.dateCreated) === null || _a$lastMessage2$dateC === void 0 ? void 0 : _a$lastMessage2$dateC.getTime()) < ((_b$lastMessage2 = b.lastMessage) === null || _b$lastMessage2 === void 0 ? void 0 : (_b$lastMessage2$dateC = _b$lastMessage2.dateCreated) === null || _b$lastMessage2$dateC === void 0 ? void 0 : _b$lastMessage2$dateC.getTime())) {
          // console.log('A time < B time');
          return -1;
        }

        if ((_b$lastMessage3 = b.lastMessage) !== null && _b$lastMessage3 !== void 0 && _b$lastMessage3.dateCreated) {
          // console.log('B has time');
          return 1;
        } else if ((_a$lastMessage3 = a.lastMessage) !== null && _a$lastMessage3 !== void 0 && _a$lastMessage3.dateCreated) {
          // console.log('A has time');
          return -1;
        }

        if (b.lastMessage) {
          // console.log('B has lastmessage');
          return 1;
        } else if (a.lastMessage) {
          // console.log('A has lastmessage');
          return -1;
        }

        return 0;
      };

      var result = lessThan(a, b);
      console.log("Sorted ".concat(a.sid, " and ").concat(b.sid, ": return ").concat(result));
      return order === 'ascending' ? result : -result;
    }
  }, {
    key: "compareChannelsByStringProperty",
    value: function compareChannelsByStringProperty(str1, str2, order) {
      var lessThan = function lessThan(a, b) {
        if (a && b) {
          return str1.localeCompare(str2);
        } else if (b) {
          return 1;
        } else if (a) {
          return -1;
        }

        return 0;
      };

      var result = lessThan(str1, str2);
      return order === 'ascending' ? result : -result;
    }
  }, {
    key: "parsePushNotificationChatData",
    value: function parsePushNotificationChatData(data) {
      var result = {};

      for (var key in Client_1.supportedPushDataFields) {
        if (typeof data[key] !== 'undefined' && data[key] !== null) {
          if (key === 'message_index') {
            if (parseToNumber(data[key]) !== null) {
              result[Client_1.supportedPushDataFields[key]] = Number(data[key]);
            }
          } else {
            result[Client_1.supportedPushDataFields[key]] = data[key];
          }
        }
      }

      return result;
    }
    /**
     * Static method for push notification payload parsing. Returns parsed push as a {@link PushNotification} object.
     * @param notificationPayload Push notification payload.
     */

  }, {
    key: "parsePushNotification",
    value: function parsePushNotification(notificationPayload) {
      log.debug('parsePushNotification, notificationPayload=', notificationPayload); // APNS specifics

      if (typeof notificationPayload.aps !== 'undefined') {
        if (!notificationPayload.twi_message_type) {
          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');
        }

        var data = Client_1.parsePushNotificationChatData(notificationPayload);
        var apsPayload = notificationPayload.aps;
        var body = null;
        var title = null;

        if (typeof apsPayload.alert === 'string') {
          body = apsPayload.alert || null;
        } else {
          body = apsPayload.alert.body || null;
          title = apsPayload.alert.title || null;
        }

        return new PushNotification({
          title: title,
          body: body,
          sound: apsPayload.sound || null,
          badge: apsPayload.badge || null,
          action: apsPayload.category || null,
          type: notificationPayload.twi_message_type,
          data: data
        });
      } // FCM specifics


      if (typeof notificationPayload.data !== 'undefined') {
        var dataPayload = notificationPayload.data;

        if (!dataPayload.twi_message_type) {
          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');
        }

        var _data = Client_1.parsePushNotificationChatData(notificationPayload.data);

        return new PushNotification({
          title: dataPayload.twi_title || null,
          body: dataPayload.twi_body || null,
          sound: dataPayload.twi_sound || null,
          badge: null,
          action: dataPayload.twi_action || null,
          type: dataPayload.twi_message_type,
          data: _data
        });
      }

      throw new Error('Provided push notification payload is not Programmable Chat notification');
    }
  }]);

  return Client;
}(replayEventEmitter.ReplayEventEmitter), _defineProperty__default['default'](_class, "version", SDK_VERSION), _defineProperty__default['default'](_class, "supportedPushChannels", ['fcm', 'apn']), _defineProperty__default['default'](_class, "supportedPushDataFields", {
  'channel_sid': 'channelSid',
  'message_sid': 'messageSid',
  'message_index': 'messageIndex'
}), _defineProperty__default['default'](_class, "channelAdded", 'channelAdded'), _defineProperty__default['default'](_class, "channelInvited", 'channelInvited'), _defineProperty__default['default'](_class, "channelJoined", 'channelJoined'), _defineProperty__default['default'](_class, "channelLeft", 'channelLeft'), _defineProperty__default['default'](_class, "channelRemoved", 'channelRemoved'), _defineProperty__default['default'](_class, "channelUpdated", 'channelUpdated'), _defineProperty__default['default'](_class, "memberJoined", 'memberJoined'), _defineProperty__default['default'](_class, "memberLeft", 'memberLeft'), _defineProperty__default['default'](_class, "memberUpdated", 'memberUpdated'), _defineProperty__default['default'](_class, "messageAdded", 'messageAdded'), _defineProperty__default['default'](_class, "messageRemoved", 'messageRemoved'), _defineProperty__default['default'](_class, "messageUpdated", 'messageUpdated'), _defineProperty__default['default'](_class, "tokenAboutToExpire", 'tokenAboutToExpire'), _defineProperty__default['default'](_class, "tokenExpired", 'tokenExpired'), _defineProperty__default['default'](_class, "typingEnded", 'typingEnded'), _defineProperty__default['default'](_class, "typingStarted", 'typingStarted'), _defineProperty__default['default'](_class, "pushNotification", 'pushNotification'), _defineProperty__default['default'](_class, "userSubscribed", 'userSubscribed'), _defineProperty__default['default'](_class, "userUnsubscribed", 'userUnsubscribed'), _defineProperty__default['default'](_class, "userUpdated", 'userUpdated'), _defineProperty__default['default'](_class, "connectionError", 'connectionError'), _defineProperty__default['default'](_class, "stateChanged", 'stateChanged'), _defineProperty__default['default'](_class, "connectionStateChanged", 'connectionStateChanged'), _temp);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "updateToken", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "getChannelBySid", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "getChannelByUniqueName", null);

__decorate([declarativeTypeValidator.validateTypesAsync(['undefined', declarativeTypeValidator.objectSchema('sorting options', {
  criteria: [declarativeTypeValidator.literal('lastMessage', 'friendlyName', 'uniqueName'), 'undefined'],
  order: [declarativeTypeValidator.literal('ascending', 'descending'), 'undefined']
})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], exports.Client.prototype, "getLocalChannels", null);

__decorate([declarativeTypeValidator.validateTypesAsync(['undefined', declarativeTypeValidator.objectSchema('channel options', {
  friendlyName: ['string', 'undefined'],
  isPrivate: ['boolean', 'undefined'],
  uniqueName: ['string', 'undefined']
})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], exports.Client.prototype, "createChannel", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.literal('fcm', 'apn'), 'string'), __metadata("design:type", Function), __metadata("design:paramtypes", [String, String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "setPushRegistrationId", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.literal('fcm', 'apn')), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "unsetPushRegistrationId", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.pureObject), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], exports.Client.prototype, "handlePushNotification", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "getUser", null);

__decorate([declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], exports.Client.prototype, "getUserDescriptor", null);

__decorate([declarativeTypeValidator.validateTypes(declarativeTypeValidator.pureObject), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", PushNotification)], exports.Client, "parsePushNotification", null);

exports.Client = Client_1 = __decorate([declarativeTypeValidator.validateConstructorTypes(declarativeTypeValidator.nonEmptyString, [declarativeTypeValidator.pureObject, 'undefined', declarativeTypeValidator.literal(null)]), __metadata("design:paramtypes", [String, Object])], exports.Client);

exports.Channel = Channel;
exports.ChannelDescriptor = ChannelDescriptor;
exports.Media = Media;
exports.Member = Member;
exports.Message = Message;
exports.PushNotification = PushNotification;
exports.RestPaginator = RestPaginator;
exports.User = User;
exports.UserDescriptor = UserDescriptor;
//# sourceMappingURL=lib.js.map
