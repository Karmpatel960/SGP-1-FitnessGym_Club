{"version":3,"file":"browser.js","sources":["../../../node_modules/tslib/tslib.es6.js","../src/logger.ts","../src/configuration.ts","../src/protocol/messages/abstractmessage.ts","../src/protocol/messages/init.ts","../src/protocol/messages/initReply.ts","../src/protocol/messages/update.ts","../src/protocol/messages/message.ts","../src/protocol/messages/reply.ts","../src/protocol/messages/close.ts","../src/protocol/messages/telemetry.ts","../src/parser.ts","../src/error/twilsockerror.ts","../src/error/twilsockreplyerror.ts","../src/backoffretrier.ts","../src/twilsock.ts","../src/metadata.ts","../src/packetinterface.ts","../src/websocketchannel.ts","../src/services/registrations.ts","../src/error/twilsockupstreamerror.ts","../src/error/transportunavailableerror.ts","../src/services/upstream.ts","../src/deferred.ts","../src/offlinestorage.ts","../src/tokenStorage.ts","../src/services/telemetrytracker.ts","../src/client.ts","../src/protocol/initregistration.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import * as loglevelLog from \"loglevel\";\nimport { LogLevelDesc } from \"loglevel\";\n\ntype ArgumentsType = unknown[];\n\nconst log: loglevelLog.Logger = loglevelLog.getLogger(\"twilsock\"); // twilsock is used by Flex SDK. Please DO NOT change\n\nfunction prepareLine(prefix, args) {\n  return [`${new Date().toISOString()} Twilsock ${prefix}:`].concat(\n    Array.from(args)\n  );\n}\n\nclass Logger {\n  private prefix = \"\";\n\n  constructor(prefix: string) {\n    this.prefix =\n      prefix !== null && prefix !== undefined && prefix.length > 0\n        ? \" \" + prefix + \":\"\n        : \"\";\n  }\n\n  setLevel(level: LogLevelDesc): void {\n    log.setLevel(level);\n  }\n\n  static setLevel(level: LogLevelDesc): void {\n    log.setLevel(level);\n  }\n\n  trace(...args: ArgumentsType): void {\n    log.trace.apply(null, prepareLine(\"T\", args));\n  }\n  debug(...args: ArgumentsType): void {\n    log.debug.apply(null, prepareLine(\"D\", args));\n  }\n  info(...args: ArgumentsType): void {\n    log.info.apply(null, prepareLine(\"I\", args));\n  }\n  warn(...args: ArgumentsType): void {\n    log.warn.apply(null, prepareLine(\"W\", args));\n  }\n  error(...args: ArgumentsType): void {\n    log.error.apply(null, prepareLine(\"E\", args));\n  }\n\n  static trace(...args: ArgumentsType): void {\n    log.trace.apply(null, prepareLine(\"T\", args));\n  }\n  static debug(...args: ArgumentsType): void {\n    log.debug.apply(null, prepareLine(\"D\", args));\n  }\n  static info(...args: ArgumentsType): void {\n    log.info.apply(null, prepareLine(\"I\", args));\n  }\n  static warn(...args: ArgumentsType): void {\n    log.warn.apply(null, prepareLine(\"W\", args));\n  }\n  static error(...args: ArgumentsType): void {\n    log.error.apply(null, prepareLine(\"E\", args));\n  }\n}\n\nconst logInstance = new Logger(\"\");\n\nexport { Logger, logInstance as log };\n","import { LogLevelDesc } from \"loglevel\";\nimport { version } from \"../package.json\";\nimport type { ClientOptionsType } from \"./client\";\nimport { InitRegistration } from \"./protocol/initregistration\";\n\nexport type RetryPolicyType = {\n  min: number;\n  max: number;\n  initial?: number;\n  maxAttemptsCount?: number;\n  maxAttemptsTime?: number;\n  randomness?: number;\n};\n\n/**\n * Settings container for the Twilsock client library\n */\nclass Configuration {\n  private _token: string;\n  private _continuationToken: string | null;\n  public confirmedCapabilities: Set<string> = new Set<string>();\n\n  public readonly retryPolicy: RetryPolicyType;\n  public readonly url: string;\n  public readonly activeGrant: string;\n  public readonly logLevel: LogLevelDesc;\n  public readonly clientMetadata: Record<string, unknown>;\n  public readonly initRegistrations: InitRegistration[] | null;\n  public readonly tweaks: Record<string, unknown> | null;\n\n  /**\n   * @param {String} token - authentication token\n   * @param {Object} options - options to override defaults\n   */\n  constructor(\n    token: string,\n    activeGrant: string,\n    options: Partial<ClientOptionsType>\n  ) {\n    this.activeGrant = activeGrant;\n    this._token = token;\n\n    const region = options.region || \"us1\";\n    const defaultTwilsockUrl = `wss://tsock.${region}.twilio.com/v3/wsconnect`;\n\n    const twilsockOptions = options.twilsock || options.Twilsock || {};\n    this.url = twilsockOptions.uri || defaultTwilsockUrl;\n\n    this._continuationToken = options.continuationToken\n      ? options.continuationToken\n      : null;\n\n    this.logLevel = options.logLevel ? options.logLevel : \"error\";\n\n    this.retryPolicy = options.retryPolicy\n      ? options.retryPolicy\n      : {\n          min: 1 * 1000,\n          max: 2 * 60 * 1000,\n          randomness: 0.2,\n        };\n\n    this.clientMetadata = options.clientMetadata ? options.clientMetadata : {};\n    this.clientMetadata.ver = version;\n\n    this.initRegistrations = options.initRegistrations\n      ? options.initRegistrations\n      : null;\n\n    this.tweaks = options.tweaks ? options.tweaks : null;\n  }\n\n  public get token(): string {\n    return this._token;\n  }\n\n  public get continuationToken(): string | null {\n    return this._continuationToken;\n  }\n\n  public updateToken(token: string): void {\n    this._token = token;\n  }\n\n  public updateContinuationToken(continuationToken: string): void {\n    this._continuationToken = continuationToken;\n  }\n}\n\nexport { Configuration };\n","import { v4 as uuid } from \"uuid\";\n\nclass AbstractMessage {\n  public readonly id: string;\n\n  constructor(id?: string) {\n    this.id = id || `TM${uuid()}`;\n  }\n}\n\nexport { AbstractMessage };\n","import type { MessageType } from \"../protocol\";\nimport { AbstractMessage } from \"./abstractmessage\";\nimport { InitRegistration } from \"../initregistration\";\n\nclass Init extends AbstractMessage {\n  public readonly method = \"init\" as MessageType;\n  public readonly token: string;\n  public readonly continuation_token: string | null;\n  public readonly capabilities: string[];\n  public readonly metadata?: Record<string, unknown>;\n  public readonly registrations?: InitRegistration[] | null;\n  public readonly tweaks?: Record<string, unknown> | null;\n\n  constructor(\n    token: string,\n    continuationToken: string | null,\n    metadata?: Record<string, unknown>,\n    registrations?: InitRegistration[] | null,\n    tweaks?: Record<string, unknown> | null\n  ) {\n    super();\n    this.token = token;\n    this.continuation_token = continuationToken;\n    this.metadata = metadata;\n    this.registrations = registrations;\n    this.tweaks = tweaks;\n    this.capabilities = [\"client_update\", \"offline_storage\", \"telemetry.v1\"];\n  }\n}\n\nexport { Init };\n","import { AbstractMessage } from \"./abstractmessage\";\n\ninterface ContinuationTokenStatus {\n  reissued: boolean;\n  reissue_message: string;\n}\n\nclass InitReply extends AbstractMessage {\n  public readonly continuationToken: string;\n  public readonly continuationTokenStatus?: ContinuationTokenStatus;\n  public readonly offlineStorage?: string;\n  public readonly initRegistrations?: string;\n  public readonly debugInfo?: string;\n  public readonly confirmedCapabilities: Set<string>;\n\n  constructor(\n    id: string,\n    continuationToken: string,\n    confirmedCapabilities: Set<string>,\n    continuationTokenStatus?: ContinuationTokenStatus,\n    offlineStorage?: string,\n    initRegistrations?: string,\n    debugInfo?: string\n  ) {\n    super(id);\n    this.continuationToken = continuationToken;\n    this.continuationTokenStatus = continuationTokenStatus;\n    this.offlineStorage = offlineStorage;\n    this.initRegistrations = initRegistrations;\n    this.debugInfo = debugInfo;\n    this.confirmedCapabilities = confirmedCapabilities;\n  }\n}\n\nexport { ContinuationTokenStatus, InitReply };\n","import type { MessageType } from \"../protocol\";\nimport { AbstractMessage } from \"./abstractmessage\";\n\nclass Update extends AbstractMessage {\n  public readonly method = \"update\" as MessageType;\n  public readonly token: string;\n\n  constructor(token: string) {\n    super();\n    this.token = token;\n  }\n}\n\nexport { Update };\n","import type { MessageType, Request } from \"../protocol\";\nimport { AbstractMessage } from \"./abstractmessage\";\n\nclass Message extends AbstractMessage {\n  public readonly method = \"message\" as MessageType;\n  public readonly active_grant: string;\n  public readonly payload_type: string;\n  public readonly http_request: Request;\n\n  constructor(grant: string, contentType: string, request: Request) {\n    super();\n\n    this.active_grant = grant;\n    this.payload_type = contentType;\n    this.http_request = request;\n  }\n}\n\nexport { Message };\n","import { MessageType, Header } from \"../protocol\";\nimport { AbstractMessage } from \"./abstractmessage\";\n\nexport type ReplyType = {\n  id: string;\n  method?: MessageType;\n  payload_type?: string;\n  status: {\n    status: string;\n    code: number;\n    errorCode?: number;\n    description?: string;\n  };\n  header: Header;\n  body: string;\n};\n\nclass Reply extends AbstractMessage {\n  public readonly method = \"reply\";\n  public readonly payload_type = \"application/json\";\n  public readonly status = { code: 200, status: \"OK\" };\n\n  public readonly header;\n  public readonly body;\n\n  constructor(id: string) {\n    super(id);\n  }\n}\n\nexport { Reply };\n","import type { MessageType } from \"../protocol\";\nimport { AbstractMessage } from \"./abstractmessage\";\n\nclass Close extends AbstractMessage {\n  public readonly method = \"close\" as MessageType;\n\n  constructor() {\n    super();\n  }\n}\n\nexport { Close };\n","import { MessageType } from \"../protocol\";\nimport { AbstractMessage } from \"./abstractmessage\";\n\nclass TelemetryEvent {\n  constructor(\n    readonly start: number, // relative to event send time\n    readonly end: number, // relative to event send time\n    readonly title: string,\n    readonly details: string,\n    readonly id?: string, // optional, default will be random assigned by backend\n    readonly type?: string\n  ) {} // optional, default will be \"SDK\" assigned by backend\n}\n\nclass Telemetry extends AbstractMessage {\n  public readonly method = \"telemetry.v1\" as MessageType;\n  public events: TelemetryEvent[];\n\n  constructor(events: TelemetryEvent[]) {\n    super();\n    this.events = events;\n  }\n}\n\nexport { Telemetry, TelemetryEvent };\n","import type { Header } from \"./protocol/protocol\";\nimport { log } from \"./logger\";\n\nexport type ParsedMessageType = {\n  method: string;\n  header: Header;\n  payload: string;\n};\n\nfunction byteLength(s: string): number {\n  const escstr = encodeURIComponent(s);\n  const binstr = escstr.replace(/%([0-9A-F]{2})/g, (match, p1) =>\n    String.fromCharCode(Number(\"0x\" + p1))\n  );\n  return binstr.length;\n}\n\nfunction stringToUint8Array(s: string): Uint8Array {\n  const escstr = encodeURIComponent(s);\n  const binstr = escstr.replace(/%([0-9A-F]{2})/g, (match, p1) =>\n    String.fromCharCode(Number(\"0x\" + p1))\n  );\n  const ua = new Uint8Array(binstr.length);\n  Array.prototype.forEach.call(binstr, (ch, i) => {\n    ua[i] = ch.charCodeAt(0);\n  });\n  return ua;\n}\n\nfunction uint8ArrayToString(ua: Uint8Array): string {\n  const binstr = Array.prototype.map\n    .call(ua, (ch) => String.fromCharCode(ch))\n    .join(\"\");\n  const escstr = binstr.replace(/(.)/g, (m, p) => {\n    let code = p.charCodeAt(0).toString(16).toUpperCase();\n    if (code.length < 2) {\n      code = \"0\" + code;\n    }\n    return \"%\" + code;\n  });\n  return decodeURIComponent(escstr);\n}\n\nfunction getJsonObject(array: Uint8Array): Record<string, unknown> {\n  return JSON.parse(uint8ArrayToString(array));\n}\n\nfunction getMagic(buffer: Uint8Array) {\n  let strMagic = \"\";\n  let idx = 0;\n  for (; idx < buffer.length; ++idx) {\n    const chr = String.fromCharCode(buffer[idx]);\n    strMagic += chr;\n    if (chr === \"\\r\") {\n      idx += 2;\n      break;\n    }\n  }\n\n  const magics = strMagic.split(\" \");\n  return {\n    size: idx,\n    protocol: magics[0],\n    version: magics[1],\n    headerSize: Number(magics[2]),\n  };\n}\n\nclass Parser {\n  static parse(message: ArrayBufferLike): ParsedMessageType | null {\n    const fieldMargin = 2;\n\n    const dataView = new Uint8Array(message);\n    const magic = getMagic(dataView);\n    if (magic.protocol !== \"TWILSOCK\" || magic.version !== \"V3.0\") {\n      log.error(`unsupported protocol: ${magic.protocol} ver ${magic.version}`);\n      //throw new Error('Unsupported protocol');\n      //this.fsm.unsupportedProtocol();\n      return null;\n    }\n\n    let header;\n    try {\n      header = getJsonObject(\n        dataView.subarray(magic.size, magic.size + magic.headerSize)\n      );\n    } catch (e) {\n      log.error(\"failed to parse message header\", e, message);\n      //throw new Error('Failed to parse message');\n      //this.fsm.protocolError();\n      return null;\n    }\n\n    log.debug(\"message received: \", header.method);\n    log.trace(\"message received: \", header);\n\n    let payload;\n    if (header.payload_size > 0) {\n      const payloadOffset = fieldMargin + magic.size + magic.headerSize;\n      const payloadSize = header.payload_size;\n\n      if (\n        !header.hasOwnProperty(\"payload_type\") ||\n        header.payload_type.indexOf(\"application/json\") === 0\n      ) {\n        try {\n          payload = getJsonObject(\n            dataView.subarray(payloadOffset, payloadOffset + payloadSize)\n          );\n        } catch (e) {\n          log.error(\"failed to parse message body\", e, message);\n          //this.fsm.protocolError();\n          return null;\n        }\n      } else if (header.payload_type.indexOf(\"text/plain\") === 0) {\n        payload = uint8ArrayToString(\n          dataView.subarray(payloadOffset, payloadOffset + payloadSize)\n        );\n      }\n    }\n\n    return { method: header.method, header, payload };\n  }\n\n  static createPacket(\n    header: Partial<Header>,\n    payloadString = \"\"\n  ): ArrayBuffer {\n    header.payload_size = byteLength(payloadString); // eslint-disable-line camelcase\n\n    const headerString = JSON.stringify(header);\n    const magicString = \"TWILSOCK V3.0 \" + byteLength(headerString);\n\n    log.debug(\"send request:\", magicString + headerString + payloadString);\n\n    const message = stringToUint8Array(\n      magicString + \"\\r\\n\" + headerString + \"\\r\\n\" + payloadString\n    );\n    return message.buffer as ArrayBuffer;\n  }\n}\n\nexport { Parser };\n","class TwilsockError extends Error {\n  constructor(description: string) {\n    super(description);\n  }\n}\n\nexport { TwilsockError };\n","import { TwilsockError } from \"./twilsockerror\";\nimport type { ReplyType } from \"../protocol/messages/reply\";\n\nclass TwilsockReplyError extends TwilsockError {\n  public readonly reply: ReplyType;\n\n  constructor(description: string, reply: ReplyType) {\n    super(description);\n    this.reply = reply;\n  }\n}\n\nexport { TwilsockReplyError };\n","import { EventEmitter } from \"events\";\nimport { Retrier } from \"@twilio/operation-retrier\";\n\n/**\n * Retrier with backoff override capability\n */\ntype RetrierOptionsType = {\n  min: number;\n  max: number;\n  initial?: number;\n  maxAttemptsCount?: number;\n  maxAttemptsTime?: number;\n  randomness?: number;\n};\n\nclass BackoffRetrier extends EventEmitter {\n  private readonly options;\n  private newBackoff: number | null = null;\n  private usedBackoff: number | null = null;\n\n  private retrier: Retrier | null = null;\n\n  public get inProgress(): boolean {\n    return !!this.retrier;\n  }\n\n  constructor(options: RetrierOptionsType) {\n    super();\n    this.options = options ? { ...options } : {};\n  }\n\n  /**\n   * Should be called once per attempt series to start retrier.\n   */\n  public start(): void {\n    if (this.inProgress) {\n      throw new Error(\n        \"Already waiting for next attempt, call finishAttempt(success : boolean) to finish it\"\n      );\n    }\n    this.createRetrier();\n  }\n\n  /**\n   * Should be called to stop retrier entirely.\n   */\n  public stop(): void {\n    this.cleanRetrier();\n    this.newBackoff = null;\n    this.usedBackoff = null;\n  }\n\n  /**\n   * Modifies backoff for next attempt.\n   * Expected behavior:\n   * - If there was no backoff passed previously reschedulling next attempt to given backoff\n   * - If previous backoff was longer then ignoring this one.\n   * - If previous backoff was shorter then reschedulling with this one.\n   * With or without backoff retrier will keep growing normally.\n   * @param delay delay of next attempts in ms.\n   */\n  public modifyBackoff(delay: number): void {\n    this.newBackoff = delay;\n  }\n\n  /**\n   * Mark last emmited attempt as failed, initiating either next of fail if limits were hit.\n   */\n  public attemptFailed(): void {\n    if (!this.inProgress) {\n      throw new Error(\"No attempt is in progress\");\n    }\n\n    if (this.newBackoff) {\n      const shouldUseNewBackoff =\n        !this.usedBackoff || this.usedBackoff < this.newBackoff;\n      if (shouldUseNewBackoff) {\n        this.createRetrier();\n      } else {\n        this.retrier?.failed(new Error());\n      }\n    } else {\n      this.retrier?.failed(new Error());\n    }\n  }\n\n  public cancel(): void {\n    this.retrier?.cancel();\n  }\n\n  private cleanRetrier(): void {\n    this.retrier?.removeAllListeners();\n    this.retrier?.cancel();\n    this.retrier = null;\n  }\n\n  private getRetryPolicy(): RetrierOptionsType {\n    const clone = { ...this.options };\n\n    if (this.newBackoff) {\n      clone.min = this.newBackoff;\n      clone.max =\n        this.options.max && this.options.max > this.newBackoff\n          ? this.options.max\n          : this.newBackoff;\n    }\n\n    // As we're always skipping first attempt we should add one extra if limit is present\n    clone.maxAttemptsCount = this.options.maxAttemptsCount\n      ? this.options.maxAttemptsCount + 1\n      : undefined;\n\n    return clone;\n  }\n\n  private createRetrier(): void {\n    this.cleanRetrier();\n    const retryPolicy = this.getRetryPolicy();\n    this.retrier = new Retrier(retryPolicy);\n\n    this.retrier.once(\"attempt\", () => {\n      this.retrier?.on(\"attempt\", () => this.emit(\"attempt\"));\n      this.retrier?.failed(new Error(\"Skipping first attempt\"));\n    });\n\n    this.retrier.on(\"failed\", (err) => this.emit(\"failed\", err));\n\n    this.usedBackoff = this.newBackoff;\n    this.newBackoff = null;\n\n    this.retrier.start();\n    // .catch(err => {});\n  }\n}\n\nexport { BackoffRetrier };\n","import { EventEmitter } from \"events\";\nimport * as StateMachine from \"javascript-state-machine\";\nimport { Configuration } from \"./configuration\";\nimport { log } from \"./logger\";\nimport { ConnectionState } from \"./client\";\nimport type { Header } from \"./protocol/protocol\";\nimport * as Messages from \"./protocol/messages\";\nimport { Parser } from \"./parser\";\nimport { PacketInterface } from \"./packetinterface\";\nimport { WebSocketChannel } from \"./websocketchannel\";\nimport { TwilsockReplyError } from \"./error/twilsockreplyerror\";\nimport { BackoffRetrier } from \"./backoffretrier\";\nimport type { ReplyType } from \"./protocol/messages/reply\";\n\nconst DISCONNECTING_TIMEOUT = 3000;\n\n// Wraps asynchronous rescheduling\n// Just makes it simpler to find these hacks over the code\n// Currently there's exactly one instance of this in closeSocket()\nfunction trampoline(f: () => void) {\n  setTimeout(f, 0);\n}\n\nclass Response {}\n\n/**\n * Twilsock channel level protocol implementation\n */\nclass TwilsockChannel extends EventEmitter {\n  private readonly config: Configuration;\n\n  private readonly fsm: StateMachine;\n\n  private disconnectingTimer: ReturnType<typeof setTimeout> | null = null;\n\n  private disconnectedPromiseResolve: (() => void) | null = null;\n  private retrier: BackoffRetrier;\n\n  private websocket: WebSocketChannel;\n  private transport: PacketInterface;\n\n  private readonly terminalStates: Array<string> = [\"disconnected\", \"rejected\"];\n  private lastEmittedState;\n  private readonly tokenExpiredSasCode = 20104;\n\n  private terminationReason = \"Connection is not initialized\";\n\n  constructor(\n    websocket: WebSocketChannel,\n    transport: PacketInterface,\n    config: Configuration\n  ) {\n    super();\n\n    this.websocket = websocket;\n    this.websocket.on(\"connected\", () => this.fsm.socketConnected());\n    this.websocket.on(\"disconnected\", () => this.fsm.socketClosed());\n    this.websocket.on(\"message\", (message) => this.onIncomingMessage(message));\n    this.websocket.on(\"socketError\", (e) =>\n      this.emit(\"connectionError\", {\n        terminal: false,\n        message: `Socket error: ${e.message}`,\n        httpStatusCode: null,\n        errorCode: null,\n      })\n    );\n\n    this.transport = transport;\n    this.config = config;\n\n    this.retrier = new BackoffRetrier(config.retryPolicy);\n    this.retrier.on(\"attempt\", () => this.retry());\n    this.retrier.on(\"failed\", (err) => {\n      log.warn(`Retrying failed: ${err.message}`);\n      this.disconnect();\n    });\n\n    if (\n      typeof window !== \"undefined\" &&\n      typeof window.addEventListener !== \"undefined\"\n    ) {\n      window.addEventListener(\"online\", () => {\n        log.debug(\"Browser reported connectivity state: online\");\n        this.resetBackoff();\n        this.fsm.systemOnline();\n      });\n\n      window.addEventListener(\"offline\", () => {\n        log.debug(\"Browser reported connectivity state: offline\");\n        this.websocket.close();\n        this.fsm.socketClosed();\n      });\n    }\n\n    // We have to use a factory function in here because using the default\n    // StateMachine constructor would cause an error for the consumers of the\n    // rollup bundles. This is a quirk unique to the javascript-state-machine\n    // library.\n\n    const TwilsockStateMachine: StateMachine = StateMachine.factory({\n      init: \"disconnected\",\n      transitions: [\n        {\n          name: \"userConnect\",\n          from: [\"disconnected\", \"rejected\"],\n          to: \"connecting\",\n        },\n        { name: \"userConnect\", from: [\"connecting\", \"connected\"] }, // ignore event\n        {\n          name: \"userDisconnect\",\n          from: [\n            \"connecting\",\n            \"initialising\",\n            \"connected\",\n            \"updating\",\n            \"retrying\",\n            \"rejected\",\n            \"waitSocketClosed\",\n            \"waitOffloadSocketClosed\",\n          ],\n          to: \"disconnecting\",\n        },\n        { name: \"userRetry\", from: [\"retrying\"], to: \"connecting\" },\n        { name: \"socketConnected\", from: [\"connecting\"], to: \"initialising\" },\n        {\n          name: \"socketClosed\",\n          from: [\n            \"connecting\",\n            \"initialising\",\n            \"connected\",\n            \"updating\",\n            \"error\",\n            \"waitOffloadSocketClosed\",\n          ],\n          to: \"retrying\",\n        },\n        { name: \"socketClosed\", from: [\"disconnecting\"], to: \"disconnected\" },\n        {\n          name: \"socketClosed\",\n          from: [\"waitSocketClosed\"],\n          to: \"disconnected\",\n        },\n        { name: \"socketClosed\", from: [\"rejected\"], to: \"rejected\" },\n        { name: \"initSuccess\", from: [\"initialising\"], to: \"connected\" },\n        { name: \"initError\", from: [\"initialising\"], to: \"error\" },\n        {\n          name: \"tokenRejected\",\n          from: [\"initialising\", \"updating\"],\n          to: \"rejected\",\n        },\n        {\n          name: \"protocolError\",\n          from: [\"initialising\", \"connected\", \"updating\"],\n          to: \"error\",\n        },\n        {\n          name: \"receiveClose\",\n          from: [\"initialising\", \"connected\", \"updating\"],\n          to: \"waitSocketClosed\",\n        },\n        {\n          name: \"receiveOffload\",\n          from: [\"initialising\", \"connected\", \"updating\"],\n          to: \"waitOffloadSocketClosed\",\n        },\n        {\n          name: \"unsupportedProtocol\",\n          from: [\"initialising\", \"connected\", \"updating\"],\n          to: \"unsupported\",\n        },\n        {\n          name: \"receiveFatalClose\",\n          from: [\"initialising\", \"connected\", \"updating\"],\n          to: \"unsupported\",\n        },\n        {\n          name: \"userUpdateToken\",\n          from: [\"disconnected\", \"rejected\", \"connecting\", \"retrying\"],\n          to: \"connecting\",\n        },\n        { name: \"userUpdateToken\", from: [\"connected\"], to: \"updating\" },\n        { name: \"updateSuccess\", from: [\"updating\"], to: \"connected\" },\n        { name: \"updateError\", from: [\"updating\"], to: \"error\" },\n        { name: \"userSend\", from: [\"connected\"], to: \"connected\" },\n        { name: \"systemOnline\", from: [\"retrying\"], to: \"connecting\" },\n      ],\n      methods: {\n        onConnecting: () => {\n          this.setupSocket();\n          this.emit(\"connecting\");\n        },\n        onEnterInitialising: () => {\n          this.sendInit();\n        },\n        onLeaveInitialising: () => {\n          this.cancelInit();\n        },\n        onEnterUpdating: () => {\n          this.sendUpdate();\n        },\n        onLeaveUpdating: () => {\n          this.cancelUpdate();\n        },\n        onEnterRetrying: () => {\n          this.initRetry();\n          this.emit(\"connecting\");\n        },\n        onEnterConnected: () => {\n          this.resetBackoff();\n          this.onConnected();\n        },\n        onUserUpdateToken: () => {\n          this.resetBackoff();\n        },\n        onTokenRejected: () => {\n          this.resetBackoff();\n          this.closeSocket(true);\n          this.finalizeSocket();\n        },\n        onUserDisconnect: () => {\n          this.closeSocket(true);\n        },\n        onEnterDisconnecting: () => {\n          this.startDisconnectTimer();\n        },\n        onLeaveDisconnecting: () => {\n          this.cancelDisconnectTimer();\n        },\n        onEnterWaitSocketClosed: () => {\n          this.startDisconnectTimer();\n        },\n        onLeaveWaitSocketClosed: () => {\n          this.cancelDisconnectTimer();\n        },\n        onEnterWaitOffloadSocketClosed: () => {\n          this.startDisconnectTimer();\n        },\n        onLeaveWaitOffloadSocketClosed: () => {\n          this.cancelDisconnectTimer();\n        },\n        onDisconnected: () => {\n          this.resetBackoff();\n          this.finalizeSocket();\n        },\n        onReceiveClose: () => {\n          this.onCloseReceived();\n        },\n        onReceiveOffload: (event, args) => {\n          log.debug(\"onreceiveoffload: \", args);\n          this.modifyBackoff(args.body);\n          this.onCloseReceived();\n        },\n        onUnsupported: () => {\n          this.closeSocket(true);\n          this.finalizeSocket();\n        },\n        onError: (lifecycle, graceful: boolean) => {\n          this.closeSocket(graceful);\n          this.finalizeSocket();\n        },\n        onEnterState: (event) => {\n          if (event.from !== \"none\") {\n            this.changeState(event);\n          }\n        },\n        onInvalidTransition: (transition, from, to) => {\n          log.warn(\"FSM: unexpected transition\", from, to);\n        },\n      },\n    });\n    this.fsm = new TwilsockStateMachine();\n  }\n\n  private changeState(event: {\n    transition: unknown;\n    from: string;\n    to: string;\n  }): void {\n    log.debug(`FSM: ${event.transition}: ${event.from} --> ${event.to}`);\n\n    if (this.lastEmittedState !== this.state) {\n      this.lastEmittedState = this.state;\n      this.emit(\"stateChanged\", this.state);\n    }\n  }\n\n  private resetBackoff(): void {\n    log.trace(\"resetBackoff\");\n    this.retrier.stop();\n  }\n\n  private modifyBackoff(body): void {\n    log.trace(\"modifyBackoff\", body);\n\n    const backoffPolicy = body ? body.backoff_policy : null;\n\n    if (backoffPolicy && typeof backoffPolicy.reconnect_min_ms === \"number\") {\n      this.retrier.modifyBackoff(backoffPolicy.reconnect_min_ms);\n    }\n  }\n\n  private startDisconnectTimer(): void {\n    log.trace(\"startDisconnectTimer\");\n\n    if (this.disconnectingTimer) {\n      clearTimeout(this.disconnectingTimer);\n      this.disconnectingTimer = null;\n    }\n\n    this.disconnectingTimer = setTimeout(() => {\n      log.debug(\"disconnecting is timed out\");\n      this.closeSocket(true);\n    }, DISCONNECTING_TIMEOUT);\n  }\n\n  private cancelDisconnectTimer(): void {\n    log.trace(\"cancelDisconnectTimer\");\n\n    if (this.disconnectingTimer) {\n      clearTimeout(this.disconnectingTimer);\n      this.disconnectingTimer = null;\n    }\n  }\n\n  public get isConnected(): boolean {\n    return this.state === \"connected\" && this.websocket.isConnected;\n  }\n\n  public get state(): ConnectionState {\n    switch (this.fsm.state) {\n      case \"connecting\":\n      case \"initialising\":\n      case \"retrying\":\n      case \"error\":\n        return \"connecting\";\n      case \"updating\":\n      case \"connected\":\n        return \"connected\";\n      case \"rejected\":\n        return \"denied\";\n      case \"disconnecting\":\n      case \"waitSocketClosed\":\n      case \"waitOffloadSocketClosed\":\n        return \"disconnecting\";\n      case \"disconnected\":\n      default:\n        return \"disconnected\";\n    }\n  }\n\n  private initRetry() {\n    log.debug(\"initRetry\");\n    if (this.retrier.inProgress) {\n      this.retrier.attemptFailed();\n    } else {\n      this.retrier.start();\n    }\n  }\n\n  private retry(): void {\n    if (this.fsm.state != \"connecting\") {\n      log.trace(\"retry\");\n      this.websocket.close();\n      this.fsm.userRetry();\n    } else {\n      log.trace(\"can\\t retry as already connecting\");\n    }\n  }\n\n  private onConnected(): void {\n    this.emit(\"connected\");\n  }\n\n  private finalizeSocket(): void {\n    log.trace(\"finalizeSocket\");\n\n    this.websocket.close();\n    this.emit(\"disconnected\");\n\n    if (this.disconnectedPromiseResolve) {\n      this.disconnectedPromiseResolve();\n      this.disconnectedPromiseResolve = null;\n    }\n  }\n\n  private setupSocket(): void {\n    log.trace(\"setupSocket:\", this.config.token);\n    this.emit(\"beforeConnect\"); // This is used by client to record startup telemetry event\n    this.websocket.connect();\n  }\n\n  private onIncomingMessage(message: ArrayBuffer): void {\n    const parsedMessage = Parser.parse(message);\n    if (!parsedMessage) {\n      return;\n    }\n    const { method, header, payload } = parsedMessage;\n\n    if (method !== \"reply\") {\n      this.confirmReceiving(header);\n    }\n\n    if (method === \"notification\") {\n      this.emit(\"message\", header.message_type, payload);\n    } else if (header.method === \"reply\") {\n      this.transport.processReply({\n        id: header.id,\n        status: header.status,\n        header: header,\n        body: payload,\n      });\n    } else if (header.method === \"client_update\") {\n      if (header.client_update_type === \"token_about_to_expire\") {\n        this.emit(\"tokenAboutToExpire\");\n      }\n    } else if (header.method === \"close\") {\n      if (header.status.code === 308) {\n        log.debug(\"Connection has been offloaded\");\n        this.fsm.receiveOffload({\n          status: header.status.status,\n          body: payload,\n        });\n      } else if (header.status.code === 406) {\n        // Not acceptable message\n        const message = `Server closed connection because can't parse protocol: ${JSON.stringify(\n          header.status\n        )}`;\n        this.emitReplyConnectionError(message, header, true);\n        log.error(message);\n        this.fsm.receiveFatalClose();\n      } else if (header.status.code === 417) {\n        // Protocol error\n        log.error(\n          `Server closed connection because can't parse client reply: ${JSON.stringify(\n            header.status\n          )}`\n        );\n        this.fsm.receiveFatalClose(header.status.status);\n      } else if (header.status.code === 410) {\n        // Expired token\n        log.warn(`Server closed connection: ${JSON.stringify(header.status)}`);\n        this.fsm.receiveClose(header.status.status);\n        this.emit(\"tokenExpired\");\n      } else if (header.status.code === 401) {\n        // Authentication fail\n        log.error(`Server closed connection: ${JSON.stringify(header.status)}`);\n        this.fsm.receiveClose(header.status.status);\n      } else {\n        log.warn(\"unexpected message: \", header.status);\n        // Try to reconnect\n        this.fsm.receiveOffload({ status: header.status.status, body: null });\n      }\n    }\n  }\n\n  private async sendInit(): Promise<void> {\n    log.trace(\"sendInit\");\n\n    try {\n      this.emit(\"beforeSendInit\"); // This is used by client to record startup telemetry event\n      const reply = await this.transport.sendInit();\n      this.config.updateContinuationToken(reply.continuationToken);\n      this.config.confirmedCapabilities = reply.confirmedCapabilities;\n      this.fsm.initSuccess(reply);\n      this.emit(\"initialized\", reply);\n      this.emit(\"tokenUpdated\");\n    } catch (ex) {\n      if (ex instanceof TwilsockReplyError) {\n        let isTerminalError = false;\n\n        log.warn(`Init rejected by server: ${JSON.stringify(ex.reply.status)}`);\n        this.emit(\"sendInitFailed\"); // This is used by client to record startup telemetry event\n        // @todo emit telemetry from inside \"if\" below for more granularity...\n\n        if (ex.reply.status.code === 401 || ex.reply.status.code === 403) {\n          isTerminalError = true;\n          this.fsm.tokenRejected(ex.reply.status);\n          if (ex.reply.status.errorCode === this.tokenExpiredSasCode) {\n            this.emit(\"tokenExpired\");\n          }\n        } else if (ex.reply.status.code === 429) {\n          this.modifyBackoff(ex.reply.body);\n          this.fsm.initError(true);\n        } else if (ex.reply.status.code === 500) {\n          this.fsm.initError(false);\n        } else {\n          this.fsm.initError(true);\n        }\n\n        this.emitReplyConnectionError(ex.message, ex.reply, isTerminalError);\n      } else {\n        this.terminationReason = ex.message;\n        this.emit(\"connectionError\", {\n          terminal: true,\n          message: `Unknown error during connection initialisation: ${\n            ex.message\n          }\\n${JSON.stringify(ex, null, 2)}`,\n          httpStatusCode: null,\n          errorCode: null,\n        });\n        this.fsm.initError(true);\n      }\n      this.emit(\"tokenUpdated\", ex);\n    }\n  }\n\n  private async sendUpdate(): Promise<void> {\n    log.trace(\"sendUpdate\");\n\n    const message = new Messages.Update(this.config.token);\n\n    try {\n      const reply = await this.transport.sendWithReply(message);\n      this.fsm.updateSuccess(reply.body);\n      this.emit(\"tokenUpdated\");\n    } catch (ex) {\n      if (ex instanceof TwilsockReplyError) {\n        let isTerminalError = false;\n        log.warn(\n          `Token update rejected by server: ${JSON.stringify(ex.reply.status)}`\n        );\n        if (ex.reply.status.code === 401 || ex.reply.status.code === 403) {\n          isTerminalError = true;\n          this.fsm.tokenRejected(ex.reply.status);\n          if (ex.reply.status.errorCode === this.tokenExpiredSasCode) {\n            this.emit(\"tokenExpired\");\n          }\n        } else if (ex.reply.status.code === 429) {\n          this.modifyBackoff(ex.reply.body);\n          this.fsm.updateError(ex.reply.status);\n        } else {\n          this.fsm.updateError(ex.reply.status);\n        }\n        this.emitReplyConnectionError(ex.message, ex.reply, isTerminalError);\n      } else {\n        this.emit(\"error\", false, ex.message, null, null);\n        this.fsm.updateError(ex);\n      }\n      this.emit(\"tokenUpdated\", ex);\n    }\n  }\n\n  private emitReplyConnectionError(\n    message: string,\n    header: Header | ReplyType,\n    terminal: boolean\n  ) {\n    const description =\n      header.status && header.status.description\n        ? header.status.description\n        : message;\n\n    const httpStatusCode = header.status.code;\n\n    const errorCode =\n      header.status && header.status.errorCode ? header.status.errorCode : null;\n\n    if (terminal) {\n      this.terminationReason = description;\n    }\n\n    this.emit(\"connectionError\", {\n      terminal: terminal,\n      message: `Connection error: ${description}`,\n      httpStatusCode: httpStatusCode,\n      errorCode: errorCode,\n    });\n  }\n\n  private cancelInit(): void {\n    log.trace(\"cancelInit\");\n    // TODO: implement\n  }\n\n  private cancelUpdate(): void {\n    log.trace(\"cancelUpdate\");\n    // TODO: implement\n  }\n\n  /**\n   * Should be called for each message to confirm it received\n   */\n\n  private confirmReceiving(messageHeader: Header) {\n    log.trace(\"confirmReceiving\");\n\n    try {\n      //@todo send telemetry events AnyEvents\n      this.transport.send(new Messages.Reply(messageHeader.id));\n    } catch (e) {\n      log.debug(\"failed to confirm packet receiving\", e);\n    }\n  }\n\n  /**\n   * Shutdown connection\n   */\n  private closeSocket(graceful: boolean): void {\n    log.trace(`closeSocket (graceful: ${graceful})`);\n\n    if (graceful && this.transport.isConnected) {\n      this.transport.sendClose();\n    }\n    this.websocket.close();\n\n    trampoline(() => this.fsm.socketClosed());\n  }\n\n  /**\n   * Initiate the twilsock connection\n   * If already connected, it does nothing\n   */\n  connect(): void {\n    log.trace(\"connect\");\n    this.fsm.userConnect();\n  }\n\n  /**\n   * Close twilsock connection\n   * If already disconnected, it does nothing\n   */\n  disconnect(): Promise<void> {\n    log.trace(\"disconnect\");\n\n    if (this.fsm.is(\"disconnected\")) {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve) => {\n      this.disconnectedPromiseResolve = resolve;\n      this.fsm.userDisconnect();\n    });\n  }\n\n  /**\n   * Update fpa token for twilsock connection\n   */\n  public updateToken(token: string): Promise<void> {\n    log.trace(\"updateToken:\", token);\n\n    return new Promise((resolve, reject) => {\n      this.once(\"tokenUpdated\", (e) => {\n        if (e) {\n          reject(e);\n        } else {\n          resolve();\n        }\n      });\n\n      this.fsm.userUpdateToken();\n    });\n  }\n\n  public get isTerminalState(): boolean {\n    return this.terminalStates.indexOf(this.fsm.state) !== -1;\n  }\n\n  public get getTerminationReason(): string {\n    return this.terminationReason;\n  }\n\n  private onCloseReceived(): void {\n    this.websocket.close();\n  }\n}\n\nexport { Response, TwilsockChannel };\n","import * as platform from \"platform\";\n\nclass Metadata {\n  public static getMetadata(options: {\n    clientMetadata: Metadata;\n  }): Record<string, unknown> {\n    const overrides =\n      options && options.clientMetadata ? options.clientMetadata : {};\n\n    const fieldNames = [\n      \"ver\",\n      \"env\",\n      \"envv\",\n      \"os\",\n      \"osv\",\n      \"osa\",\n      \"type\",\n      \"sdk\",\n      \"sdkv\",\n      \"dev\",\n      \"devv\",\n      \"devt\",\n      \"app\",\n      \"appv\",\n    ];\n    const defaults = {\n      env: platform.name ?? \"unknown\",\n      envv: platform.version ?? \"unknown\",\n      os: platform.os?.family ?? \"unknown\",\n      osv: platform.os?.version ?? \"unknown\",\n      osa: platform.os?.architecture ?? \"unknown\",\n      sdk: \"js-default\",\n    };\n\n    const finalClientMetadata = {};\n    fieldNames\n      .filter((key) => key in overrides || key in defaults)\n      .forEach(\n        (key) =>\n          (finalClientMetadata[key] =\n            key in overrides ? overrides[key] : defaults[key])\n      );\n\n    return finalClientMetadata;\n  }\n}\n\nexport { Metadata };\n","import { log } from \"./logger\";\n\nimport { v4 as uuid } from \"uuid\";\n\nimport { TwilsockError } from \"./error/twilsockerror\";\nimport { TwilsockReplyError } from \"./error/twilsockreplyerror\";\nimport { Configuration } from \"./configuration\";\nimport { Parser } from \"./parser\";\n\nimport * as Messages from \"./protocol/messages\";\n\nimport { Metadata } from \"./metadata\";\n\nconst REQUEST_TIMEOUT = 30000;\n\nfunction isHttpSuccess(code: number): boolean {\n  return code >= 200 && code < 300;\n}\n\n/**\n * Makes sure that body is properly stringified\n */\nfunction preparePayload(payload): string {\n  switch (typeof payload) {\n    case \"undefined\":\n      return \"\";\n    case \"object\":\n      return JSON.stringify(payload);\n    default:\n      return payload;\n  }\n}\n\ninterface PacketRequest {\n  timeout: ReturnType<typeof setTimeout>;\n  reject: (reason?: TwilsockReplyError | TwilsockError) => void;\n  resolve: (value?: unknown | PromiseLike<unknown>) => void;\n}\n\ninterface PacketResponse {\n  id: string;\n  header: {\n    continuation_token: string;\n    continuation_token_status?: ContinuationTokenStatus;\n    offline_storage: string;\n    init_registrations: string;\n    debug_info: string;\n    capabilities: string[];\n    http_status: {\n      status: string;\n      code: number;\n      errorCode?: string;\n    };\n    http_headers: Headers;\n  };\n  body: Context;\n}\n\nimport type { Headers, Header, Context } from \"./protocol/protocol\";\nimport { Channel } from \"./interfaces/channel\";\nimport { ContinuationTokenStatus } from \"./protocol/messages/initReply\";\nimport { ReplyType } from \"./protocol/messages/reply\";\n\nclass PacketInterface {\n  private readonly config: Configuration;\n  private readonly activeRequests: Map<string, PacketRequest>;\n  private readonly channel: Channel;\n\n  constructor(channel: Channel, config: Configuration) {\n    this.config = config;\n    this.activeRequests = new Map<string, PacketRequest>();\n\n    this.channel = channel;\n    this.channel.on(\"reply\", (reply) => this.processReply(reply));\n    this.channel.on(\"disconnected\", () => {\n      this.activeRequests.forEach((descriptor) => {\n        clearTimeout(descriptor.timeout);\n        descriptor.reject(new TwilsockError(\"disconnected\"));\n      });\n      this.activeRequests.clear();\n    });\n  }\n\n  public get isConnected(): boolean {\n    return this.channel.isConnected;\n  }\n\n  public processReply(reply: ReplyType): void {\n    const request = this.activeRequests.get(reply.id);\n    if (request) {\n      clearTimeout(request.timeout);\n      this.activeRequests.delete(reply.id);\n\n      if (!isHttpSuccess(reply.status.code)) {\n        request.reject(\n          new TwilsockReplyError(\n            \"Transport failure: \" + reply.status.status,\n            reply\n          )\n        );\n        log.trace(\"message rejected\");\n      } else {\n        request.resolve(reply);\n      }\n    }\n  }\n\n  private storeRequest(id: string, resolve, reject): void {\n    const requestDescriptor = {\n      resolve: resolve,\n      reject: reject,\n      timeout: setTimeout(() => {\n        log.trace(\"request\", id, \"is timed out\");\n        reject(new TwilsockError(\"Twilsock: request timeout: \" + id));\n      }, REQUEST_TIMEOUT) as ReturnType<typeof setTimeout>,\n    };\n    this.activeRequests.set(id, requestDescriptor);\n  }\n\n  public shutdown(): void {\n    this.activeRequests.forEach((descriptor) => {\n      clearTimeout(descriptor.timeout);\n      descriptor.reject(\n        new TwilsockError(\"Twilsock: request cancelled by user\")\n      );\n    });\n    this.activeRequests.clear();\n  }\n\n  public async sendInit(): Promise<Messages.InitReply> {\n    log.trace(\"sendInit\");\n\n    const metadata = Metadata.getMetadata(this.config);\n    const message = new Messages.Init(\n      this.config.token,\n      this.config.continuationToken,\n      metadata,\n      this.config.initRegistrations,\n      this.config.tweaks\n    );\n\n    const response = await this.sendWithReply(message);\n    return new Messages.InitReply(\n      response.id,\n      response.header.continuation_token,\n      new Set<string>(response.header.capabilities),\n      response.header.continuation_token_status,\n      response.header.offline_storage,\n      response.header.init_registrations,\n      response.header.debug_info\n    );\n  }\n\n  public sendClose(): void {\n    const message = new Messages.Close();\n    //@todo send telemetry AnyEventsIncludingUnfinished\n    this.send(message);\n  }\n\n  public sendWithReply(\n    header: Partial<Header>,\n    payload?: Context\n  ): Promise<PacketResponse> {\n    return new Promise((resolve, reject) => {\n      const id = this.send(header, payload);\n      this.storeRequest(id, resolve, reject);\n    });\n  }\n\n  public send(header: Partial<Header>, payload?: Context): string {\n    header.id = header.id || `TM${uuid()}`;\n    const message = Parser.createPacket(header, preparePayload(payload));\n\n    try {\n      this.channel.send(message);\n      return header.id;\n    } catch (e) {\n      log.debug(\"failed to send \", header, e);\n      log.trace(e.stack);\n      throw e;\n    }\n  }\n}\n\nexport { Channel, PacketResponse, PacketInterface };\n","import { Channel } from \"./interfaces/channel\";\nimport { EventEmitter } from \"events\";\nimport { log } from \"./logger\";\n\nclass WebSocketChannel extends EventEmitter implements Channel {\n  private readonly WebSocket;\n  private socket: WebSocket | null = null;\n\n  constructor(private readonly url: string) {\n    super();\n    this.url = url;\n    this.WebSocket =\n      global[\"WebSocket\"] || global[\"MozWebSocket\"] || require(\"ws\");\n  }\n\n  public get isConnected(): boolean {\n    return !!this.socket && this.socket.readyState === 1;\n  }\n\n  public connect(): void {\n    log.trace(\"connecting to socket\");\n\n    let socket;\n\n    try {\n      socket = new this.WebSocket(this.url);\n    } catch (e) {\n      log.debug(`Socket error: ${this.url}`);\n      this.emit(\"socketError\", e);\n      return;\n    }\n\n    socket.binaryType = \"arraybuffer\";\n\n    socket.onopen = () => {\n      log.debug(`socket opened ${this.url}`);\n      this.emit(\"connected\");\n    };\n\n    socket.onclose = (e) => {\n      log.debug(\"socket closed\", e);\n      this.emit(\"disconnected\", e);\n    };\n\n    socket.onerror = (e) => {\n      log.debug(\"Socket error:\", e);\n      this.emit(\"socketError\", e);\n    };\n\n    socket.onmessage = (message: MessageEvent) => {\n      this.emit(\"message\", message.data);\n    };\n\n    this.socket = socket;\n  }\n\n  public send(message: ArrayBuffer): void | null {\n    return this.socket && this.socket.send(message);\n  }\n\n  close(): void {\n    log.trace(\"closing socket\");\n\n    if (this.socket) {\n      this.socket.onopen = null;\n      this.socket.onclose = null;\n      this.socket.onerror = null;\n      this.socket.onmessage = null;\n      try {\n        this.socket.close();\n      } finally {\n      }\n    }\n  }\n}\n\nexport { WebSocketChannel };\n","import { log } from \"../logger\";\nimport { EventEmitter } from \"events\";\nimport { v4 as uuid } from \"uuid\";\nimport type { Context, MessageType } from \"../protocol/protocol\";\nimport { PacketInterface } from \"../packetinterface\";\nimport { TwilsockError } from \"../error/twilsockerror\";\n\n/**\n * Registrations module handles all operations with registration contexts through twilsock.\n * Main role: it automatically refreshes all registrations after reconnect.\n */\nclass Registrations extends EventEmitter {\n  private readonly registrations: Map<string, Context>;\n  private readonly registrationsInProgress: Map<string, Set<unknown>>;\n\n  constructor(private readonly transport: PacketInterface) {\n    super();\n\n    this.registrations = new Map();\n    this.registrationsInProgress = new Map();\n  }\n\n  private async putNotificationContext(\n    contextId: string,\n    context: Context\n  ): Promise<void> {\n    const header = {\n      method: \"put_notification_ctx\" as MessageType,\n      notification_ctx_id: contextId,\n    };\n    await this.transport.sendWithReply(header, context);\n  }\n\n  private async deleteNotificationContext(contextId: string): Promise<void> {\n    const message = {\n      method: \"delete_notification_ctx\" as MessageType,\n      notification_ctx_id: contextId,\n    };\n    await this.transport.sendWithReply(message);\n  }\n\n  private async updateRegistration(contextId: string, context: Context) {\n    log.debug(\"update registration for context\", contextId);\n\n    let registrationAttempts = this.registrationsInProgress.get(contextId);\n    if (!registrationAttempts) {\n      registrationAttempts = new Set();\n      this.registrationsInProgress.set(contextId, registrationAttempts);\n    }\n\n    const attemptId = uuid();\n    registrationAttempts.add(attemptId);\n\n    try {\n      await this.putNotificationContext(contextId, context);\n\n      log.debug(\"registration attempt succeeded for context\", context);\n      registrationAttempts.delete(attemptId);\n      if (registrationAttempts.size === 0) {\n        this.registrationsInProgress.delete(contextId);\n        this.emit(\"registered\", contextId);\n      }\n    } catch (err) {\n      log.warn(\"registration attempt failed for context\", context);\n      log.debug(err);\n\n      registrationAttempts.delete(attemptId);\n      if (registrationAttempts.size === 0) {\n        this.registrationsInProgress.delete(contextId);\n        this.emit(\"registrationFailed\", contextId, err);\n      }\n    }\n  }\n\n  public async updateRegistrations(): Promise<void> {\n    log.trace(`refreshing ${this.registrations.size} registrations`);\n    const promises: Promise<void>[] = [];\n    this.registrations.forEach((context: Context, id) => {\n      promises.push(this.updateRegistration(id, context));\n    });\n    await Promise.all(promises);\n  }\n\n  public async setNotificationsContext(\n    contextId: string,\n    context: Context\n  ): Promise<void> {\n    if (!contextId || !context) {\n      throw new TwilsockError(\"Invalid arguments provided\");\n    }\n\n    this.registrations.set(contextId, context);\n    return await this.updateRegistration(contextId, context);\n  }\n\n  public async removeNotificationsContext(contextId: string): Promise<void> {\n    if (!this.registrations.has(contextId)) {\n      return;\n    }\n\n    await this.deleteNotificationContext(contextId);\n    if (this.transport.isConnected) {\n      this.registrations.delete(contextId);\n    }\n  }\n}\n\nexport { Registrations };\n","import { TwilsockError } from \"./twilsockerror\";\nimport type { Context } from \"../protocol/protocol\";\n\nclass TwilsockUpstreamError extends TwilsockError {\n  private readonly status: number;\n  private readonly description: string;\n  private readonly body?: Context;\n\n  constructor(status: number, description: string, body?: Context) {\n    super(description);\n    this.status = status;\n    this.description = description;\n    this.body = body;\n  }\n}\n\nexport { TwilsockUpstreamError };\n","import { TwilsockError } from \"./twilsockerror\";\n\nclass TransportUnavailableError extends TwilsockError {\n  constructor(description: string) {\n    super(description);\n  }\n}\n\nexport { TransportUnavailableError };\n","import { log } from \"../logger\";\nimport { Configuration } from \"../configuration\";\nimport { PacketInterface } from \"../packetinterface\";\nimport { TwilsockError } from \"../error/twilsockerror\";\nimport { TwilsockUpstreamError } from \"../error/twilsockupstreamerror\";\nimport { Headers, Result } from \"../interfaces/transport\";\nimport type {\n  Address,\n  Headers as ProtocolHeaders,\n  Context,\n  Request as ProtocolRequest,\n} from \"../protocol/protocol\";\nimport * as Messages from \"../protocol/messages\";\nimport { TransportUnavailableError } from \"../error/transportunavailableerror\";\nimport { TwilsockChannel } from \"../twilsock\";\nimport { TwilsockReplyError } from \"../error/twilsockreplyerror\";\nconst REQUEST_TIMEOUT = 20000;\n\ntype MessageType = {\n  to: Address;\n  headers: ProtocolHeaders;\n  body: Context;\n  grant?: string;\n};\n\nfunction isHttpSuccess(code: number): boolean {\n  return code >= 200 && code < 300;\n}\n\nfunction isHttpReply(packet): boolean {\n  return packet && packet.header && packet.header.http_status;\n}\n\ninterface Request {\n  message: MessageType;\n  timeout: ReturnType<typeof setTimeout>;\n  reject: (reason?: TwilsockReplyError | TwilsockError) => void;\n  resolve: (value: Result<Context> | PromiseLike<Result<Context>>) => void;\n  alreadyRejected: boolean;\n}\n\nfunction parseUri(uri: string) {\n  const match = uri.match(\n    /^(https?\\:)\\/\\/(([^:\\/?#]*)(?:\\:([0-9]+))?)(\\/[^?#]*)(\\?[^#]*|)(#.*|)$/\n  );\n  if (match) {\n    const uriStruct = {\n      protocol: match[1],\n      host: match[2],\n      hostname: match[3],\n      port: match[4],\n      pathname: match[5],\n      search: match[6],\n      hash: match[7],\n      params: {},\n    };\n\n    if (uriStruct.search.length > 0) {\n      const paramsString = uriStruct.search.substring(1);\n      uriStruct.params = paramsString\n        .split(\"&\")\n        .map((el) => el.split(\"=\"))\n        .reduce((prev, curr) => {\n          if (!prev.hasOwnProperty(curr[0])) {\n            prev[curr[0]] = curr[1];\n          } else if (Array.isArray(prev[curr[0]])) {\n            prev[curr[0]].push(curr[1]);\n          } else {\n            prev[curr[0]] = [prev[curr[0]], curr[1]];\n          }\n          return prev;\n        }, {});\n    }\n    return uriStruct;\n  }\n  throw new TwilsockError(\"Incorrect URI: \" + uri);\n}\n\nfunction twilsockAddress(method: string, uri: string): Address {\n  const parsedUri = parseUri(uri);\n  const to = {\n    method: method,\n    host: parsedUri.host,\n    path: parsedUri.pathname,\n  } as Address;\n  if (parsedUri.params) {\n    to.params = parsedUri.params;\n  }\n  return to;\n}\n\nfunction twilsockParams(\n  method: string,\n  uri: string,\n  headers: Headers,\n  body?,\n  grant?: string\n) {\n  return {\n    to: twilsockAddress(method, uri),\n    headers: headers,\n    body: body,\n    grant: grant,\n  };\n}\n\nclass Upstream {\n  private readonly config: Configuration;\n  private readonly transport: PacketInterface;\n  private readonly pendingMessages: Request[];\n  private readonly twilsock: TwilsockChannel;\n\n  constructor(\n    transport: PacketInterface,\n    twilsock: TwilsockChannel,\n    config: Configuration\n  ) {\n    this.config = config;\n    this.transport = transport;\n    this.pendingMessages = [];\n    this.twilsock = twilsock;\n  }\n\n  public saveMessage(message: MessageType): Promise<Result<Context>> {\n    return new Promise<Result<Context>>((resolve, reject) => {\n      const requestDescriptor = {\n        message,\n        resolve,\n        reject,\n        alreadyRejected: false,\n        timeout: setTimeout(() => {\n          log.debug(\"request is timed out\");\n          reject(\n            new TwilsockError(\n              `request '${message.to.method}' to '${message.to.host}' timed out`\n            )\n          );\n          requestDescriptor.alreadyRejected = true;\n        }, REQUEST_TIMEOUT),\n      };\n      this.pendingMessages.push(requestDescriptor);\n    });\n  }\n\n  public sendPendingMessages(): void {\n    while (this.pendingMessages.length > 0) {\n      const request = this.pendingMessages[0];\n      // Do not send message if we've rejected its promise already\n      if (!request.alreadyRejected) {\n        try {\n          const message = request.message;\n          this.actualSend(message)\n            .then((response) => request.resolve(response))\n            .catch((e) => request.reject(e));\n          clearTimeout(request.timeout);\n        } catch (e) {\n          log.debug(\"Failed to send pending message\", e);\n          break;\n        }\n      }\n      this.pendingMessages.splice(0, 1);\n    }\n  }\n\n  public rejectPendingMessages(): void {\n    this.pendingMessages.forEach((message) => {\n      message.reject(\n        new TransportUnavailableError( // @todo Error Unhandled promise rejection!\n          \"Unable to connect: \" + this.twilsock.getTerminationReason\n        )\n      );\n      message.alreadyRejected = true;\n      clearTimeout(message.timeout);\n    });\n\n    this.pendingMessages.splice(0, this.pendingMessages.length);\n  }\n\n  public async actualSend(message: MessageType): Promise<Result<Context>> {\n    const address = message.to as Address;\n    const headers = message.headers as ProtocolHeaders;\n    const body = message.body;\n    const grant = message.grant ?? this.config.activeGrant;\n\n    const httpRequest = {\n      host: address.host,\n      path: address.path,\n      method: address.method,\n      params: address.params,\n      headers: headers,\n    } as ProtocolRequest;\n\n    const upstreamMessage = new Messages.Message(\n      grant,\n      headers[\"Content-Type\"] || \"application/json\",\n      httpRequest\n    );\n\n    log.trace(\"Sending upstream message\", upstreamMessage);\n\n    const reply = await this.transport.sendWithReply(upstreamMessage, body);\n\n    log.trace(\"Received upstream message response\", reply);\n\n    if (isHttpReply(reply) && !isHttpSuccess(reply.header.http_status.code)) {\n      throw new TwilsockUpstreamError(\n        reply.header.http_status.code,\n        reply.header.http_status.status,\n        reply.body\n      );\n    }\n\n    return {\n      status: reply.header.http_status,\n      headers: reply.header.http_headers,\n      body: reply.body,\n    };\n  }\n\n  /**\n   * Send an upstream message\n   * @param {string} method The upstream method\n   * @param {string} url URL to send the message to\n   * @param {object} [headers] The message headers\n   * @param {any} [body] The message body\n   * @param {string} [grant] The product grant\n   * @returns {Promise<Result>} Result from remote side\n   */\n  public send(\n    method: string,\n    url: string,\n    headers: Headers = {},\n    body?: Context | string,\n    grant?: string\n  ): Promise<Result<Context>> {\n    if (this.twilsock.isTerminalState) {\n      return Promise.reject(\n        new TransportUnavailableError(\n          \"Unable to connect: \" + this.twilsock.getTerminationReason\n        )\n      );\n    }\n\n    const twilsockMessage = twilsockParams(method, url, headers, body, grant);\n    if (!this.twilsock.isConnected) {\n      return this.saveMessage(twilsockMessage);\n    }\n    return this.actualSend(twilsockMessage);\n  }\n}\n\nexport { Upstream };\n","class Deferred<T> {\n  private readonly _promise: Promise<T>;\n  private _resolve;\n  private _reject;\n\n  constructor() {\n    this._promise = new Promise<T>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  public get promise(): Promise<T> {\n    return this._promise;\n  }\n\n  update(value: T): void {\n    this._resolve(value);\n  }\n\n  set(value: T): void {\n    this._resolve(value);\n  }\n\n  fail(e: Error): void {\n    this._reject(e);\n  }\n}\n\nexport { Deferred };\n","import { TwilsockError } from \"./error/twilsockerror\";\n\nclass OfflineProductStorage {\n  public readonly id: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  public static create(productPayload: {\n    storage_id: string;\n  }): OfflineProductStorage {\n    if (productPayload instanceof Object && \"storage_id\" in productPayload) {\n      return new OfflineProductStorage(productPayload.storage_id);\n    } else {\n      throw new TwilsockError('Field \"storage_id\" is missing');\n    }\n  }\n}\n\nexport { OfflineProductStorage };\n","class TokenStorage {\n  private initializedFlag = \"twilio_twilsock_token_storage\";\n  private tokenStoragePrefix = \"twilio_continuation_token_\";\n  private static _instance: TokenStorage | null = null;\n\n  constructor() {\n    if (!TokenStorage._instance) {\n      this.initialize();\n      TokenStorage._instance = this;\n    }\n    return TokenStorage._instance;\n  }\n\n  public sessionStorage(): Storage | null {\n    try {\n      return global[\"sessionStorage\"];\n    } catch (err) {\n      return null;\n    }\n  }\n\n  public window(): Window | null {\n    try {\n      return global[\"window\"];\n    } catch (err) {\n      return null;\n    }\n  }\n\n  public storeToken(continuationToken: string, productId: string): void {\n    if (this.canStore()) {\n      this.sessionStorage.setItem(\n        this.getKeyName(productId),\n        continuationToken\n      );\n    }\n  }\n\n  public getStoredToken(productId: string): string | null {\n    if (!this.canStore()) {\n      return null;\n    }\n\n    return this.sessionStorage.getItem(this.getKeyName(productId));\n  }\n\n  private initialize(): void {\n    if (this.canStore()) {\n      const flag = this.sessionStorage.getItem(this.initializedFlag);\n\n      // Duplicated tab, cleaning up all stored keys\n      if (flag) {\n        this.clear();\n      }\n      this.sessionStorage.setItem(this.initializedFlag, \"true\");\n\n      // When leaving page or refreshing\n      const removeStorageItem = this.sessionStorage.removeItem;\n      this.window.addEventListener(\"unload\", () => {\n        removeStorageItem(this.initializedFlag);\n      });\n    }\n  }\n\n  public clear(): void {\n    if (this.canStore()) {\n      const keyToDelete: string[] = [];\n      for (let i = 0; i < this.sessionStorage.length; i++) {\n        const key = this.sessionStorage.key(i);\n        // We manually removed startsWith here due to some problems with babel polyfill setup.\n        // Restore it when we figure out what's wrong.\n        //if (key.startsWith(TokenStorage.tokenStoragePrefix)) {\n        if (key && key.indexOf(this.tokenStoragePrefix) === 0) {\n          keyToDelete.push(key);\n        }\n      }\n      const removeStorageItem = this.sessionStorage.removeItem;\n      keyToDelete.forEach((key) => removeStorageItem(key));\n      removeStorageItem(this.initializedFlag);\n    }\n  }\n\n  private getKeyName(productId: string) {\n    return `${this.tokenStoragePrefix}${productId}`;\n  }\n\n  private canStore(): this is TokenStorage & {\n    window: Window;\n    sessionStorage: Storage;\n  } {\n    return !!(this.sessionStorage && this.sessionStorage.length && this.window);\n  }\n}\n\nexport default new TokenStorage();\n","import { Configuration } from \"../configuration\";\nimport { PacketInterface } from \"../packetinterface\";\nimport { Telemetry, TelemetryEvent } from \"../protocol/messages/telemetry\";\nimport { log } from \"../logger\";\n\nclass TelemetryEventDescription {\n  end?: Date | null;\n\n  constructor(\n    readonly title: string,\n    readonly details: string,\n    readonly start: Date,\n    end?: Date | null,\n    readonly type?: string,\n    readonly id?: string\n  ) {\n    this.end = end;\n  }\n\n  // Prepare telemetry event right before sending it.\n  // Convert times to relative.\n  public toTelemetryEvent(): TelemetryEvent {\n    // Fix dates\n    const now = new Date();\n    let actualStart = this.start;\n    let actualEnd = this.end ? this.end : now;\n    if (actualEnd < actualStart) {\n      const tmp = actualEnd;\n      actualEnd = actualStart;\n      actualStart = tmp;\n    }\n\n    // Converting dates to relative offset from current moment in ms\n    const startOffset = actualStart.getTime() - now.getTime();\n    const endOffset = actualEnd.getTime() - now.getTime();\n\n    const result = new TelemetryEvent(\n      startOffset,\n      endOffset,\n      this.title,\n      this.details,\n      this.id,\n      this.type\n    );\n\n    return result;\n  }\n}\n\nenum TelemetryPoint {\n  Start,\n  End,\n}\n\nenum EventSendingLimitation {\n  MinEventsPortion, // check for minimal amount of telemetry events, skip sending if less than 100 events are ready to send\n  AnyEvents, // send all collected events, do not check for count, skip sending only if no events are ready to send\n  AnyEventsIncludingUnfinished, // send all collected (ready to send) as well as unfinished (just started) events\n}\n\nclass TelemetryTracker {\n  // accumulated events count that is big enough to be sent out of schedule (not on timer but on new event registration)\n  private readonly minEventsPortionToSend = 50;\n  // max events batch size to be sent in a single Telemetry message\n  private readonly maxEventsPortionToSend = 100;\n  private readonly config: Configuration; // to check confirmed capabilities\n  private readonly packetInterface: PacketInterface;\n  private pendingEvents = new Map(); // started events: have TelemetryEvent::startTime only\n  private readyEvents: TelemetryEventDescription[] = []; // events ready to send\n  private hasInitializationFinished = false;\n\n  private _canSendTelemetry = false;\n\n  constructor(config: Configuration, packetInterface: PacketInterface) {\n    this.config = config;\n    this.packetInterface = packetInterface;\n  }\n\n  // Keeping this private prevents the type declaration from being generated properly.\n  // Ideally, this should be private.\n  get isTelemetryEnabled(): boolean {\n    return this.config.confirmedCapabilities.has(\"telemetry.v1\");\n  }\n\n  public get canSendTelemetry(): boolean {\n    return this._canSendTelemetry && this.isTelemetryEnabled;\n  }\n\n  public set canSendTelemetry(enable: boolean) {\n    log.debug(\n      `TelemetryTracker.canSendTelemetry: ${enable} TelemetryTracker.isTelemetryEnabled: ${this.isTelemetryEnabled}`\n    );\n\n    // We want to keep telemetry events added in advance but\n    // we need to purge events from previous connection when being disconnected\n    if (this._canSendTelemetry && !enable) {\n      this.pendingEvents.clear();\n      this.readyEvents = [];\n    }\n\n    this._canSendTelemetry = enable;\n\n    if (enable) {\n      this.sendTelemetry(EventSendingLimitation.AnyEvents);\n    }\n\n    if (enable && !this.hasInitializationFinished) {\n      this.hasInitializationFinished = true;\n    }\n  }\n\n  // Add complete event\n  public addTelemetryEvent(event: TelemetryEventDescription): void {\n    // Allow adding events before initialization.\n    if (!this.canSendTelemetry && this.hasInitializationFinished) {\n      return;\n    }\n\n    this.readyEvents.push(event);\n  }\n\n  // Add incomplete event (with either starting or ending time point)\n  public addPartialEvent(\n    incompleteEvent: TelemetryEventDescription,\n    eventKey: string,\n    point: TelemetryPoint\n  ): void {\n    log.debug(\n      `Adding ${\n        point === TelemetryPoint.Start ? \"starting\" : \"ending\"\n      } timepoint for '${eventKey}' event`\n    );\n    const exists = this.pendingEvents.has(eventKey);\n    if (point === TelemetryPoint.Start) {\n      if (exists) {\n        log.debug(`Overwriting starting point for '${eventKey}' event`);\n      }\n      this.pendingEvents.set(eventKey, incompleteEvent);\n    } else {\n      if (!exists) {\n        log.info(`Could not find started event for '${eventKey}' event`);\n        return;\n      }\n      this.addTelemetryEvent(\n        this.merge(this.pendingEvents.get(eventKey), incompleteEvent)\n      );\n      this.pendingEvents.delete(eventKey);\n    }\n  }\n\n  public getTelemetryToSend(\n    sendingLimit: EventSendingLimitation\n  ): TelemetryEventDescription[] {\n    if (!this.canSendTelemetry || this.readyEvents.length == 0) {\n      return []; // Events are collected but not sent until telemetry is enabled\n    }\n\n    if (\n      sendingLimit == EventSendingLimitation.MinEventsPortion &&\n      this.readyEvents.length < this.minEventsPortionToSend\n    ) {\n      return [];\n    }\n\n    return this.getTelemetryPortion(\n      sendingLimit == EventSendingLimitation.AnyEventsIncludingUnfinished\n    );\n  }\n\n  private getTelemetryPortion(\n    includeUnfinished: boolean\n  ): TelemetryEventDescription[] {\n    const eventsPortionToSend = Math.min(\n      this.readyEvents.length,\n      this.maxEventsPortionToSend\n    );\n    const res = this.readyEvents.splice(0, eventsPortionToSend);\n\n    if (includeUnfinished && res.length < this.maxEventsPortionToSend) {\n      this.pendingEvents.forEach((value, key) => {\n        if (res.length >= this.maxEventsPortionToSend) {\n          return; // @fixme does not end the loop early\n        }\n        const event = this.pendingEvents.get(key);\n        this.pendingEvents.delete(key);\n        res.push(\n          new TelemetryEventDescription(\n            `[UNFINISHED] ${event.title}`, // add prefix title to mark unfinished events for CleanSock\n            event.details,\n            event.start,\n            null, // Not ended, on sending will be replaced with now\n            event.type,\n            event.id\n          )\n        );\n      });\n    }\n\n    return res;\n  }\n\n  // Merging 2 partial events:\n  //   use start.startTime & end.endTime.\n  // For other fields,\n  //   if there are values in end, use them,\n  //   else use values from start.\n  private merge(\n    start: TelemetryEventDescription,\n    end: TelemetryEventDescription\n  ): TelemetryEventDescription {\n    return new TelemetryEventDescription(\n      end.title ? end.title : start.title,\n      end.details ? end.details : start.details,\n      start.start,\n      end.end,\n      end.type ? end.type : start.type,\n      end.id ? end.id : start.id\n    );\n  }\n\n  public sendTelemetryIfMinimalPortionCollected(): void {\n    this.sendTelemetry(EventSendingLimitation.MinEventsPortion);\n  }\n\n  // NB: getTelemetryToSend will return non-empty array only if we have already received initReply\n  // and telemetry.v1 capability is enabled there.\n  public sendTelemetry(limit: EventSendingLimitation): void {\n    const events = this.getTelemetryToSend(limit);\n\n    if (events.length === 0) {\n      return; // not enough telemetry data collected\n    }\n\n    try {\n      this.packetInterface.send(\n        new Telemetry(events.map((e) => e.toTelemetryEvent()))\n      );\n    } catch (err) {\n      log.debug(\n        `Error while sending ${events.length} telemetry events due to ${err}; they will be resubmitted`\n      );\n      this.readyEvents = this.readyEvents.concat(events);\n    }\n  }\n}\n\nexport {\n  TelemetryTracker,\n  TelemetryEventDescription,\n  TelemetryPoint,\n  EventSendingLimitation,\n};\n","import { EventEmitter } from \"events\";\nimport {\n  validateConstructorTypes,\n  nonEmptyString,\n  pureObject,\n  literal,\n} from \"@twilio/declarative-type-validator\";\n\nimport { log } from \"./logger\";\nimport { Configuration, RetryPolicyType } from \"./configuration\";\nimport { TwilsockChannel } from \"./twilsock\";\nimport type { Context, Headers } from \"./protocol/protocol\";\nimport { PacketInterface } from \"./packetinterface\";\nimport { WebSocketChannel } from \"./websocketchannel\";\nimport { Registrations } from \"./services/registrations\";\nimport { Upstream } from \"./services/upstream\";\nimport { Result, Transport } from \"./interfaces/transport\";\nimport { InitReply } from \"./protocol/messages/initReply\";\nimport { Deferred } from \"./deferred\";\nimport { TwilsockError } from \"./error/twilsockerror\";\nimport { OfflineProductStorage } from \"./offlinestorage\";\nimport { InitRegistration } from \"./protocol/initregistration\";\nimport TokenStorage from \"./tokenStorage\";\nimport {\n  EventSendingLimitation,\n  TelemetryEventDescription,\n  TelemetryPoint,\n  TelemetryTracker,\n} from \"./services/telemetrytracker\";\nimport { version } from \"../package.json\";\nimport { LogLevelDesc } from \"loglevel\";\n\nexport class TelemetryEvents {\n  public static readonly TWILSOCK_CONNECT = \"twilsock.sdk.connect\"; // establish WebSocket connection (with WebSocket handshake finished)\n  public static readonly TWILSOCK_INIT = \"twilsock.sdk.init\"; // send \"init\" message and receive reply\n}\n\n/**\n * Indicates current state of connection between the client and Sync service.\n * <p>Possible values are as follows:\n * <li>'connecting' - client is offline and connection attempt is in process.\n * <li>'connected' - client is online and ready.\n * <li>'disconnecting' - client is going offline as disconnection is in process.\n * <li>'disconnected' - client is offline and no connection attempt is in process.\n * <li>'denied' - client connection is denied because of invalid JWT access token. User must refresh token in order to proceed.\n * <li>'error' - client connection is in a permanent erroneous state. Client re-initialization is required.\n * @typedef {('unknown'|'connecting'|'connected'|'disconnecting'|'disconnected'|'denied'|'error')} TwilsockClient#ConnectionState\n */\nexport type ConnectionState =\n  | \"unknown\"\n  | \"disconnecting\"\n  | \"disconnected\"\n  | \"connecting\"\n  | \"connected\"\n  | \"denied\"\n  | \"error\";\n\nexport type ClientOptionsType = {\n  continuationToken?: string | null;\n  channel?: TwilsockChannel;\n  transport?: Transport;\n  registrations?: Registrations;\n  logLevel?: LogLevelDesc;\n  region?: string;\n  twilsock?: { uri?: string };\n  Twilsock?: { uri?: string };\n  retryPolicy?: RetryPolicyType;\n  initRegistrations?: InitRegistration[] | null;\n  tweaks: Record<string, unknown> | null;\n  clientMetadata: Record<string, unknown>;\n  productId?: string;\n  twilsockClient?: TwilsockClient;\n  notifications?: {\n    region?: string;\n    ersUrl?: string;\n  };\n};\n\n/**\n * @alias Twilsock\n * @classdesc Client library for the Twilsock service\n * It allows to recevie service-generated updates as well as bi-directional transport\n * @fires Twilsock#message\n * @fires Twilsock#connected\n * @fires Twilsock#disconnected\n * @fires Twilsock#tokenAboutToExpire\n * @fires Twilsock#tokenExpired\n * @fires Twilsock#stateChanged\n * @fires Twilsock#connectionError\n */\n@validateConstructorTypes(nonEmptyString, nonEmptyString, [\n  pureObject,\n  \"undefined\",\n  literal(null),\n])\nclass TwilsockClient extends EventEmitter {\n  private readonly config: Configuration;\n  private readonly channel: TwilsockChannel;\n\n  private readonly registrations: Registrations;\n  private readonly upstream: Upstream;\n  private readonly telemetryTracker: TelemetryTracker;\n  public readonly version = version;\n\n  private offlineStorageDeferred: Deferred<OfflineProductStorage> =\n    new Deferred();\n\n  /**\n   * @param {string} token Twilio access token\n   * @param {string} productId Product identifier. Should be the same as a grant name in token\n   * @param {object} options Twilsock configuration options\n   */\n  constructor(\n    token: string,\n    productId: string,\n    options: Partial<ClientOptionsType>\n  ) {\n    super();\n\n    options.continuationToken = options.continuationToken\n      ? options.continuationToken\n      : TokenStorage.getStoredToken(productId);\n\n    const config = (this.config = new Configuration(token, productId, options));\n\n    log.setLevel(config.logLevel);\n\n    const websocket = new WebSocketChannel(config.url);\n\n    const transport = new PacketInterface(websocket, config);\n    this.channel = new TwilsockChannel(websocket, transport, config);\n    this.registrations = new Registrations(transport);\n\n    this.upstream = new Upstream(transport, this.channel, config);\n\n    // Send telemetry only when connected and initialised\n    this.telemetryTracker = new TelemetryTracker(config, transport);\n    this.channel.on(\n      \"initialized\",\n      () => (this.telemetryTracker.canSendTelemetry = true)\n    );\n    websocket.on(\n      \"disconnected\",\n      () => (this.telemetryTracker.canSendTelemetry = false)\n    );\n\n    this.registrations.on(\"registered\", (id) => this.emit(\"registered\", id));\n\n    this.channel.on(\"message\", (type, message) =>\n      setTimeout(() => this.emit(\"message\", type, message), 0)\n    );\n\n    this.channel.on(\"stateChanged\", (state) =>\n      setTimeout(() => this.emit(\"stateChanged\", state), 0)\n    );\n\n    this.channel.on(\"connectionError\", (connectionError) =>\n      setTimeout(() => this.emit(\"connectionError\", connectionError), 0)\n    );\n\n    this.channel.on(\"tokenAboutToExpire\", () =>\n      setTimeout(() => this.emit(\"tokenAboutToExpire\"), 0)\n    );\n    this.channel.on(\"tokenExpired\", () =>\n      setTimeout(() => this.emit(\"tokenExpired\"), 0)\n    );\n\n    this.channel.on(\"connected\", () =>\n      this.registrations.updateRegistrations()\n    );\n    this.channel.on(\"connected\", () => this.upstream.sendPendingMessages());\n    this.channel.on(\"connected\", () =>\n      setTimeout(() => this.emit(\"connected\"), 0)\n    );\n\n    // Twilsock telemetry events\n    this.channel.on(\"beforeConnect\", () =>\n      this.telemetryTracker.addPartialEvent(\n        new TelemetryEventDescription(\n          \"Establish WebSocket connection\",\n          \"\",\n          new Date()\n        ),\n        TelemetryEvents.TWILSOCK_CONNECT,\n        TelemetryPoint.Start\n      )\n    );\n\n    this.channel.on(\"connected\", () =>\n      this.telemetryTracker.addPartialEvent(\n        new TelemetryEventDescription(\n          \"Establish WebSocket connection\",\n          \"\",\n          new Date(),\n          new Date()\n        ),\n        TelemetryEvents.TWILSOCK_CONNECT,\n        TelemetryPoint.End\n      )\n    );\n\n    this.channel.on(\"beforeSendInit\", () =>\n      this.telemetryTracker.addPartialEvent(\n        new TelemetryEventDescription(\"Send Twilsock init\", \"\", new Date()),\n        TelemetryEvents.TWILSOCK_INIT,\n        TelemetryPoint.Start\n      )\n    );\n\n    this.channel.on(\"initialized\", () =>\n      this.telemetryTracker.addPartialEvent(\n        new TelemetryEventDescription(\n          \"Send Twilsock init\",\n          \"Succeeded\",\n          new Date(),\n          new Date()\n        ),\n        TelemetryEvents.TWILSOCK_INIT,\n        TelemetryPoint.End\n      )\n    );\n\n    this.channel.on(\"sendInitFailed\", () =>\n      this.telemetryTracker.addPartialEvent(\n        new TelemetryEventDescription(\n          \"Send Twilsock init\",\n          \"Failed\",\n          new Date(),\n          new Date()\n        ),\n        TelemetryEvents.TWILSOCK_INIT,\n        TelemetryPoint.End\n      )\n    );\n\n    this.channel.on(\"initialized\", (initReply: InitReply) => {\n      this.handleStorageId(productId, initReply);\n      TokenStorage.storeToken(initReply.continuationToken, productId);\n      setTimeout(() => this.emit(\"initialized\", initReply), 0);\n    });\n\n    this.channel.on(\"disconnected\", () =>\n      setTimeout(() => this.emit(\"disconnected\"), 0)\n    );\n    this.channel.on(\"disconnected\", () =>\n      this.upstream.rejectPendingMessages()\n    );\n    this.channel.on(\"disconnected\", () =>\n      this.offlineStorageDeferred.fail(new TwilsockError(\"Client disconnected\"))\n    );\n\n    this.offlineStorageDeferred.promise.catch(() => void 0);\n  }\n\n  public emit(event: string | symbol, ...args: unknown[]): boolean {\n    log.debug(\n      `Emitting ${event.toString()}(${args\n        .map((a) => JSON.stringify(a))\n        .join(\", \")})`\n    );\n    return super.emit(event, ...args);\n  }\n\n  private handleStorageId(productId: string, initReply: InitReply) {\n    if (!initReply.offlineStorage) {\n      this.offlineStorageDeferred.fail(\n        new TwilsockError(\"No offline storage id\")\n      );\n    } else if (initReply.offlineStorage.hasOwnProperty(productId)) {\n      try {\n        this.offlineStorageDeferred.set(\n          OfflineProductStorage.create(initReply.offlineStorage[productId])\n        );\n        log.debug(\n          `Offline storage for '${productId}' product: ${JSON.stringify(\n            initReply.offlineStorage[productId]\n          )}.`\n        );\n      } catch (e) {\n        this.offlineStorageDeferred.fail(\n          new TwilsockError(\n            `Failed to parse offline storage for ${productId} ${JSON.stringify(\n              initReply.offlineStorage[productId]\n            )}. ${e}.`\n          )\n        );\n      }\n    } else {\n      this.offlineStorageDeferred.fail(\n        new TwilsockError(\n          `No offline storage id for '${productId}' product: ${JSON.stringify(\n            initReply.offlineStorage\n          )}`\n        )\n      );\n    }\n  }\n\n  /**\n   * Get offline storage ID\n   * @returns {Promise}\n   */\n  public storageId(): Promise<OfflineProductStorage> {\n    return this.offlineStorageDeferred.promise;\n  }\n\n  /**\n   * Indicates if twilsock is connected now\n   * @returns {Boolean}\n   */\n  public get isConnected(): boolean {\n    return this.channel.isConnected;\n  }\n\n  /**\n   * Current state\n   * @returns {ConnectionState}\n   */\n  public get state(): ConnectionState {\n    return this.channel.state;\n  }\n\n  /**\n   * Update token\n   * @param {String} token\n   * @returns {Promise}\n   */\n  public async updateToken(token: string): Promise<void> {\n    log.trace(`updating token '${token}'`);\n    if (this.config.token === token) {\n      return;\n    }\n\n    this.config.updateToken(token);\n    return await this.channel.updateToken(token);\n  }\n\n  /**\n   * Updates notification context.\n   * This method shouldn't be used anyone except twilio notifications library\n   * @param contextId id of notification context\n   * @param context value of notification context\n   * @private\n   */\n  public async setNotificationsContext(\n    contextId: string,\n    context: Context\n  ): Promise<void> {\n    await this.registrations.setNotificationsContext(contextId, context);\n  }\n\n  /**\n   * Remove notification context.\n   * This method shouldn't be used anyone except twilio notifications library\n   * @param contextId id of notification context\n   * @private\n   */\n  public async removeNotificationsContext(contextId: string): Promise<void> {\n    await this.registrations.removeNotificationsContext(contextId);\n  }\n\n  /**\n   * Connect to the server\n   * @fires Twilsock#connected\n   * @public\n   * @returns {void}\n   */\n  public connect(): void {\n    return this.channel.connect();\n  }\n\n  /**\n   * Disconnect from the server\n   * @fires Twilsock#disconnected\n   * @public\n   * @returns {Promise}\n   */\n  public async disconnect(): Promise<void> {\n    this.telemetryTracker.sendTelemetry(\n      EventSendingLimitation.AnyEventsIncludingUnfinished\n    );\n    return await this.channel.disconnect();\n  }\n\n  /**\n   * Get HTTP request to upstream service\n   * @param {string} url Upstream service url\n   * @param {headers} headers Set of custom headers\n   * @param {string} [grant] The product grant\n   * @returns {Promise}\n   */\n  public async get(\n    url: string,\n    headers: Headers,\n    grant?: string\n  ): Promise<Result<Context>> {\n    this.telemetryTracker.sendTelemetry(EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n    return await this.upstream.send(\"GET\", url, headers, undefined, grant);\n  }\n\n  /**\n   * Post HTTP request to upstream service\n   * @param {string} url Upstream service url\n   * @param {headers} headers Set of custom headers\n   * @param {body} body Body to send\n   * @param {string} [grant] The product grant\n   * @returns {Promise}\n   */\n  public async post<\n    T extends Record<string, unknown> = Record<string, unknown>\n  >(\n    url: string,\n    headers: Headers,\n    body: Context | string,\n    grant?: string\n  ): Promise<Result<Context<T>>> {\n    this.telemetryTracker.sendTelemetry(EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n    return (await this.upstream.send(\n      \"POST\",\n      url,\n      headers,\n      body,\n      grant\n    )) as Result<Context<T>>;\n  }\n\n  /**\n   * Put HTTP request to upstream service\n   * @param {string} url Upstream service url\n   * @param {headers} headers Set of custom headers\n   * @param {body} body Body to send\n   * @param {string} [grant] The product grant\n   * @returns {Promise}\n   */\n  public async put<T extends Record<string, unknown> = Record<string, unknown>>(\n    url: string,\n    headers: Headers,\n    body: Context | string,\n    grant?: string\n  ): Promise<Result<Context<T>>> {\n    this.telemetryTracker.sendTelemetry(EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n    return (await this.upstream.send(\n      \"PUT\",\n      url,\n      headers,\n      body,\n      grant\n    )) as Result<Context<T>>;\n  }\n\n  /**\n   * Delete HTTP request to upstream service\n   * @param {string} url Upstream service url\n   * @param {headers} headers Set of custom headers\n   * @param {body} body Body to send\n   * @param {string} [grant] The product grant\n   * @returns {Promise}\n   */\n  public async delete<\n    T extends Record<string, unknown> = Record<string, unknown>\n  >(\n    url: string,\n    headers: Headers,\n    body?: Context | string,\n    grant?: string\n  ): Promise<Result<Context<T>>> {\n    this.telemetryTracker.sendTelemetry(EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n    return (await this.upstream.send(\n      \"DELETE\",\n      url,\n      headers,\n      body,\n      grant\n    )) as Result<Context<T>>;\n  }\n\n  /**\n   * Submits internal telemetry event. Not to be used for any customer and/or sensitive data.\n   * @param {TelemetryEventDescription} event Event details.\n   * @returns {void}\n   */\n  public addTelemetryEvent(event: TelemetryEventDescription): void {\n    this.telemetryTracker.addTelemetryEvent(event);\n    this.telemetryTracker.sendTelemetryIfMinimalPortionCollected(); // send telemetry if need\n  }\n\n  /**\n   * Submits internal telemetry event. Not to be used for any customer and/or sensitive data.\n   * @param {TelemetryEventDescription} event Event details.\n   * @param {string} eventKey Unique event key.\n   * @param {TelemetryPoint} point Is this partial event for start or end of measurement.\n   * @returns {void}\n   */\n  public addPartialTelemetryEvent(\n    event: TelemetryEventDescription,\n    eventKey: string,\n    point: TelemetryPoint\n  ): void {\n    this.telemetryTracker.addPartialEvent(event, eventKey, point);\n    if (point === TelemetryPoint.End) {\n      // this telemetry event is complete, so minimal portion could become ready to send\n      this.telemetryTracker.sendTelemetryIfMinimalPortionCollected(); // send telemetry if need\n    }\n  }\n}\n\nexport { Context, Result, TwilsockClient, TwilsockClient as Twilsock };\n\n/**\n * Twilsock destination address descriptor\n * @typedef {Object} Twilsock#Address\n * @property {String} method - HTTP method. (POST, PUT, etc)\n * @property {String} host - host name without path. (e.g. my.company.com)\n * @property {String} path - path on the host (e.g. /my/app/to/call.php)\n */\n\n/**\n * Twilsock upstream message\n * @typedef {Object} Twilsock#Message\n * @property {Twilsock#Address} to - destination address\n * @property {Object} headers - HTTP headers\n * @property {Object} body - Body\n */\n\n/**\n * Fired when new message received\n * @param {Twilsock#Message} message\n * @event Twilsock#message\n */\n\n/**\n * Fired when socket connected\n * @param {String} URI of endpoint\n * @event Twilsock#connected\n */\n\n/**\n * Fired when socket disconnected\n * @event Twilsock#disconnected\n */\n\n/**\n * Fired when token is about to expire and should be updated\n * @event Twilsock#tokenAboutToExpire\n */\n\n/**\n * Fired when token has expired and connection is aborted\n * @event Twilsock#tokenExpired\n */\n\n/**\n * Fired when socket connected\n * @param ConnectionState state - general twilsock state\n * @event Twilsock#stateChanged\n */\n\n/**\n * Fired when connection is interrupted by unexpected reason\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n * @event Twilsock#connectionError\n */\n","class InitRegistration {\n  public product: string;\n  public type: string;\n  public notification_protocol_version: number;\n  public message_types: string[]; // It's a Set<string> but TS cannot serialize Sets properly.\n\n  constructor(product: string) {\n    this.product = product;\n    this.type = \"ers\";\n    this.notification_protocol_version = 0;\n    this.message_types = [];\n  }\n\n  /*\n   * @internal\n   *\n   * Populate init registrations section in the Twilsock configuration generically with\n   * passed-in list of types to register.\n   *\n   * Used only by the SDK, ignore.\n   *\n   * @param {string[]} types List of types to add to init registrations in options.\n   * @param {object} options Twilsock options object to update. Omit to create a new one.\n   */\n  public populateInitRegistrations(types: string[]): void {\n    const s = new Set<string>(this.message_types);\n    // Update options reference in place\n    for (const idx in types) {\n      s.add(types[idx]);\n    }\n    this.message_types = Array.from(s);\n  }\n}\n\nexport { InitRegistration };\n"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","loglevelLog","uuid","log","Retrier","StateMachine","Messages.Update","Messages.Reply","platform","REQUEST_TIMEOUT","isHttpSuccess","Messages.Init","Messages.InitReply","Messages.Close","Messages.Message","TelemetryPoint","EventSendingLimitation","TwilsockClient","TokenStorage","validateConstructorTypes","nonEmptyString","pureObject","literal"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDO,SAASA,UAAT,CAAoBC,UAApB,EAAgCC,MAAhC,EAAwCC,GAAxC,EAA6CC,IAA7C,EAAmD;AACtD,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,6DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH;AAMM,SAASQ,UAAT,CAAoBC,WAApB,EAAiCC,aAAjC,EAAgD;AACnD,MAAI,QAAON,OAAP,6DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACO,QAAf,KAA4B,UAA/D,EAA2E,OAAOP,OAAO,CAACO,QAAR,CAAiBF,WAAjB,EAA8BC,auBE,sBAAW,CAAC,SAAZ,CAAsB,UAAtB,CAAhC;;AAEA,SAAS,WAAT,CAAqB,MAArB,EAA6B,IAA7B,EAAiC;AAC/B,SAAO,WAAI,IAAI,IAAJ,GAAW,WAAX,EAAJ,uBAAyC,MAAzC,QAAoD,MAApD,CACL,KAAK,CAAC,IAAN,CAAW,IAAX,CADK,CAAP;AAGD;;IAEK;AAGJ,kBAAY,MAAZ,EAA0B;AAAA;;AAAA,wDAFT,EAES;;AACxB,SAAK,MAAL,GACE,MAAM,KAAK,IAAX,IAAmB,MAAM,KAAK,SAA9B,IAA2C,MAAM,CAAC,MAAP,GAAgB,CAA3D,GACI,MAAM,MAAN,GAAe,GADnB,GAEI,EAHN;AAID;;;;WAED,kBAAS,KAAT,EAA4B;AAC1B,MAAA,GAAG,CAAC,QAAJ,CAAa,KAAb;AACD;;;WAMD,iBAA4B;AAAA,wCAAnB,IAAmB;AAAnB,QAAA,IAAmB;AAAA;;AAC1B,MAAA,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAgB,IAAhB,EAAsB,WAAW,CAAC,GAAD,EAAM,IAAN,CAAjC;AACD;;;WACD,iBAA4B;AAAA,yCAAnB,IAAmB;AAAnB,QAAA,IAAmB;AAAA;;AAC1B,MAAA,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAgB,IAAhB,EAAsB,WAAW,CAAC,GAAD,EAAM,IAAN,CAAjC;AACD;;;WACD,gBAA2B;AAAA,yCAAnB,IAAmB;AAAnB,QAAA,IAAmB;AAAA;;AACzB,MAAA,GAAG,CAAC,IAAJ,CAAS,KAAT,CAAe,IAAf,EAAqB,WAAW,CAAC,GAAD,EAAM,IAAN,CAAhC;AACD;;;WACD,gBAA2B;AAAA,yCAAnB,IAAmB;AAAnB,QAAA,IAAmB;AAAA;;AACzB,MAAA,GAAG,CAAC,IAAJ,CAAS,KAAT,CAAe,IAAf,EAAqB,WAAW,CAAC,GAAD,EAAM,IAAN,CAAhC;AACD;;;WACD,iBAA4B;AAAA,yCAAnB,IAAmB;AAAnB,QAAA,IAAmB;AAAA;;AAC1B,MAAA,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAgB,IAAhB,EAAsB,WAAW,CAAC,GAAD,EAAM,IAAN,CAAjC;AACD;;;WAlBD,kBAAgB,KAAhB,EAAmC;AACjC,MAAA,GAAG,CAAC,QAAJ,CAAa,KAAb;AACD;;;WAkBD,iBAAmC;AAAA,yCAAnB,IAAmB;AAAnB,QAAA,IAAmB;AAAA;;AACjC,MAAA,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAgB,IAAhB,EAAsB,WAAW,CAAC,GAAD,EAAM,IAAN,CAAjC;AACD;;;WACD,iBAAmC;AAAA,yCAAnB,IAAmB;AAAnB,QAAA,IAAmB;AAAA;;AACjC,MAAA,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAgB,IAAhB,EAAsB,WAAW,CAAC,GAAD,EAAM,IAAN,CAAjC;AACD;;;WACD,gBAAkC;AAAA,yCAAnB,IAAmB;AAAnB,QAAA,IAAmB;AAAA;;AAChC,MAAA,GAAG,CAAC,IAAJ,CAAS,KAAT,CAAe,IAAf,EAAqB,WAAW,CAAC,GAAD,EAAM,IAAN,CAAhC;AACD;;;WACD,gBAAkC;AAAA,yCAAnB,IAAmB;AAAnB,QAAA,IAAmB;AAAA;;AAChC,MAAA,GAAG,CAAC,IAAJ,CAAS,KAAT,CAAe,IAAf,EAAqB,WAAW,CAAC,GAAD,EAAM,IAAN,CAAhC;AACD;;;WACD,iBAAmC;AAAA,0CAAnB,IAAmB;AAAnB,QAAA,IAAmB;AAAA;;AACjC,MAAA,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAgB,IAAhB,EAAsB,WAAW,CAAC,GAAD,EAAM,IAAN,CAAjC;AACD;;;;;;AAGH,IAAM,WAAW,GAAG,IAAI,MAAJ,CAAW,EAAX,CAApB;;;;AClDA;;AAEG;;IACG;AAaJ;;;AAGG;AACH,yBACE,KADF,EAEE,WAFF,EAGE,OAHF,EAGqC;AAAA;;AAAA,uEAjBO,IAAI,GAAJ,EAiBP;;AAEnC,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,MAAL,GAAc,KAAd;AAEA,QAAM,MAAM,GAAG,OAAO,CAAC,MAAR,IAAkB,KAAjC;AACA,QAAM,kBAAkB,yBAAkB,MAAlB,6BAAxB;AAEA,QAAM,eAAe,GAAG,OAAO,CAAC,QAAR,IAAoB,OAAO,CAAC,QAA5B,IAAwC,EAAhE;AACA,SAAK,GAAL,GAAW,eAAe,CAAC,GAAhB,IAAuB,kBAAlC;AAEA,SAAK,kBAAL,GAA0B,OAAO,CAAC,iBAAR,GACtB,OAAO,CAAC,iBADc,GAEtB,IAFJ;AAIA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAR,GAAmB,OAAO,CAAC,QAA3B,GAAsC,OAAtD;AAEA,SAAK,WAAL,GAAmB,OAAO,CAAC,WAAR,GACf,OAAO,CAAC,WADO,GAEf;AACE,MAAA,GAAG,EAAE,IAAI,IADX;AAEE,MAAA,GAAG,EAAE,IAAI,EAAJ,GAAS,IAFhB;AAGE,MAAA,UAAU,EAAE;AAHd,KAFJ;AAQA,SAAK,cAAL,GAAsB,OAAO,CAAC,cAAR,GAAyB,OAAO,CAAC,cAAjC,GAAkD,EAAxE;AACA,SAAK,cAAL,CAAoB,GAApB,GAA0B,OAA1B;AAEA,SAAK,iBAAL,GAAyB,OAAO,CAAC,iBAAR,GACrB,OAAO,CAAC,iBADa,GAErB,IAFJ;AAIA,SAAK,MAAL,GAAc,OAAO,CAAC,MAAR,GAAiB,OAAO,CAAC,MAAzB,GAAkC,IAAhD;AACD;;;;SAED,eAAgB;AACd,aAAO,KAAK,MAAZ;AACD;;;SAED,eAA4B;AAC1B,aAAO,KAAK,kBAAZ;AACD;;;WAEM,qBAAY,KAAZ,EAAyB;AAC9B,WAAK,MAAL,GAAc,KAAd;AACD;;;WAEM,iCAAwB,iBAAxB,EAAiD;AACtD,WAAK,kBAAL,GAA0B,iBAA1B;AACD;;;;;;ICpFG,kBAGJ,yBAAY,EAAZ,EAAuB;AAAA;;AACrB,OAAK,EAAL,GAAU,EAAE,gBAASC,OAAI,EAAb,CAAZ;AACD;;;;;;ICHG;;;;;AASJ,gBACE,KADF,EAEE,iBAFF,EAGE,QAHF,EAIE,aAJF,EAKE,MALF,EAKyC;AAAA;;AAAA;;AAEvC;;AAFuC,qGAbhB,MAagB;;AAGvC,UAAK,KAAL,GAAa,KAAb;AACA,UAAK,kBAAL,GAA0B,iBAA1B;AACA,UAAK,QAAL,GAAgB,QAAhB;AACA,UAAK,aAAL,GAAqB,aAArB;AACA,UAAK,MAAL,GAAc,MAAd;AACA,UAAK,YAAL,GAAoB,CAAC,eAAD,EAAkB,iBAAlB,EAAqC,cAArC,CAApB;AARuC;AASxC;;;EAvBgB;;;;;;ICGb;;;;;AAQJ,qBACE,EADF,EAEE,iBAFF,EAGE,qBAHF,EAIE,uBAJF,EAKE,cALF,EAME,iBANF,EAOE,SAPF,EAOoB;AAAA;;AAAA;;AAElB,8BAAM,EAAN;AACA,UAAK,iBAAL,GAAyB,iBAAzB;AACA,UAAK,uBAAL,GAA+B,uBAA/B;AACA,UAAK,cAAL,GAAsB,cAAtB;AACA,UAAK,iBAAL,GAAyB,iBAAzB;AACA,UAAK,SAAL,GAAiB,SAAjB;AACA,UAAK,qBAAL,GAA6B,qBAA7B;AARkB;AASnB;;;EAxBqB;;;;;;ICJlB;;;;;AAIJ,kBAAY,KAAZ,EAAyB;AAAA;;AAAA;;AACvB;;AADuB,qGAHA,QAGA;;AAEvB,UAAK,KAAL,GAAa,KAAb;AAFuB;AAGxB;;;EAPkB;;;;;;ICAf;;;;;AAMJ,mBAAY,KAAZ,EAA2B,WAA3B,EAAgD,OAAhD,EAAgE;AAAA;;AAAA;;AAC9D;;AAD8D,qGALvC,SAKuC;;AAG9D,UAAK,YAAL,GAAoB,KAApB;AACA,UAAK,YAAL,GAAoB,WAApB;AACA,UAAK,YAAL,GAAoB,OAApB;AAL8D;AAM/D;;;EAZmB;;;;;;ICchB;;;;;AAQJ,iBAAY,EAAZ,EAAsB;AAAA;;AAAA;;AACpB,8BAAM,EAAN;;AADoB,qGAPG,OAOH;;AAAA,2GANS,kBAMT;;AAAA,qGALG;AAAE,MAAA,IAAI,EAAE,GAAR;AAAa,MAAA,MAAM,EAAE;AAArB,KAKH;;AAAA;AAErB;;;EAViB;;;;;;ICdd;;;;;AAGJ,mBAAA;AAAA;;AAAA;;AACE;;AADF,qGAFyB,OAEzB;;AAAA;AAEC;;;EALiB;;;;;;ICAd,iBACJ,wBACW,KADX;AAEW,GAFX;AAGW,KAHX,EAIW,OAJX,EAKW,EALX;AAMW,IANX,EAMwB;AAAA;;AALb,OAAA,KAAA,GAAA,KAAA;AACA,OAAA,GAAA,GAAA,GAAA;AACA,OAAA,KAAA,GAAA,KAAA;AACA,OAAA,OAAA,GAAA,OAAA;AACA,OAAA,EAAA,GAAA,EAAA;AACA,OAAA,IAAA,GAAA,IAAA;AACP;;;IAGA;;;;;AAIJ,qBAAY,MAAZ,EAAoC;AAAA;;AAAA;;AAClC;;AADkC,qGAHX,cAGW;;AAElC,UAAK,MAAL,GAAc,MAAd;AAFkC;AAGnC;;;EAPqB;;ACLxB,SAAS,UAAT,CAAoB,CAApB,EAA6B;AAC3B,MAAM,MAAM,GAAG,kBAAkB,CAAC,CAAD,CAAjC;AACA,MAAM,MAAM,GAAG,MAAM,CAAC,OAAP,CAAe,iBAAf,EAAkC,UAAC,KAAD,EAAQ,EAAR;AAAA,WAC/C,MAAM,CAAC,YAAP,CAAoB,MAAM,CAAC,OAAO,EAAR,CAA1B,CAD+C;AAAA,GAAlC,CAAf;AAGA,SAAO,MAAM,CAAC,MAAd;AACD;;AAED,SAAS,kBAAT,CAA4B,CAA5B,EAAqC;AACnC,MAAM,MAAM,GAAG,kBAAkB,CAAC,CAAD,CAAjC;AACA,MAAM,MAAM,GAAG,MAAM,CAAC,OAAP,CAAe,iBAAf,EAAkC,UAAC,KAAD,EAAQ,EAAR;AAAA,WAC/C,MAAM,CAAC,YAAP,CAAoB,MAAM,CAAC,OAAO,EAAR,CAA1B,CAD+C;AAAA,GAAlC,CAAf;AAGA,MAAM,EAAE,GAAG,IAAI,UAAJ,CAAe,MAAM,CAAC,MAAtB,CAAX;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,OAAhB,CAAwB,IAAxB,CAA6B,MAA7B,EAAqC,UAAC,EAAD,EAAK,CAAL,EAAU;AAC7C,IAAA,EAAE,CAAC,CAAD,CAAF,GAAQ,EAAE,CAAC,UAAH,CAAc,CAAd,CAAR;AACD,GAFD;AAGA,SAAO,EAAP;AACD;;AAED,SAAS,kBAAT,CAA4B,EAA5B,EAA0C;AACxC,MAAM,MAAM,GAAG,KAAK,CAAC,SAAN,CAAgB,GAAhB,CACZ,IADY,CACP,EADO,EACH,UAAC,EAAD;AAAA,WAAQ,MAAM,CAAC,YAAP,CAAoB,EAApB,CAAR;AAAA,GADG,EAEZ,IAFY,CAEP,EAFO,CAAf;AAGA,MAAM,MAAM,GAAG,MAAM,CAAC,OAAP,CAAe,MAAf,EAAuB,UAAC,CAAD,EAAI,CAAJ,EAAS;AAC7C,QAAI,IAAI,GAAG,CAAC,CAAC,UAAF,CAAa,CAAb,EAAgB,QAAhB,CAAyB,EAAzB,EAA6B,WAA7B,EAAX;;AACA,QAAI,IAAI,CAAC,MAAL,GAAc,CAAlB,EAAqB;AACnB,MAAA,IAAI,GAAG,MAAM,IAAb;AACD;;AACD,WAAO,MAAM,IAAb;AACD,GANc,CAAf;AAOA,SAAO,kBAAkB,CAAC,MAAD,CAAzB;AACD;;AAED,SAAS,aAAT,CAAuB,KAAvB,EAAwC;AACtC,SAAO,IAAI,CAAC,KAAL,CAAW,kBAAkB,CAAC,KAAD,CAA7B,CAAP;AACD;;AAED,SAAS,QAAT,CAAkB,MAAlB,EAAoC;AAClC,MAAI,QAAQ,GAAG,EAAf;AACA,MAAI,GAAG,GAAG,CAAV;;AACA,SAAO,GAAG,GAAG,MAAM,CAAC,MAApB,EAA4B,EAAE,GAA9B,EAAmC;AACjC,QAAM,GAAG,GAAG,MAAM,CAAC,YAAP,CAAoB,MAAM,CAAC,GAAD,CAA1B,CAAZ;AACA,IAAA,QAAQ,IAAI,GAAZ;;AACA,QAAI,GAAG,KAAK,IAAZ,EAAkB;AAChB,MAAA,GAAG,IAAI,CAAP;AACA;AACD;AACF;;AAED,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAT,CAAe,GAAf,CAAf;AACA,SAAO;AACL,IAAA,IAAI,EAAE,GADD;AAEL,IAAA,QAAQ,EAAE,MAAM,CAAC,CAAD,CAFX;AAGL,IAAA,OAAO,EAAE,MAAM,CAAC,CAAD,CAHV;AAIL,IAAA,UAAU,EAAE,MAAM,CAAC,MAAM,CAAC,CAAD,CAAP;AAJb,GAAP;AAMD;;IAEK;;;;;;;WACJ,eAAa,OAAb,EAAqC;AACnC,UAAM,WAAW,GAAG,CAApB;AAEA,UAAM,QAAQ,GAAG,IAAI,UAAJ,CAAe,OAAf,CAAjB;AACA,UAAM,KAAK,GAAG,QAAQ,CAAC,QAAD,CAAtB;;AACA,UAAI,KAAK,CAAC,QAAN,KAAmB,UAAnB,IAAiC,KAAK,CAAC,OAAN,KAAkB,MAAvD,EAA+D;AAC7D,QAAAC,WAAG,CAAC,KAAJ,iCAAmC,KAAK,CAAC,QAAzC,kBAAyD,KAAK,CAAC,OAA/D,GAD6D;AAG7D;;AACA,eAAO,IAAP;AACD;;AAED,UAAI,MAAJ;;AACA,UAAI;AACF,QAAA,MAAM,GAAG,aAAa,CACpB,QAAQ,CAAC,QAAT,CAAkB,KAAK,CAAC,IAAxB,EAA8B,KAAK,CAAC,IAAN,GAAa,KAAK,CAAC,UAAjD,CADoB,CAAtB;AAGD,OAJD,CAIE,OAAO,CAAP,EAAU;AACV,QAAAA,WAAG,CAAC,KAAJ,CAAU,gCAAV,EAA4C,CAA5C,EAA+C,OAA/C,EADU;AAGV;;AACA,eAAO,IAAP;AACD;;AAED,MAAAA,WAAG,CAAC,KAAJ,CAAU,oBAAV,EAAgC,MAAM,CAAC,MAAvC;AACA,MAAAA,WAAG,CAAC,KAAJ,CAAU,oBAAV,EAAgC,MAAhC;AAEA,UAAI,OAAJ;;AACA,UAAI,MAAM,CAAC,YAAP,GAAsB,CAA1B,EAA6B;AAC3B,YAAM,aAAa,GAAG,WAAW,GAAG,KAAK,CAAC,IAApB,GAA2B,KAAK,CAAC,UAAvD;AACA,YAAM,WAAW,GAAG,MAAM,CAAC,YAA3B;;AAEA,YACE,CAAC,MAAM,CAAC,cAAP,CAAsB,cAAtB,CAAD,IACA,MAAM,CAAC,YAAP,CAAoB,OAApB,CAA4B,kBAA5B,MAAoD,CAFtD,EAGE;AACA,cAAI;AACF,YAAA,OAAO,GAAG,aAAa,CACrB,QAAQ,CAAC,QAAT,CAAkB,aAAlB,EAAiC,aAAa,GAAG,WAAjD,CADqB,CAAvB;AAGD,WAJD,CAIE,OAAO,CAAP,EAAU;AACV,YAAAA,WAAG,CAAC,KAAJ,CAAU,8BAAV,EAA0C,CAA1C,EAA6C,OAA7C,EADU;;AAGV,mBAAO,IAAP;AACD;AACF,SAbD,MAaO,IAAI,MAAM,CAAC,YAAP,CAAoB,OAApB,CAA4B,YAA5B,MAA8C,CAAlD,EAAqD;AAC1D,UAAA,OAAO,GAAG,kBAAkB,CAC1B,QAAQ,CAAC,QAAT,CAAkB,aAAlB,EAAiC,aAAa,GAAG,WAAjD,CAD0B,CAA5B;AAGD;AACF;;AAED,aAAO;AAAE,QAAA,MAAM,EAAE,MAAM,CAAC,MAAjB;AAAyB,QAAA,MAAM,EAAN,MAAzB;AAAiC,QAAA,OAAO,EAAP;AAAjC,OAAP;AACD;;;WAED,sBACE,MADF,EAEoB;AAAA,UAAlB,aAAkB,uEAAF,EAAE;AAElB,MAAA,MAAM,CAAC,YAAP,GAAsB,UAAU,CAAC,aAAD,CAAhC,CAFkB;;AAIlB,UAAM,YAAY,GAAG,IAAI,CAAC,SAAL,CAAe,MAAf,CAArB;AACA,UAAM,WAAW,GAAG,mBAAmB,UAAU,CAAC,YAAD,CAAjD;AAEA,MAAAA,WAAG,CAAC,KAAJ,CAAU,eAAV,EAA2B,WAAW,GAAG,YAAd,GAA6B,aAAxD;AAEA,UAAM,OAAO,GAAG,kBAAkB,CAChC,WAAW,GAAG,MAAd,GAAuB,YAAvB,GAAsC,MAAtC,GAA+C,aADf,CAAlC;AAGA,aAAO,OAAO,CAAC,MAAf;AACD;;;;;;;;;;IC3IG;;;;;AACJ,yBAAY,WAAZ,EAA+B;AAAA;;AAAA,6BACvB,WADuB;AAE9B;;;qDAHyB;;;;;;ICGtB;;;;;AAGJ,8BAAY,WAAZ,EAAiC,KAAjC,EAAiD;AAAA;;AAAA;;AAC/C,8BAAM,WAAN;AACA,UAAK,KAAL,GAAa,KAAb;AAF+C;AAGhD;;;EAN8B;;;;;;;;;;ICY3B;;;;;AAWJ,0BAAY,OAAZ,EAAuC;AAAA;;AAAA;;AACrC;;AADqC,yGATH,IASG;;AAAA,0GARF,IAQE;;AAAA,sGANL,IAMK;;AAErC,UAAK,OAAL,GAAe,OAAO,qBAAQ,OAAR,IAAoB,EAA1C;AAFqC;AAGtC;AAED;;AAEG;;;;;SAXH,eAAqB;AACnB,aAAO,CAAC,CAAC,KAAK,OAAd;AACD;;;WAUM,iBAAK;AACV,UAAI,KAAK,UAAT,EAAqB;AACnB,cAAM,IAAI,KAAJ,CACJ,sFADI,CAAN;AAGD;;AACD,WAAK,aAAL;AACD;AAED;;AAEG;;;;WACI,gBAAI;AACT,WAAK,YAAL;AACA,WAAK,UAAL,GAAkB,IAAlB;AACA,WAAK,WAAL,GAAmB,IAAnB;AACD;AAED;;;;;;;;AAQG;;;;WACI,uBAAc,KAAd,EAA2B;AAChC,WAAK,UAAL,GAAkB,KAAlB;AACD;AAED;;AAEG;;;;WACI,yBAAa;AAClB,UAAI,CAAC,KAAK,UAAV,EAAsB;AACpB,cAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,UAAI,KAAK,UAAT,EAAqB;AACnB,YAAM,mBAAmB,GACvB,CAAC,KAAK,WAAN,IAAqB,KAAK,WAAL,GAAmB,KAAK,UAD/C;;AAEA,YAAI,mBAAJ,EAAyB;AACvB,eAAK,aAAL;AACD,SAFD,MAEO;AAAA;;AACL,gCAAK,OAAL,gEAAc,MAAd,CAAqB,IAAI,KAAJ,EAArB;AACD;AACF,OARD,MAQO;AAAA;;AACL,+BAAK,OAAL,kEAAc,MAAd,CAAqB,IAAI,KAAJ,EAArB;AACD;AACF;;;WAEM,kBAAM;AAAA;;AACX,6BAAK,OAAL,kEAAc,MAAd;AACD;;;WAEO,wBAAY;AAAA;;AAClB,6BAAK,OAAL,kEAAc,kBAAd;AACA,6BAAK,OAAL,kEAAc,MAAd;AACA,WAAK,OAAL,GAAe,IAAf;AACD;;;WAEO,0BAAc;AACpB,UAAM,KAAK,qBAAQ,KAAK,OAAb,CAAX;;AAEA,UAAI,KAAK,UAAT,EAAqB;AACnB,QAAA,KAAK,CAAC,GAAN,GAAY,KAAK,UAAjB;AACA,QAAA,KAAK,CAAC,GAAN,GACE,KAAK,OAAL,CAAa,GAAb,IAAoB,KAAK,OAAL,CAAa,GAAb,GAAmB,KAAK,UAA5C,GACI,KAAK,OAAL,CAAa,GADjB,GAEI,KAAK,UAHX;AAID,OATmB;;;AAYpB,MAAA,KAAK,CAAC,gBAAN,GAAyB,KAAK,OAAL,CAAa,gBAAb,GACrB,KAAK,OAAL,CAAa,gBAAb,GAAgC,CADX,GAErB,SAFJ;AAIA,aAAO,KAAP;AACD;;;WAEO,yBAAa;AAAA;;AACnB,WAAK,YAAL;AACA,UAAM,WAAW,GAAG,KAAK,cAAL,EAApB;AACA,WAAK,OAAL,GAAe,IAAIC,wBAAJ,CAAY,WAAZ,CAAf;AAEA,WAAK,OAAL,CAAa,IAAb,CAAkB,SAAlB,EAA6B,YAAK;AAAA;;AAChC,0BAAA,MAAI,CAAC,OAAL,kEAAc,EAAd,CAAiB,SAAjB,EAA4B;AAAA,iBAAM,MAAI,CAAC,IAAL,CAAU,SAAV,CAAN;AAAA,SAA5B;AACA,2BAAA,MAAI,CAAC,OAAL,oEAAc,MAAd,CAAqB,IAAI,KAAJ,CAAU,wBAAV,CAArB;AACD,OAHD;AAKA,WAAK,OAAL,CAAa,EAAb,CAAgB,QAAhB,EAA0B,UAAC,GAAD;AAAA,eAAS,MAAI,CAAC,IAAL,CAAU,QAAV,EAAoB,GAApB,CAAT;AAAA,OAA1B;AAEA,WAAK,WAAL,GAAmB,KAAK,UAAxB;AACA,WAAK,UAAL,GAAkB,IAAlB;AAEA,WAAK,OAAL,CAAa,KAAb,GAfmB;AAiBpB;;;;EArH0B;;;;;ACD7B,IAAM,qBAAqB,GAAG,IAA9B;AAGA;AACA;;AACA,SAAS,UAAT,CAAoB,CAApB,EAAiC;AAC/B,EAAA,UAAU,CAAC,CAAD,EAAI,CAAJ,CAAV;AACD;AAID;;AAEG;;;IACG;;;;;AAmBJ,2BACE,SADF,EAEE,SAFF,EAGE,MAHF,EAGuB;AAAA;;AAAA;;AAErB;;AAFqB,iHAjB4C,IAiB5C;;AAAA,yHAfmC,IAenC;;AAAA,6GAT0B,CAAC,cAAD,EAAiB,UAAjB,CAS1B;;AAAA,kHAPgB,KAOhB;;AAAA,gHALK,+BAKL;;AAIrB,UAAK,SAAL,GAAiB,SAAjB;;AACA,UAAK,SAAL,CAAe,EAAf,CAAkB,WAAlB,EAA+B;AAAA,aAAM,MAAK,GAAL,CAAS,eAAT,EAAN;AAAA,KAA/B;;AACA,UAAK,SAAL,CAAe,EAAf,CAAkB,cAAlB,EAAkC;AAAA,aAAM,MAAK,GAAL,CAAS,YAAT,EAAN;AAAA,KAAlC;;AACA,UAAK,SAAL,CAAe,EAAf,CAAkB,SAAlB,EAA6B,UAAC,OAAD;AAAA,aAAa,MAAK,iBAAL,CAAuB,OAAvB,CAAb;AAAA,KAA7B;;AACA,UAAK,SAAL,CAAe,EAAf,CAAkB,aAAlB,EAAiC,UAAC,CAAD;AAAA,aAC/B,MAAK,IAAL,CAAU,iBAAV,EAA6B;AAC3B,QAAA,QAAQ,EAAE,KADiB;AAE3B,QAAA,OAAO,0BAAmB,CAAC,CAAC,OAArB,CAFoB;AAG3B,QAAA,cAAc,EAAE,IAHW;AAI3B,QAAA,SAAS,EAAE;AAJgB,OAA7B,CAD+B;AAAA,KAAjC;;AASA,UAAK,SAAL,GAAiB,SAAjB;AACA,UAAK,MAAL,GAAc,MAAd;AAEA,UAAK,OAAL,GAAe,IAAI,cAAJ,CAAmB,MAAM,CAAC,WAA1B,CAAf;;AACA,UAAK,OAAL,CAAa,EAAb,CAAgB,SAAhB,EAA2B;AAAA,aAAM,MAAK,KAAL,EAAN;AAAA,KAA3B;;AACA,UAAK,OAAL,CAAa,EAAb,CAAgB,QAAhB,EAA0B,UAAC,GAAD,EAAQ;AAChC,MAAAD,WAAG,CAAC,IAAJ,4BAA6B,GAAG,CAAC,OAAjC;;AACA,YAAK,UAAL;AACD,KAHD;;AAKA,QACE,OAAO,MAAP,KAAkB,WAAlB,IACA,OAAO,MAAM,CAAC,gBAAd,KAAmC,WAFrC,EAGE;AACA,MAAA,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,YAAK;AACrC,QAAAA,WAAG,CAAC,KAAJ,CAAU,6CAAV;;AACA,cAAK,YAAL;;AACA,cAAK,GAAL,CAAS,YAAT;AACD,OAJD;AAMA,MAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,YAAK;AACtC,QAAAA,WAAG,CAAC,KAAJ,CAAU,8CAAV;;AACA,cAAK,SAAL,CAAe,KAAf;;AACA,cAAK,GAAL,CAAS,YAAT;AACD,OAJD;AAKD,KA1CoB;AA6CrB;AACA;AACA;;;AAEA,QAAM,oBAAoB,GAAiBE,uBAAY,CAAC,OAAb,CAAqB;AAC9D,MAAA,IAAI,EAAE,cADwD;AAE9D,MAAA,WAAW,EAAE,CACX;AACE,QAAA,IAAI,EAAE,aADR;AAEE,QAAA,IAAI,EAAE,CAAC,cAAD,EAAiB,UAAjB,CAFR;AAGE,QAAA,EAAE,EAAE;AAHN,OADW,EAMX;AAAE,QAAA,IAAI,EAAE,aAAR;AAAuB,QAAA,IAAI,EAAE,CAAC,YAAD,EAAe,WAAf;AAA7B,OANW,EAOX;AACE,QAAA,IAAI,EAAE,gBADR;AAEE,QAAA,IAAI,EAAE,CACJ,YADI,EAEJ,cAFI,EAGJ,WAHI,EAIJ,UAJI,EAKJ,UALI,EAMJ,UANI,EAOJ,kBAPI,EAQJ,yBARI,CAFR;AAYE,QAAA,EAAE,EAAE;AAZN,OAPW,EAqBX;AAAE,QAAA,IAAI,EAAE,WAAR;AAAqB,QAAA,IAAI,EAAE,CAAC,UAAD,CAA3B;AAAyC,QAAA,EAAE,EAAE;AAA7C,OArBW,EAsBX;AAAE,QAAA,IAAI,EAAE,iBAAR;AAA2B,QAAA,IAAI,EAAE,CAAC,YAAD,CAAjC;AAAiD,QAAA,EAAE,EAAE;AAArD,OAtBW,EAuBX;AACE,QAAA,IAAI,EAAE,cADR;AAEE,QAAA,IAAI,EAAE,CACJ,YADI,EAEJ,cAFI,EAGJ,WAHI,EAIJ,UAJI,EAKJ,OALI,EAMJ,yBANI,CAFR;AAUE,QAAA,EAAE,EAAE;AAVN,OAvBW,EAmCX;AAAE,QAAA,IAAI,EAAE,cAAR;AAAwB,QAAA,IAAI,EAAE,CAAC,eAAD,CAA9B;AAAiD,QAAA,EAAE,EAAE;AAArD,OAnCW,EAoCX;AACE,QAAA,IAAI,EAAE,cADR;AAEE,QAAA,IAAI,EAAE,CAAC,kBAAD,CAFR;AAGE,QAAA,EAAE,EAAE;AAHN,OApCW,EAyCX;AAAE,QAAA,IAAI,EAAE,cAAR;AAAwB,QAAA,IAAI,EAAE,CAAC,UAAD,CAA9B;AAA4C,QAAA,EAAE,EAAE;AAAhD,OAzCW,EA0CX;AAAE,QAAA,IAAI,EAAE,aAAR;AAAuB,QAAA,IAAI,EAAE,CAAC,cAAD,CAA7B;AAA+C,QAAA,EAAE,EAAE;AAAnD,OA1CW,EA2CX;AAAE,QAAA,IAAI,EAAE,WAAR;AAAqB,QAAA,IAAI,EAAE,CAAC,cAAD,CAA3B;AAA6C,QAAA,EAAE,EAAE;AAAjD,OA3CW,EA4CX;AACE,QAAA,IAAI,EAAE,eADR;AAEE,QAAA,IAAI,EAAE,CAAC,cAAD,EAAiB,UAAjB,CAFR;AAGE,QAAA,EAAE,EAAE;AAHN,OA5CW,EAiDX;AACE,QAAA,IAAI,EAAE,eADR;AAEE,QAAA,IAAI,EAAE,CAAC,cAAD,EAAiB,WAAjB,EAA8B,UAA9B,CAFR;AAGE,QAAA,EAAE,EAAE;AAHN,OAjDW,EAsDX;AACE,QAAA,IAAI,EAAE,cADR;AAEE,QAAA,IAAI,EAAE,CAAC,cAAD,EAAiB,WAAjB,EAA8B,UAA9B,CAFR;AAGE,QAAA,EAAE,EAAE;AAHN,OAtDW,EA2DX;AACE,QAAA,IAAI,EAAE,gBADR;AAEE,QAAA,IAAI,EAAE,CAAC,cAAD,EAAiB,WAAjB,EAA8B,UAA9B,CAFR;AAGE,QAAA,EAAE,EAAE;AAHN,OA3DW,EAgEX;AACE,QAAA,IAAI,EAAE,qBADR;AAEE,QAAA,IAAI,EAAE,CAAC,cAAD,EAAiB,WAAjB,EAA8B,UAA9B,CAFR;AAGE,QAAA,EAAE,EAAE;AAHN,OAhEW,EAqEX;AACE,QAAA,IAAI,EAAE,mBADR;AAEE,QAAA,IAAI,EAAE,CAAC,cAAD,EAAiB,WAAjB,EAA8B,UAA9B,CAFR;AAGE,QAAA,EAAE,EAAE;AAHN,OArEW,EA0EX;AACE,QAAA,IAAI,EAAE,iBADR;AAEE,QAAA,IAAI,EAAE,CAAC,cAAD,EAAiB,UAAjB,EAA6B,YAA7B,EAA2C,UAA3C,CAFR;AAGE,QAAA,EAAE,EAAE;AAHN,OA1EW,EA+EX;AAAE,QAAA,IAAI,EAAE,iBAAR;AAA2B,QAAA,IAAI,EAAE,CAAC,WAAD,CAAjC;AAAgD,QAAA,EAAE,EAAE;AAApD,OA/EW,EAgFX;AAAE,QAAA,IAAI,EAAE,eAAR;AAAyB,QAAA,IAAI,EAAE,CAAC,UAAD,CAA/B;AAA6C,QAAA,EAAE,EAAE;AAAjD,OAhFW,EAiFX;AAAE,QAAA,IAAI,EAAE,aAAR;AAAuB,QAAA,IAAI,EAAE,CAAC,UAAD,CAA7B;AAA2C,QAAA,EAAE,EAAE;AAA/C,OAjFW,EAkFX;AAAE,QAAA,IAAI,EAAE,UAAR;AAAoB,QAAA,IAAI,EAAE,CAAC,WAAD,CAA1B;AAAyC,QAAA,EAAE,EAAE;AAA7C,OAlFW,EAmFX;AAAE,QAAA,IAAI,EAAE,cAAR;AAAwB,QAAA,IAAI,EAAE,CAAC,UAAD,CAA9B;AAA4C,QAAA,EAAE,EAAE;AAAhD,OAnFW,CAFiD;AAuF9D,MAAA,OAAO,EAAE;AACP,QAAA,YAAY,EAAE,wBAAK;AACjB,gBAAK,WAAL;;AACA,gBAAK,IAAL,CAAU,YAAV;AACD,SAJM;AAKP,QAAA,mBAAmB,EAAE,+BAAK;AACxB,gBAAK,QAAL;AACD,SAPM;AAQP,QAAA,mBAAmB,EAAE,+BAAK;AACxB,gBAAK,UAAL;AACD,SAVM;AAWP,QAAA,eAAe,EAAE,2BAAK;AACpB,gBAAK,UAAL;AACD,SAbM;AAcP,QAAA,eAAe,EAAE,2BAAK;AACpB,gBAAK,YAAL;AACD,SAhBM;AAiBP,QAAA,eAAe,EAAE,2BAAK;AACpB,gBAAK,SAAL;;AACA,gBAAK,IAAL,CAAU,YAAV;AACD,SApBM;AAqBP,QAAA,gBAAgB,EAAE,4BAAK;AACrB,gBAAK,YAAL;;AACA,gBAAK,WAAL;AACD,SAxBM;AAyBP,QAAA,iBAAiB,EAAE,6BAAK;AACtB,gBAAK,YAAL;AACD,SA3BM;AA4BP,QAAA,eAAe,EAAE,2BAAK;AACpB,gBAAK,YAAL;;AACA,gBAAK,WAAL,CAAiB,IAAjB;;AACA,gBAAK,cAAL;AACD,SAhCM;AAiCP,QAAA,gBAAgB,EAAE,4BAAK;AACrB,gBAAK,WAAL,CAAiB,IAAjB;AACD,SAnCM;AAoCP,QAAA,oBAAoB,EAAE,gCAAK;AACzB,gBAAK,oBAAL;AACD,SAtCM;AAuCP,QAAA,oBAAoB,EAAE,gCAAK;AACzB,gBAAK,qBAAL;AACD,SAzCM;AA0CP,QAAA,uBAAuB,EAAE,mCAAK;AAC5B,gBAAK,oBAAL;AACD,SA5CM;AA6CP,QAAA,uBAAuB,EAAE,mCAAK;AAC5B,gBAAK,qBAAL;AACD,SA/CM;AAgDP,QAAA,8BAA8B,EAAE,0CAAK;AACnC,gBAAK,oBAAL;AACD,SAlDM;AAmDP,QAAA,8BAA8B,EAAE,0CAAK;AACnC,gBAAK,qBAAL;AACD,SArDM;AAsDP,QAAA,cAAc,EAAE,0BAAK;AACnB,gBAAK,YAAL;;AACA,gBAAK,cAAL;AACD,SAzDM;AA0DP,QAAA,cAAc,EAAE,0BAAK;AACnB,gBAAK,eAAL;AACD,SA5DM;AA6DP,QAAA,gBAAgB,EAAE,0BAAC,KAAD,EAAQ,IAAR,EAAgB;AAChC,UAAAF,WAAG,CAAC,KAAJ,CAAU,oBAAV,EAAgC,IAAhC;;AACA,gBAAK,aAAL,CAAmB,IAAI,CAAC,IAAxB;;AACA,gBAAK,eAAL;AACD,SAjEM;AAkEP,QAAA,aAAa,EAAE,yBAAK;AAClB,gBAAK,WAAL,CAAiB,IAAjB;;AACA,gBAAK,cAAL;AACD,SArEM;AAsEP,QAAA,OAAO,EAAE,iBAAC,SAAD,EAAY,QAAZ,EAAiC;AACxC,gBAAK,WAAL,CAAiB,QAAjB;;AACA,gBAAK,cAAL;AACD,SAzEM;AA0EP,QAAA,YAAY,EAAE,sBAAC,KAAD,EAAU;AACtB,cAAI,KAAK,CAAC,IAAN,KAAe,MAAnB,EAA2B;AACzB,kBAAK,WAAL,CAAiB,KAAjB;AACD;AACF,SA9EM;AA+EP,QAAA,mBAAmB,EAAE,6BAAC,UAAD,EAAa,IAAb,EAAmB,EAAnB,EAAyB;AAC5C,UAAAA,WAAG,CAAC,IAAJ,CAAS,4BAAT,EAAuC,IAAvC,EAA6C,EAA7C;AACD;AAjFM;AAvFqD,KAArB,CAA3C;AA2KA,UAAK,GAAL,GAAW,IAAI,oBAAJ,EAAX;AA5NqB;AA6NtB;;;;WAEO,qBAAY,KAAZ,EAIP;AACC,MAAAA,WAAG,CAAC,KAAJ,gBAAkB,KAAK,CAAC,UAAxB,eAAuC,KAAK,CAAC,IAA7C,kBAAyD,KAAK,CAAC,EAA/D;;AAEA,UAAI,KAAK,gBAAL,KAA0B,KAAK,KAAnC,EAA0C;AACxC,aAAK,gBAAL,GAAwB,KAAK,KAA7B;AACA,aAAK,IAAL,CAAU,cAAV,EAA0B,KAAK,KAA/B;AACD;AACF;;;WAEO,wBAAY;AAClB,MAAAA,WAAG,CAAC,KAAJ,CAAU,cAAV;AACA,WAAK,OAAL,CAAa,IAAb;AACD;;;WAEO,uBAAc,IAAd,EAAkB;AACxB,MAAAA,WAAG,CAAC,KAAJ,CAAU,eAAV,EAA2B,IAA3B;AAEA,UAAM,aAAa,GAAG,IAAI,GAAG,IAAI,CAAC,cAAR,GAAyB,IAAnD;;AAEA,UAAI,aAAa,IAAI,OAAO,aAAa,CAAC,gBAArB,KAA0C,QAA/D,EAAyE;AACvE,aAAK,OAAL,CAAa,aAAb,CAA2B,aAAa,CAAC,gBAAzC;AACD;AACF;;;WAEO,gCAAoB;AAAA;;AAC1B,MAAAA,WAAG,CAAC,KAAJ,CAAU,sBAAV;;AAEA,UAAI,KAAK,kBAAT,EAA6B;AAC3B,QAAA,YAAY,CAAC,KAAK,kBAAN,CAAZ;AACA,aAAK,kBAAL,GAA0B,IAA1B;AACD;;AAED,WAAK,kBAAL,GAA0B,UAAU,CAAC,YAAK;AACxC,QAAAA,WAAG,CAAC,KAAJ,CAAU,4BAAV;;AACA,QAAA,MAAI,CAAC,WAAL,CAAiB,IAAjB;AACD,OAHmC,EAGjC,qBAHiC,CAApC;AAID;;;WAEO,iCAAqB;AAC3B,MAAAA,WAAG,CAAC,KAAJ,CAAU,uBAAV;;AAEA,UAAI,KAAK,kBAAT,EAA6B;AAC3B,QAAA,YAAY,CAAC,KAAK,kBAAN,CAAZ;AACA,aAAK,kBAAL,GAA0B,IAA1B;AACD;AACF;;;SAED,eAAsB;AACpB,aAAO,KAAK,KAAL,KAAe,WAAf,IAA8B,KAAK,SAAL,CAAe,WAApD;AACD;;;SAED,eAAgB;AACd,cAAQ,KAAK,GAAL,CAAS,KAAjB;AACE,aAAK,YAAL;AACA,aAAK,cAAL;AACA,aAAK,UAAL;AACA,aAAK,OAAL;AACE,iBAAO,YAAP;;AACF,aAAK,UAAL;AACA,aAAK,WAAL;AACE,iBAAO,WAAP;;AACF,aAAK,UAAL;AACE,iBAAO,QAAP;;AACF,aAAK,eAAL;AACA,aAAK,kBAAL;AACA,aAAK,yBAAL;AACE,iBAAO,eAAP;;AACF,aAAK,cAAL;AACA;AACE,iBAAO,cAAP;AAjBJ;AAmBD;;;WAEO,qBAAS;AACf,MAAAA,WAAG,CAAC,KAAJ,CAAU,WAAV;;AACA,UAAI,KAAK,OAAL,CAAa,UAAjB,EAA6B;AAC3B,aAAK,OAAL,CAAa,aAAb;AACD,OAFD,MAEO;AACL,aAAK,OAAL,CAAa,KAAb;AACD;AACF;;;WAEO,iBAAK;AACX,UAAI,KAAK,GAAL,CAAS,KAAT,IAAkB,YAAtB,EAAoC;AAClC,QAAAA,WAAG,CAAC,KAAJ,CAAU,OAAV;AACA,aAAK,SAAL,CAAe,KAAf;AACA,aAAK,GAAL,CAAS,SAAT;AACD,OAJD,MAIO;AACL,QAAAA,WAAG,CAAC,KAAJ,CAAU,mCAAV;AACD;AACF;;;WAEO,uBAAW;AACjB,WAAK,IAAL,CAAU,WAAV;AACD;;;WAEO,0BAAc;AACpB,MAAAA,WAAG,CAAC,KAAJ,CAAU,gBAAV;AAEA,WAAK,SAAL,CAAe,KAAf;AACA,WAAK,IAAL,CAAU,cAAV;;AAEA,UAAI,KAAK,0BAAT,EAAqC;AACnC,aAAK,0BAAL;AACA,aAAK,0BAAL,GAAkC,IAAlC;AACD;AACF;;;WAEO,uBAAW;AACjB,MAAAA,WAAG,CAAC,KAAJ,CAAU,cAAV,EAA0B,KAAK,MAAL,CAAY,KAAtC;AACA,WAAK,IAAL,CAAU,eAAV,EAFiB;;AAGjB,WAAK,SAAL,CAAe,OAAf;AACD;;;WAEO,2BAAkB,OAAlB,EAAsC;AAC5C,UAAM,aAAa,GAAG,MAAM,CAAC,KAAP,CAAa,OAAb,CAAtB;;AACA,UAAI,CAAC,aAAL,EAAoB;AAClB;AACD;;AACD,UAAQ,MAAR,GAAoC,aAApC,CAAQ,MAAR;AAAA,UAAgB,MAAhB,GAAoC,aAApC,CAAgB,MAAhB;AAAA,UAAwB,OAAxB,GAAoC,aAApC,CAAwB,OAAxB;;AAEA,UAAI,MAAM,KAAK,OAAf,EAAwB;AACtB,aAAK,gBAAL,CAAsB,MAAtB;AACD;;AAED,UAAI,MAAM,KAAK,cAAf,EAA+B;AAC7B,aAAK,IAAL,CAAU,SAAV,EAAqB,MAAM,CAAC,YAA5B,EAA0C,OAA1C;AACD,OAFD,MAEO,IAAI,MAAM,CAAC,MAAP,KAAkB,OAAtB,EAA+B;AACpC,aAAK,SAAL,CAAe,YAAf,CAA4B;AAC1B,UAAA,EAAE,EAAE,MAAM,CAAC,EADe;AAE1B,UAAA,MAAM,EAAE,MAAM,CAAC,MAFW;AAG1B,UAAA,MAAM,EAAE,MAHkB;AAI1B,UAAA,IAAI,EAAE;AAJoB,SAA5B;AAMD,OAPM,MAOA,IAAI,MAAM,CAAC,MAAP,KAAkB,eAAtB,EAAuC;AAC5C,YAAI,MAAM,CAAC,kBAAP,KAA8B,uBAAlC,EAA2D;AACzD,eAAK,IAAL,CAAU,oBAAV;AACD;AACF,OAJM,MAIA,IAAI,MAAM,CAAC,MAAP,KAAkB,OAAtB,EAA+B;AACpC,YAAI,MAAM,CAAC,MAAP,CAAc,IAAd,KAAuB,GAA3B,EAAgC;AAC9B,UAAAA,WAAG,CAAC,KAAJ,CAAU,+BAAV;AACA,eAAK,GAAL,CAAS,cAAT,CAAwB;AACtB,YAAA,MAAM,EAAE,MAAM,CAAC,MAAP,CAAc,MADA;AAEtB,YAAA,IAAI,EAAE;AAFgB,WAAxB;AAID,SAND,MAMO,IAAI,MAAM,CAAC,MAAP,CAAc,IAAd,KAAuB,GAA3B,EAAgC;AACrC;AACA,cAAM,QAAO,oEAA6D,IAAI,CAAC,SAAL,CACxE,MAAM,CAAC,MADiE,CAA7D,CAAb;;AAGA,eAAK,wBAAL,CAA8B,QAA9B,EAAuC,MAAvC,EAA+C,IAA/C;AACA,UAAAA,WAAG,CAAC,KAAJ,CAAU,QAAV;AACA,eAAK,GAAL,CAAS,iBAAT;AACD,SARM,MAQA,IAAI,MAAM,CAAC,MAAP,CAAc,IAAd,KAAuB,GAA3B,EAAgC;AACrC;AACA,UAAAA,WAAG,CAAC,KAAJ,sEACgE,IAAI,CAAC,SAAL,CAC5D,MAAM,CAAC,MADqD,CADhE;AAKA,eAAK,GAAL,CAAS,iBAAT,CAA2B,MAAM,CAAC,MAAP,CAAc,MAAzC;AACD,SARM,MAQA,IAAI,MAAM,CAAC,MAAP,CAAc,IAAd,KAAuB,GAA3B,EAAgC;AACrC;AACA,UAAAA,WAAG,CAAC,IAAJ,qCAAsC,IAAI,CAAC,SAAL,CAAe,MAAM,CAAC,MAAtB,CAAtC;AACA,eAAK,GAAL,CAAS,YAAT,CAAsB,MAAM,CAAC,MAAP,CAAc,MAApC;AACA,eAAK,IAAL,CAAU,cAAV;AACD,SALM,MAKA,IAAI,MAAM,CAAC,MAAP,CAAc,IAAd,KAAuB,GAA3B,EAAgC;AACrC;AACA,UAAAA,WAAG,CAAC,KAAJ,qCAAuC,IAAI,CAAC,SAAL,CAAe,MAAM,CAAC,MAAtB,CAAvC;AACA,eAAK,GAAL,CAAS,YAAT,CAAsB,MAAM,CAAC,MAAP,CAAc,MAApC;AACD,SAJM,MAIA;AACL,UAAAA,WAAG,CAAC,IAAJ,CAAS,sBAAT,EAAiC,MAAM,CAAC,MAAxC,EADK;;AAGL,eAAK,GAAL,CAAS,cAAT,CAAwB;AAAE,YAAA,MAAM,EAAE,MAAM,CAAC,MAAP,CAAc,MAAxB;AAAgC,YAAA,IAAI,EAAE;AAAtC,WAAxB;AACD;AACF;AACF;;;;uHAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AACN,gBAAAA,WAAG,CAAC,KAAJ,CAAU,UAAV;AADM;AAIJ,qBAAK,IAAL,CAAU,gBAAV,EAJI;;AAAA;AAAA,uBAKgB,KAAK,SAAL,CAAe,QAAf,EALhB;;AAAA;AAKE,gBAAA,KALF;AAMJ,qBAAK,MAAL,CAAY,uBAAZ,CAAoC,KAAK,CAAC,iBAA1C;AACA,qBAAK,MAAL,CAAY,qBAAZ,GAAoC,KAAK,CAAC,qBAA1C;AACA,qBAAK,GAAL,CAAS,WAAT,CAAqB,KAArB;AACA,qBAAK,IAAL,CAAU,aAAV,EAAyB,KAAzB;AACA,qBAAK,IAAL,CAAU,cAAV;AAVI;AAAA;;AAAA;AAAA;AAAA;;AAYJ,oBAAI,uBAAc,kBAAlB,EAAsC;AAChC,kBAAA,eADgC,GACd,KADc;AAGpC,kBAAAA,WAAG,CAAC,IAAJ,oCAAqC,IAAI,CAAC,SAAL,CAAe,YAAG,KAAH,CAAS,MAAxB,CAArC;AACA,uBAAK,IAAL,CAAU,gBAAV,EAJoC;AAKpC;;AAEA,sBAAI,YAAG,KAAH,CAAS,MAAT,CAAgB,IAAhB,KAAyB,GAAzB,IAAgC,YAAG,KAAH,CAAS,MAAT,CAAgB,IAAhB,KAAyB,GAA7D,EAAkE;AAChE,oBAAA,eAAe,GAAG,IAAlB;AACA,yBAAK,GAAL,CAAS,aAAT,CAAuB,YAAG,KAAH,CAAS,MAAhC;;AACA,wBAAI,YAAG,KAAH,CAAS,MAAT,CAAgB,SAAhB,KAA8B,KAAK,mBAAvC,EAA4D;AAC1D,2BAAK,IAAL,CAAU,cAAV;AACD;AACF,mBAND,MAMO,IAAI,YAAG,KAAH,CAAS,MAAT,CAAgB,IAAhB,KAAyB,GAA7B,EAAkC;AACvC,yBAAK,aAAL,CAAmB,YAAG,KAAH,CAAS,IAA5B;AACA,yBAAK,GAAL,CAAS,SAAT,CAAmB,IAAnB;AACD,mBAHM,MAGA,IAAI,YAAG,KAAH,CAAS,MAAT,CAAgB,IAAhB,KAAyB,GAA7B,EAAkC;AACvC,yBAAK,GAAL,CAAS,SAAT,CAAmB,KAAnB;AACD,mBAFM,MAEA;AACL,yBAAK,GAAL,CAAS,SAAT,CAAmB,IAAnB;AACD;;AAED,uBAAK,wBAAL,CAA8B,YAAG,OAAjC,EAA0C,YAAG,KAA7C,EAAoD,eAApD;AACD,iBAvBD,MAuBO;AACL,uBAAK,iBAAL,GAAyB,YAAG,OAA5B;AACA,uBAAK,IAAL,CAAU,iBAAV,EAA6B;AAC3B,oBAAA,QAAQ,EAAE,IADiB;AAE3B,oBAAA,OAAO,4DACL,YAAG,OADE,eAEF,IAAI,CAAC,SAAL,cAAmB,IAAnB,EAAyB,CAAzB,CAFE,CAFoB;AAK3B,oBAAA,cAAc,EAAE,IALW;AAM3B,oBAAA,SAAS,EAAE;AANgB,mBAA7B;AAQA,uBAAK,GAAL,CAAS,SAAT,CAAmB,IAAnB;AACD;;AACD,qBAAK,IAAL,CAAU,cAAV;;AA/CI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;yHAmDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACN,gBAAAA,WAAG,CAAC,KAAJ,CAAU,YAAV;AAEM,gBAAA,OAHA,GAGU,IAAIG,MAAJ,CAAoB,KAAK,MAAL,CAAY,KAAhC,CAHV;AAAA;AAAA;AAAA,uBAMgB,KAAK,SAAL,CAAe,aAAf,CAA6B,OAA7B,CANhB;;AAAA;AAME,gBAAA,KANF;AAOJ,qBAAK,GAAL,CAAS,aAAT,CAAuB,KAAK,CAAC,IAA7B;AACA,qBAAK,IAAL,CAAU,cAAV;AARI;AAAA;;AAAA;AAAA;AAAA;;AAUJ,oBAAI,wBAAc,kBAAlB,EAAsC;AAChC,kBAAA,eADgC,GACd,KADc;AAEpC,kBAAAH,WAAG,CAAC,IAAJ,4CACsC,IAAI,CAAC,SAAL,CAAe,aAAG,KAAH,CAAS,MAAxB,CADtC;;AAGA,sBAAI,aAAG,KAAH,CAAS,MAAT,CAAgB,IAAhB,KAAyB,GAAzB,IAAgC,aAAG,KAAH,CAAS,MAAT,CAAgB,IAAhB,KAAyB,GAA7D,EAAkE;AAChE,oBAAA,eAAe,GAAG,IAAlB;AACA,yBAAK,GAAL,CAAS,aAAT,CAAuB,aAAG,KAAH,CAAS,MAAhC;;AACA,wBAAI,aAAG,KAAH,CAAS,MAAT,CAAgB,SAAhB,KAA8B,KAAK,mBAAvC,EAA4D;AAC1D,2BAAK,IAAL,CAAU,cAAV;AACD;AACF,mBAND,MAMO,IAAI,aAAG,KAAH,CAAS,MAAT,CAAgB,IAAhB,KAAyB,GAA7B,EAAkC;AACvC,yBAAK,aAAL,CAAmB,aAAG,KAAH,CAAS,IAA5B;AACA,yBAAK,GAAL,CAAS,WAAT,CAAqB,aAAG,KAAH,CAAS,MAA9B;AACD,mBAHM,MAGA;AACL,yBAAK,GAAL,CAAS,WAAT,CAAqB,aAAG,KAAH,CAAS,MAA9B;AACD;;AACD,uBAAK,wBAAL,CAA8B,aAAG,OAAjC,EAA0C,aAAG,KAA7C,EAAoD,eAApD;AACD,iBAlBD,MAkBO;AACL,uBAAK,IAAL,CAAU,OAAV,EAAmB,KAAnB,EAA0B,aAAG,OAA7B,EAAsC,IAAtC,EAA4C,IAA5C;AACA,uBAAK,GAAL,CAAS,WAAT;AACD;;AACD,qBAAK,IAAL,CAAU,cAAV;;AAhCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;WAoCA,kCACN,OADM,EAEN,MAFM,EAGN,QAHM,EAGW;AAEjB,UAAM,WAAW,GACf,MAAM,CAAC,MAAP,IAAiB,MAAM,CAAC,MAAP,CAAc,WAA/B,GACI,MAAM,CAAC,MAAP,CAAc,WADlB,GAEI,OAHN;AAKA,UAAM,cAAc,GAAG,MAAM,CAAC,MAAP,CAAc,IAArC;AAEA,UAAM,SAAS,GACb,MAAM,CAAC,MAAP,IAAiB,MAAM,CAAC,MAAP,CAAc,SAA/B,GAA2C,MAAM,CAAC,MAAP,CAAc,SAAzD,GAAqE,IADvE;;AAGA,UAAI,QAAJ,EAAc;AACZ,aAAK,iBAAL,GAAyB,WAAzB;AACD;;AAED,WAAK,IAAL,CAAU,iBAAV,EAA6B;AAC3B,QAAA,QAAQ,EAAE,QADiB;AAE3B,QAAA,OAAO,8BAAuB,WAAvB,CAFoB;AAG3B,QAAA,cAAc,EAAE,cAHW;AAI3B,QAAA,SAAS,EAAE;AAJgB,OAA7B;AAMD;;;WAEO,sBAAU;AAChB,MAAAA,WAAG,CAAC,KAAJ,CAAU,YAAV,EADgB;AAGjB;;;WAEO,wBAAY;AAClB,MAAAA,WAAG,CAAC,KAAJ,CAAU,cAAV,EADkB;AAGnB;AAED;;AAEG;;;;WAEK,0BAAiB,aAAjB,EAAsC;AAC5C,MAAAA,WAAG,CAAC,KAAJ,CAAU,kBAAV;;AAEA,UAAI;AACF;AACA,aAAK,SAAL,CAAe,IAAf,CAAoB,IAAII,KAAJ,CAAmB,aAAa,CAAC,EAAjC,CAApB;AACD,OAHD,CAGE,OAAO,CAAP,EAAU;AACV,QAAAJ,WAAG,CAAC,KAAJ,CAAU,oCAAV,EAAgD,CAAhD;AACD;AACF;AAED;;AAEG;;;;WACK,qBAAY,QAAZ,EAA6B;AAAA;;AACnC,MAAAA,WAAG,CAAC,KAAJ,kCAAoC,QAApC;;AAEA,UAAI,QAAQ,IAAI,KAAK,SAAL,CAAe,WAA/B,EAA4C;AAC1C,aAAK,SAAL,CAAe,SAAf;AACD;;AACD,WAAK,SAAL,CAAe,KAAf;AAEA,MAAA,UAAU,CAAC;AAAA,eAAM,MAAI,CAAC,GAAL,CAAS,YAAT,EAAN;AAAA,OAAD,CAAV;AACD;AAED;;;AAGG;;;;WACH,mBAAO;AACL,MAAAA,WAAG,CAAC,KAAJ,CAAU,SAAV;AACA,WAAK,GAAL,CAAS,WAAT;AACD;AAED;;;AAGG;;;;WACH,sBAAU;AAAA;;AACR,MAAAA,WAAG,CAAC,KAAJ,CAAU,YAAV;;AAEA,UAAI,KAAK,GAAL,CAAS,EAAT,CAAY,cAAZ,CAAJ,EAAiC;AAC/B,eAAO,OAAO,CAAC,OAAR,EAAP;AACD;;AAED,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAY;AAC7B,QAAA,MAAI,CAAC,0BAAL,GAAkC,OAAlC;;AACA,QAAA,MAAI,CAAC,GAAL,CAAS,cAAT;AACD,OAHM,CAAP;AAID;AAED;;AAEG;;;;WACI,qBAAY,KAAZ,EAAyB;AAAA;;AAC9B,MAAAA,WAAG,CAAC,KAAJ,CAAU,cAAV,EAA0B,KAA1B;AAEA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACrC,QAAA,MAAI,CAAC,IAAL,CAAU,cAAV,EAA0B,UAAC,CAAD,EAAM;AAC9B,cAAI,CAAJ,EAAO;AACL,YAAA,MAAM,CAAC,CAAD,CAAN;AACD,WAFD,MAEO;AACL,YAAA,OAAO;AACR;AACF,SAND;;AAQA,QAAA,MAAI,CAAC,GAAL,CAAS,eAAT;AACD,OAVM,CAAP;AAWD;;;SAED,eAA0B;AACxB,aAAO,KAAK,cAAL,CAAoB,OAApB,CAA4B,KAAK,GAAL,CAAS,KAArC,MAAgD,CAAC,CAAxD;AACD;;;SAED,eAA+B;AAC7B,aAAO,KAAK,iBAAZ;AACD;;;WAEO,2BAAe;AACrB,WAAK,SAAL,CAAe,KAAf;AACD;;;;EA3nB2B;;IC1BxB;;;;;;;WACG,qBAAmB,OAAnB,EAEN;AAAA;;AACC,UAAM,SAAS,GACb,OAAO,IAAI,OAAO,CAAC,cAAnB,GAAoC,OAAO,CAAC,cAA5C,GAA6D,EAD/D;AAGA,UAAM,UAAU,GAAG,CACjB,KADiB,EAEjB,KAFiB,EAGjB,MAHiB,EAIjB,IAJiB,EAKjB,KALiB,EAMjB,KANiB,EAOjB,MAPiB,EAQjB,KARiB,EASjB,MATiB,EAUjB,KAViB,EAWjB,MAXiB,EAYjB,MAZiB,EAajB,KAbiB,EAcjB,MAdiB,CAAnB;AAgBA,UAAM,QAAQ,GAAG;AACf,QAAA,GAAG,oBAAEK,mBAAQ,CAAC,IAAX,2DAAmB,SADP;AAEf,QAAA,IAAI,uBAAEA,mBAAQ,CAAC,OAAX,iEAAsB,SAFX;AAGf,QAAA,EAAE,yCAAEA,mBAAQ,CAAC,EAAX,iDAAE,aAAa,MAAf,qEAAyB,SAHZ;AAIf,QAAA,GAAG,2CAAEA,mBAAQ,CAAC,EAAX,kDAAE,cAAa,OAAf,uEAA0B,SAJd;AAKf,QAAA,GAAG,4CAAEA,mBAAQ,CAAC,EAAX,kDAAE,cAAa,YAAf,yEAA+B,SALnB;AAMf,QAAA,GAAG,EAAE;AANU,OAAjB;AASA,UAAM,mBAAmB,GAAG,EAA5B;AACA,MAAA,UAAU,CACP,MADH,CACU,UAAC,GAAD;AAAA,eAAS,GAAG,IAAI,SAAP,IAAoB,GAAG,IAAI,QAApC;AAAA,OADV,EAEG,OAFH,CAGI,UAAC,GAAD;AAAA,eACG,mBAAmB,CAAC,GAAD,CAAnB,GACC,GAAG,IAAI,SAAP,GAAmB,SAAS,CAAC,GAAD,CAA5B,GAAoC,QAAQ,CAAC,GAAD,CAFhD;AAAA,OAHJ;AAQA,aAAO,mBAAP;AACD;;;;;;AC/BH,IAAMC,iBAAe,GAAG,KAAxB;;AAEA,SAASC,eAAT,CAAuB,IAAvB,EAAmC;AACjC,SAAO,IAAI,IAAI,GAAR,IAAe,IAAI,GAAG,GAA7B;AACD;AAED;;AAEG;;;AACH,SAAS,cAAT,CAAwB,OAAxB,EAA+B;AAC7B,sCAAe,OAAf;AACE,SAAK,WAAL;AACE,aAAO,EAAP;;AACF,SAAK,QAAL;AACE,aAAO,IAAI,CAAC,SAAL,CAAe,OAAf,CAAP;;AACF;AACE,aAAO,OAAP;AANJ;AAQD;;IAgCK;AAKJ,2BAAY,OAAZ,EAA8B,MAA9B,EAAmD;AAAA;;AAAA;;AACjD,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,cAAL,GAAsB,IAAI,GAAJ,EAAtB;AAEA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,OAAL,CAAa,EAAb,CAAgB,OAAhB,EAAyB,UAAC,KAAD;AAAA,aAAW,KAAI,CAAC,YAAL,CAAkB,KAAlB,CAAX;AAAA,KAAzB;AACA,SAAK,OAAL,CAAa,EAAb,CAAgB,cAAhB,EAAgC,YAAK;AACnC,MAAA,KAAI,CAAC,cAAL,CAAoB,OAApB,CAA4B,UAAC,UAAD,EAAe;AACzC,QAAA,YAAY,CAAC,UAAU,CAAC,OAAZ,CAAZ;AACA,QAAA,UAAU,CAAC,MAAX,CAAkB,IAAI,aAAJ,CAAkB,cAAlB,CAAlB;AACD,OAHD;;AAIA,MAAA,KAAI,CAAC,cAAL,CAAoB,KAApB;AACD,KAND;AAOD;;;;SAED,eAAsB;AACpB,aAAO,KAAK,OAAL,CAAa,WAApB;AACD;;;WAEM,sBAAa,KAAb,EAA6B;AAClC,UAAM,OAAO,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,KAAK,CAAC,EAA9B,CAAhB;;AACA,UAAI,OAAJ,EAAa;AACX,QAAA,YAAY,CAAC,OAAO,CAAC,OAAT,CAAZ;AACA,aAAK,cAAL,CAAoB,MAApB,CAA2B,KAAK,CAAC,EAAjC;;AAEA,YAAI,CAACA,eAAa,CAAC,KAAK,CAAC,MAAN,CAAa,IAAd,CAAlB,EAAuC;AACrC,UAAA,OAAO,CAAC,MAAR,CACE,IAAI,kBAAJ,CACE,wBAAwB,KAAK,CAAC,MAAN,CAAa,MADvC,EAEE,KAFF,CADF;AAMA,UAAAP,WAAG,CAAC,KAAJ,CAAU,kBAAV;AACD,SARD,MAQO;AACL,UAAA,OAAO,CAAC,OAAR,CAAgB,KAAhB;AACD;AACF;AACF;;;WAEO,sBAAa,EAAb,EAAyB,OAAzB,EAAkC,MAAlC,EAAwC;AAC9C,UAAM,iBAAiB,GAAG;AACxB,QAAA,OAAO,EAAE,OADe;AAExB,QAAA,MAAM,EAAE,MAFgB;AAGxB,QAAA,OAAO,EAAE,UAAU,CAAC,YAAK;AACvB,UAAAA,WAAG,CAAC,KAAJ,CAAU,SAAV,EAAqB,EAArB,EAAyB,cAAzB;AACA,UAAA,MAAM,CAAC,IAAI,aAAJ,CAAkB,gCAAgC,EAAlD,CAAD,CAAN;AACD,SAHkB,EAGhBM,iBAHgB;AAHK,OAA1B;AAQA,WAAK,cAAL,CAAoB,GAApB,CAAwB,EAAxB,EAA4B,iBAA5B;AACD;;;WAEM,oBAAQ;AACb,WAAK,cAAL,CAAoB,OAApB,CAA4B,UAAC,UAAD,EAAe;AACzC,QAAA,YAAY,CAAC,UAAU,CAAC,OAAZ,CAAZ;AACA,QAAA,UAAU,CAAC,MAAX,CACE,IAAI,aAAJ,CAAkB,qCAAlB,CADF;AAGD,OALD;AAMA,WAAK,cAAL,CAAoB,KAApB;AACD;;;;uHAEM;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,gBAAAN,WAAG,CAAC,KAAJ,CAAU,UAAV;AAEM,gBAAA,QAHD,GAGY,QAAQ,CAAC,WAAT,CAAqB,KAAK,MAA1B,CAHZ;AAIC,gBAAA,OAJD,GAIW,IAAIQ,IAAJ,CACd,KAAK,MAAL,CAAY,KADE,EAEd,KAAK,MAAL,CAAY,iBAFE,EAGd,QAHc,EAId,KAAK,MAAL,CAAY,iBAJE,EAKd,KAAK,MAAL,CAAY,MALE,CAJX;AAAA;AAAA,uBAYkB,KAAK,aAAL,CAAmB,OAAnB,CAZlB;;AAAA;AAYC,gBAAA,QAZD;AAAA,iDAaE,IAAIC,SAAJ,CACL,QAAQ,CAAC,EADJ,EAEL,QAAQ,CAAC,MAAT,CAAgB,kBAFX,EAGL,IAAI,GAAJ,CAAgB,QAAQ,CAAC,MAAT,CAAgB,YAAhC,CAHK,EAIL,QAAQ,CAAC,MAAT,CAAgB,yBAJX,EAKL,QAAQ,CAAC,MAAT,CAAgB,eALX,EAML,QAAQ,CAAC,MAAT,CAAgB,kBANX,EAOL,QAAQ,CAAC,MAAT,CAAgB,UAPX,CAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;WAwBA,qBAAS;AACd,UAAM,OAAO,GAAG,IAAIC,KAAJ,EAAhB,CADc;;AAGd,WAAK,IAAL,CAAU,OAAV;AACD;;;WAEM,uBACL,MADK,EAEL,OAFK,EAEY;AAAA;;AAEjB,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACrC,YAAM,EAAE,GAAG,MAAI,CAAC,IAAL,CAAU,MAAV,EAAkB,OAAlB,CAAX;;AACA,QAAA,MAAI,CAAC,YAAL,CAAkB,EAAlB,EAAsB,OAAtB,EAA+B,MAA/B;AACD,OAHM,CAAP;AAID;;;WAEM,cAAK,MAAL,EAA8B,OAA9B,EAA+C;AACpD,MAAA,MAAM,CAAC,EAAP,GAAY,MAAM,CAAC,EAAP,gBAAkBX,OAAI,EAAtB,CAAZ;AACA,UAAM,OAAO,GAAG,MAAM,CAAC,YAAP,CAAoB,MAApB,EAA4B,cAAc,CAAC,OAAD,CAA1C,CAAhB;;AAEA,UAAI;AACF,aAAK,OAAL,CAAa,IAAb,CAAkB,OAAlB;AACA,eAAO,MAAM,CAAC,EAAd;AACD,OAHD,CAGE,OAAO,CAAP,EAAU;AACV,QAAAC,WAAG,CAAC,KAAJ,CAAU,iBAAV,EAA6B,MAA7B,EAAqC,CAArC;AACA,QAAAA,WAAG,CAAC,KAAJ,CAAU,CAAC,CAAC,KAAZ;AACA,cAAM,CAAN;AACD;AACF;;;;;;;;;;ICjLG;;;;;AAIJ,4BAA6B,GAA7B,EAAwC;AAAA;;AAAA;;AACtC;;AADsC,qGAFL,IAEK;;AAAX,UAAA,GAAA,GAAA,GAAA;AAE3B,UAAK,GAAL,GAAW,GAAX;AACA,UAAK,SAAL,GACE,MAAM,CAAC,WAAD,CAAN,IAAuB,MAAM,CAAC,cAAD,CAA7B,IAAiD,EADnD;AAHsC;AAKvC;;;;SAED,eAAsB;AACpB,aAAO,CAAC,CAAC,KAAK,MAAP,IAAiB,KAAK,MAAL,CAAY,UAAZ,KAA2B,CAAnD;AACD;;;WAEM,mBAAO;AAAA;;AACZ,MAAAA,WAAG,CAAC,KAAJ,CAAU,sBAAV;AAEA,UAAI,MAAJ;;AAEA,UAAI;AACF,QAAA,MAAM,GAAG,IAAI,KAAK,SAAT,CAAmB,KAAK,GAAxB,CAAT;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV,QAAAA,WAAG,CAAC,KAAJ,yBAA2B,KAAK,GAAhC;AACA,aAAK,IAAL,CAAU,aAAV,EAAyB,CAAzB;AACA;AACD;;AAED,MAAA,MAAM,CAAC,UAAP,GAAoB,aAApB;;AAEA,MAAA,MAAM,CAAC,MAAP,GAAgB,YAAK;AACnB,QAAAA,WAAG,CAAC,KAAJ,yBAA2B,MAAI,CAAC,GAAhC;;AACA,QAAA,MAAI,CAAC,IAAL,CAAU,WAAV;AACD,OAHD;;AAKA,MAAA,MAAM,CAAC,OAAP,GAAiB,UAAC,CAAD,EAAM;AACrB,QAAAA,WAAG,CAAC,KAAJ,CAAU,eAAV,EAA2B,CAA3B;;AACA,QAAA,MAAI,CAAC,IAAL,CAAU,cAAV,EAA0B,CAA1B;AACD,OAHD;;AAKA,MAAA,MAAM,CAAC,OAAP,GAAiB,UAAC,CAAD,EAAM;AACrB,QAAAA,WAAG,CAAC,KAAJ,CAAU,eAAV,EAA2B,CAA3B;;AACA,QAAA,MAAI,CAAC,IAAL,CAAU,aAAV,EAAyB,CAAzB;AACD,OAHD;;AAKA,MAAA,MAAM,CAAC,SAAP,GAAmB,UAAC,OAAD,EAA0B;AAC3C,QAAA,MAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,OAAO,CAAC,IAA7B;AACD,OAFD;;AAIA,WAAK,MAAL,GAAc,MAAd;AACD;;;WAEM,cAAK,OAAL,EAAyB;AAC9B,aAAO,KAAK,MAAL,IAAe,KAAK,MAAL,CAAY,IAAZ,CAAiB,OAAjB,CAAtB;AACD;;;WAED,iBAAK;AACH,MAAAA,WAAG,CAAC,KAAJ,CAAU,gBAAV;;AAEA,UAAI,KAAK,MAAT,EAAiB;AACf,aAAK,MAAL,CAAY,MAAZ,GAAqB,IAArB;AACA,aAAK,MAAL,CAAY,OAAZ,GAAsB,IAAtB;AACA,aAAK,MAAL,CAAY,OAAZ,GAAsB,IAAtB;AACA,aAAK,MAAL,CAAY,SAAZ,GAAwB,IAAxB;;AACA,YAAI;AACF,eAAK,MAAL,CAAY,KAAZ;AACD,SAFD,SAEU;AAEX;AACF;;;;EArE4B;;;;;ACG/B;;;AAGG;;IACG;;;;;AAIJ,yBAA6B,SAA7B,EAAuD;AAAA;;AAAA;;AACrD;AAD2B,UAAA,SAAA,GAAA,SAAA;AAG3B,UAAK,aAAL,GAAqB,IAAI,GAAJ,EAArB;AACA,UAAK,uBAAL,GAA+B,IAAI,GAAJ,EAA/B;AAJqD;AAKtD;;;;;qIAEO,iBACN,SADM,EAEN,OAFM;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,gBAAA,MAJA,GAIS;AACb,kBAAA,MAAM,EAAE,sBADK;AAEb,kBAAA,mBAAmB,EAAE;AAFR,iBAJT;AAAA;AAAA,uBAQA,KAAK,SAAL,CAAe,aAAf,CAA6B,MAA7B,EAAqC,OAArC,CARA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;wIAWA,kBAAgC,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,OADA,GACU;AACd,kBAAA,MAAM,EAAE,yBADM;AAEd,kBAAA,mBAAmB,EAAE;AAFP,iBADV;AAAA;AAAA,uBAKA,KAAK,SAAL,CAAe,aAAf,CAA6B,OAA7B,CALA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;iIAQA,kBAAyB,SAAzB,EAA4C,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AACN,gBAAAA,WAAG,CAAC,KAAJ,CAAU,iCAAV,EAA6C,SAA7C;AAEI,gBAAA,oBAHE,GAGqB,KAAK,uBAAL,CAA6B,GAA7B,CAAiC,SAAjC,CAHrB;;AAIN,oBAAI,CAAC,oBAAL,EAA2B;AACzB,kBAAA,oBAAoB,GAAG,IAAI,GAAJ,EAAvB;AACA,uBAAK,uBAAL,CAA6B,GAA7B,CAAiC,SAAjC,EAA4C,oBAA5C;AACD;;AAEK,gBAAA,SATA,GASYD,OAAI,EAThB;AAUN,gBAAA,oBAAoB,CAAC,GAArB,CAAyB,SAAzB;AAVM;AAAA;AAAA,uBAaE,KAAK,sBAAL,CAA4B,SAA5B,EAAuC,OAAvC,CAbF;;AAAA;AAeJ,gBAAAC,WAAG,CAAC,KAAJ,CAAU,4CAAV,EAAwD,OAAxD;AACA,gBAAA,oBAAoB,CAAC,MAArB,CAA4B,SAA5B;;AACA,oBAAI,oBAAoB,CAAC,IAArB,KAA8B,CAAlC,EAAqC;AACnC,uBAAK,uBAAL,CAA6B,MAA7B,CAAoC,SAApC;AACA,uBAAK,IAAL,CAAU,YAAV,EAAwB,SAAxB;AACD;;AApBG;AAAA;;AAAA;AAAA;AAAA;AAsBJ,gBAAAA,WAAG,CAAC,IAAJ,CAAS,yCAAT,EAAoD,OAApD;AACA,gBAAAA,WAAG,CAAC,KAAJ;AAEA,gBAAA,oBAAoB,CAAC,MAArB,CAA4B,SAA5B;;AACA,oBAAI,oBAAoB,CAAC,IAArB,KAA8B,CAAlC,EAAqC;AACnC,uBAAK,uBAAL,CAA6B,MAA7B,CAAoC,SAApC;AACA,uBAAK,IAAL,CAAU,oBAAV,EAAgC,SAAhC;AACD;;AA7BG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;kIAiCD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,gBAAAA,WAAG,CAAC,KAAJ,sBAAwB,KAAK,aAAL,CAAmB,IAA3C;AACM,gBAAA,QAFD,GAE6B,EAF7B;AAGL,qBAAK,aAAL,CAAmB,OAAnB,CAA2B,UAAC,OAAD,EAAmB,EAAnB,EAAyB;AAClD,kBAAA,QAAQ,CAAC,IAAT,CAAc,MAAI,CAAC,kBAAL,CAAwB,EAAxB,EAA4B,OAA5B,CAAd;AACD,iBAFD;AAHK;AAAA,uBAMC,OAAO,CAAC,GAAR,CAAY,QAAZ,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;sIASA,kBACL,SADK,EAEL,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA,sBAID,CAAC,SAAD,IAAc,CAAC,OAJd;AAAA;AAAA;AAAA;;AAAA,sBAKG,IAAI,aAAJ,CAAkB,4BAAlB,CALH;;AAAA;AAQL,qBAAK,aAAL,CAAmB,GAAnB,CAAuB,SAAvB,EAAkC,OAAlC;AARK;AAAA,uBASQ,KAAK,kBAAL,CAAwB,SAAxB,EAAmC,OAAnC,CATR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;yIAYA,kBAAiC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,KAAK,aAAL,CAAmB,GAAnB,CAAuB,SAAvB,CADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,uBAKC,KAAK,yBAAL,CAA+B,SAA/B,CALD;;AAAA;AAML,oBAAI,KAAK,SAAL,CAAe,WAAnB,EAAgC;AAC9B,uBAAK,aAAL,CAAmB,MAAnB,CAA0B,SAA1B;AACD;;AARI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;EApFmB;;;;;;ICRtB;;;;;AAKJ,iCAAY,MAAZ,EAA4B,WAA5B,EAAiD,IAAjD,EAA+D;AAAA;;AAAA;;AAC7D,8BAAM,WAAN;AACA,UAAK,MAAL,GAAc,MAAd;AACA,UAAK,WAAL,GAAmB,WAAnB;AACA,UAAK,IAAL,GAAY,IAAZ;AAJ6D;AAK9D;;;EAViC;;;;;;ICD9B;;;;;AACJ,qCAAY,WAAZ,EAA+B;AAAA;;AAAA,6BACvB,WADuB;AAE9B;;;EAHqC;;ACcxC,IAAM,eAAe,GAAG,KAAxB;;AASA,SAAS,aAAT,CAAuB,IAAvB,EAAmC;AACjC,SAAO,IAAI,IAAI,GAAR,IAAe,IAAI,GAAG,GAA7B;AACD;;AAED,SAAS,WAAT,CAAqB,MAArB,EAA2B;AACzB,SAAO,MAAM,IAAI,MAAM,CAAC,MAAjB,IAA2B,MAAM,CAAC,MAAP,CAAc,WAAhD;AACD;;AAUD,SAAS,QAAT,CAAkB,GAAlB,EAA6B;AAC3B,MAAM,KAAK,GAAG,GAAG,CAAC,KAAJ,CACZ,wEADY,CAAd;;AAGA,MAAI,KAAJ,EAAW;AACT,QAAM,SAAS,GAAG;AAChB,MAAA,QAAQ,EAAE,KAAK,CAAC,CAAD,CADC;AAEhB,MAAA,IAAI,EAAE,KAAK,CAAC,CAAD,CAFK;AAGhB,MAAA,QAAQ,EAAE,KAAK,CAAC,CAAD,CAHC;AAIhB,MAAA,IAAI,EAAE,KAAK,CAAC,CAAD,CAJK;AAKhB,MAAA,QAAQ,EAAE,KAAK,CAAC,CAAD,CALC;AAMhB,MAAA,MAAM,EAAE,KAAK,CAAC,CAAD,CANG;AAOhB,MAAA,IAAI,EAAE,KAAK,CAAC,CAAD,CAPK;AAQhB,MAAA,MAAM,EAAE;AARQ,KAAlB;;AAWA,QAAI,SAAS,CAAC,MAAV,CAAiB,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,UAAM,YAAY,GAAG,SAAS,CAAC,MAAV,CAAiB,SAAjB,CAA2B,CAA3B,CAArB;AACA,MAAA,SAAS,CAAC,MAAV,GAAmB,YAAY,CAC5B,KADgB,CACV,GADU,EAEhB,GAFgB,CAEZ,UAAC,EAAD;AAAA,eAAQ,EAAE,CAAC,KAAH,CAAS,GAAT,CAAR;AAAA,OAFY,EAGhB,MAHgB,CAGT,UAAC,IAAD,EAAO,IAAP,EAAe;AACrB,YAAI,CAAC,IAAI,CAAC,cAAL,CAAoB,IAAI,CAAC,CAAD,CAAxB,CAAL,EAAmC;AACjC,UAAA,IAAI,CAAC,IAAI,CAAC,CAAD,CAAL,CAAJ,GAAgB,IAAI,CAAC,CAAD,CAApB;AACD,SAFD,MAEO,IAAI,KAAK,CAAC,OAAN,CAAc,IAAI,CAAC,IAAI,CAAC,CAAD,CAAL,CAAlB,CAAJ,EAAkC;AACvC,UAAA,IAAI,CAAC,IAAI,CAAC,CAAD,CAAL,CAAJ,CAAc,IAAd,CAAmB,IAAI,CAAC,CAAD,CAAvB;AACD,SAFM,MAEA;AACL,UAAA,IAAI,CAAC,IAAI,CAAC,CAAD,CAAL,CAAJ,GAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAD,CAAL,CAAL,EAAgB,IAAI,CAAC,CAAD,CAApB,CAAhB;AACD;;AACD,eAAO,IAAP;AACD,OAZgB,EAYd,EAZc,CAAnB;AAaD;;AACD,WAAO,SAAP;AACD;;AACD,QAAM,IAAI,aAAJ,CAAkB,oBAAoB,GAAtC,CAAN;AACD;;AAED,SAAS,eAAT,CAAyB,MAAzB,EAAyC,GAAzC,EAAoD;AAClD,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAD,CAA1B;AACA,MAAM,EAAE,GAAG;AACT,IAAA,MAAM,EAAE,MADC;AAET,IAAA,IAAI,EAAE,SAAS,CAAC,IAFP;AAGT,IAAA,IAAI,EAAE,SAAS,CAAC;AAHP,GAAX;;AAKA,MAAI,SAAS,CAAC,MAAd,EAAsB;AACpB,IAAA,EAAE,CAAC,MAAH,GAAY,SAAS,CAAC,MAAtB;AACD;;AACD,SAAO,EAAP;AACD;;AAED,SAAS,cAAT,CACE,MADF,EAEE,GAFF,EAGE,OAHF,EAIE,IAJF,EAKE,KALF,EAKgB;AAEd,SAAO;AACL,IAAA,EAAE,EAAE,eAAe,CAAC,MAAD,EAAS,GAAT,CADd;AAEL,IAAA,OAAO,EAAE,OAFJ;AAGL,IAAA,IAAI,EAAE,IAHD;AAIL,IAAA,KAAK,EAAE;AAJF,GAAP;AAMD;;IAEK;AAMJ,oBACE,SADF,EAEE,QAFF,EAGE,MAHF,EAGuB;AAAA;;AAErB,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,eAAL,GAAuB,EAAvB;AACA,SAAK,QAAL,GAAgB,QAAhB;AACD;;;;WAEM,qBAAY,OAAZ,EAAgC;AAAA;;AACrC,aAAO,IAAI,OAAJ,CAA6B,UAAC,OAAD,EAAU,MAAV,EAAoB;AACtD,YAAM,iBAAiB,GAAG;AACxB,UAAA,OAAO,EAAP,OADwB;AAExB,UAAA,OAAO,EAAP,OAFwB;AAGxB,UAAA,MAAM,EAAN,MAHwB;AAIxB,UAAA,eAAe,EAAE,KAJO;AAKxB,UAAA,OAAO,EAAE,UAAU,CAAC,YAAK;AACvB,YAAAA,WAAG,CAAC,KAAJ,CAAU,sBAAV;AACA,YAAA,MAAM,CACJ,IAAI,aAAJ,oBACc,OAAO,CAAC,EAAR,CAAW,MADzB,mBACwC,OAAO,CAAC,EAAR,CAAW,IADnD,iBADI,CAAN;AAKA,YAAA,iBAAiB,CAAC,eAAlB,GAAoC,IAApC;AACD,WARkB,EAQhB,eARgB;AALK,SAA1B;;AAeA,QAAA,KAAI,CAAC,eAAL,CAAqB,IAArB,CAA0B,iBAA1B;AACD,OAjBM,CAAP;AAkBD;;;WAEM,+BAAmB;AAAA;;AAAA;AAEtB,YAAM,OAAO,GAAG,MAAI,CAAC,eAAL,CAAqB,CAArB,CAAhB,CAFsB;;AAItB,YAAI,CAAC,OAAO,CAAC,eAAb,EAA8B;AAC5B,cAAI;AACF,gBAAM,OAAO,GAAG,OAAO,CAAC,OAAxB;;AACA,YAAA,MAAI,CAAC,UAAL,CAAgB,OAAhB,EACG,IADH,CACQ,UAAC,QAAD;AAAA,qBAAc,OAAO,CAAC,OAAR,CAAgB,QAAhB,CAAd;AAAA,aADR,EAEG,KAFH,CAES,UAAC,CAAD;AAAA,qBAAO,OAAO,CAAC,MAAR,CAAe,CAAf,CAAP;AAAA,aAFT;;AAGA,YAAA,YAAY,CAAC,OAAO,CAAC,OAAT,CAAZ;AACD,WAND,CAME,OAAO,CAAP,EAAU;AACV,YAAAA,WAAG,CAAC,KAAJ,CAAU,gCAAV,EAA4C,CAA5C;AACA;AACD;AACF;;AACD,QAAA,MAAI,CAAC,eAAL,CAAqB,MAArB,CAA4B,CAA5B,EAA+B,CAA/B;AAhBsB;;AACxB,aAAO,KAAK,eAAL,CAAqB,MAArB,GAA8B,CAArC,EAAwC;AAAA;;AAAA,8BAYlC;AAIL;AACF;;;WAEM,iCAAqB;AAAA;;AAC1B,WAAK,eAAL,CAAqB,OAArB,CAA6B,UAAC,OAAD,EAAY;AACvC,QAAA,OAAO,CAAC,MAAR,CACE,IAAI,yBAAJ;AACE,gCAAwB,MAAI,CAAC,QAAL,CAAc,oBADxC,CADF;AAKA,QAAA,OAAO,CAAC,eAAR,GAA0B,IAA1B;AACA,QAAA,YAAY,CAAC,OAAO,CAAC,OAAT,CAAZ;AACD,OARD;AAUA,WAAK,eAAL,CAAqB,MAArB,CAA4B,CAA5B,EAA+B,KAAK,eAAL,CAAqB,MAApD;AACD;;;;yHAEM,iBAAiB,OAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,gBAAA,OADD,GACW,OAAO,CAAC,EADnB;AAEC,gBAAA,OAFD,GAEW,OAAO,CAAC,OAFnB;AAGC,gBAAA,IAHD,GAGQ,OAAO,CAAC,IAHhB;AAIC,gBAAA,KAJD,qBAIS,OAAO,CAAC,KAJjB,2DAI0B,KAAK,MAAL,CAAY,WAJtC;AAMC,gBAAA,WAND,GAMe;AAClB,kBAAA,IAAI,EAAE,OAAO,CAAC,IADI;AAElB,kBAAA,IAAI,EAAE,OAAO,CAAC,IAFI;AAGlB,kBAAA,MAAM,EAAE,OAAO,CAAC,MAHE;AAIlB,kBAAA,MAAM,EAAE,OAAO,CAAC,MAJE;AAKlB,kBAAA,OAAO,EAAE;AALS,iBANf;AAcC,gBAAA,eAdD,GAcmB,IAAIW,OAAJ,CACtB,KADsB,EAEtB,OAAO,CAAC,cAAD,CAAP,IAA2B,kBAFL,EAGtB,WAHsB,CAdnB;AAoBL,gBAAAX,WAAG,CAAC,KAAJ,CAAU,0BAAV,EAAsC,eAAtC;AApBK;AAAA,uBAsBe,KAAK,SAAL,CAAe,aAAf,CAA6B,eAA7B,EAA8C,IAA9C,CAtBf;;AAAA;AAsBC,gBAAA,KAtBD;AAwBL,gBAAAA,WAAG,CAAC,KAAJ,CAAU,oCAAV,EAAgD,KAAhD;;AAxBK,sBA0BD,WAAW,CAAC,KAAD,CAAX,IAAsB,CAAC,aAAa,CAAC,KAAK,CAAC,MAAN,CAAa,WAAb,CAAyB,IAA1B,CA1BnC;AAAA;AAAA;AAAA;;AAAA,sBA2BG,IAAI,qBAAJ,CACJ,KAAK,CAAC,MAAN,CAAa,WAAb,CAAyB,IADrB,EAEJ,KAAK,CAAC,MAAN,CAAa,WAAb,CAAyB,MAFrB,EAGJ,KAAK,CAAC,IAHF,CA3BH;;AAAA;AAAA,iDAkCE;AACL,kBAAA,MAAM,EAAE,KAAK,CAAC,MAAN,CAAa,WADhB;AAEL,kBAAA,OAAO,EAAE,KAAK,CAAC,MAAN,CAAa,YAFjB;AAGL,kBAAA,IAAI,EAAE,KAAK,CAAC;AAHP,iBAlCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAyCP;;;;;;;;AAQG;;;;WACI,cACL,MADK,EAEL,GAFK,EAKS;AAAA,UAFd,OAEc,uEAFK,EAEL;AAAA,UADd,IACc;AAAA,UAAd,KAAc;;AAEd,UAAI,KAAK,QAAL,CAAc,eAAlB,EAAmC;AACjC,eAAO,OAAO,CAAC,MAAR,CACL,IAAI,yBAAJ,CACE,wBAAwB,KAAK,QAAL,CAAc,oBADxC,CADK,CAAP;AAKD;;AAED,UAAM,eAAe,GAAG,cAAc,CAAC,MAAD,EAAS,GAAT,EAAc,OAAd,EAAuB,IAAvB,EAA6B,KAA7B,CAAtC;;AACA,UAAI,CAAC,KAAK,QAAL,CAAc,WAAnB,EAAgC;AAC9B,eAAO,KAAK,WAAL,CAAiB,eAAjB,CAAP;AACD;;AACD,aAAO,KAAK,UAAL,CAAgB,eAAhB,CAAP;AACD;;;;;;ICxPG;AAKJ,sBAAA;AAAA;;AAAA;;AACE,SAAK,QAAL,GAAgB,IAAI,OAAJ,CAAe,UAAC,OAAD,EAAU,MAAV,EAAoB;AACjD,MAAA,KAAI,CAAC,QAAL,GAAgB,OAAhB;AACA,MAAA,KAAI,CAAC,OAAL,GAAe,MAAf;AACD,KAHe,CAAhB;AAID;;;;SAED,eAAkB;AAChB,aAAO,KAAK,QAAZ;AACD;;;WAED,gBAAO,KAAP,EAAe;AACb,WAAK,QAAL,CAAc,KAAd;AACD;;;WAED,aAAI,KAAJ,EAAY;AACV,WAAK,QAAL,CAAc,KAAd;AACD;;;WAED,cAAK,CAAL,EAAa;AACX,WAAK,OAAL,CAAa,CAAb;AACD;;;;;;ICxBG;AAGJ,iCAAY,EAAZ,EAAsB;AAAA;;AACpB,SAAK,EAAL,GAAU,EAAV;AACD;;;;WAEM,gBAAc,cAAd,EAEN;AACC,UAAI,cAAc,YAAY,MAA1B,IAAoC,gBAAgB,cAAxD,EAAwE;AACtE,eAAO,IAAI,qBAAJ,CAA0B,cAAc,CAAC,UAAzC,CAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAI,aAAJ,CAAkB,+BAAlB,CAAN;AACD;AACF;;;;;;ICjBG;AAKJ,0BAAA;AAAA;;AAAA,iEAJ0B,+BAI1B;;AAAA,oEAH6B,4BAG7B;;AACE,QAAI,CAAC,YAAY,CAAC,SAAlB,EAA6B;AAC3B,WAAK,UAAL;AACA,MAAA,YAAY,CAAC,SAAb,GAAyB,IAAzB;AACD;;AACD,WAAO,YAAY,CAAC,SAApB;AACD;;;;WAEM,0BAAc;AACnB,UAAI;AACF,eAAO,MAAM,CAAC,gBAAD,CAAb;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,eAAO,IAAP;AACD;AACF;;;WAEM,kBAAM;AACX,UAAI;AACF,eAAO,MAAM,CAAC,QAAD,CAAb;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,eAAO,IAAP;AACD;AACF;;;WAEM,oBAAW,iBAAX,EAAsC,SAAtC,EAAuD;AAC5D,UAAI,KAAK,QAAL,EAAJ,EAAqB;AACnB,aAAK,cAAL,CAAoB,OAApB,CACE,KAAK,UAAL,CAAgB,SAAhB,CADF,EAEE,iBAFF;AAID;AACF;;;WAEM,wBAAe,SAAf,EAAgC;AACrC,UAAI,CAAC,KAAK,QAAL,EAAL,EAAsB;AACpB,eAAO,IAAP;AACD;;AAED,aAAO,KAAK,cAAL,CAAoB,OAApB,CAA4B,KAAK,UAAL,CAAgB,SAAhB,CAA5B,CAAP;AACD;;;WAEO,sBAAU;AAAA;;AAChB,UAAI,KAAK,QAAL,EAAJ,EAAqB;AACnB,YAAM,IAAI,GAAG,KAAK,cAAL,CAAoB,OAApB,CAA4B,KAAK,eAAjC,CAAb,CADmB;;AAInB,YAAI,IAAJ,EAAU;AACR,eAAK,KAAL;AACD;;AACD,aAAK,cAAL,CAAoB,OAApB,CAA4B,KAAK,eAAjC,EAAkD,MAAlD,EAPmB;;AAUnB,YAAM,iBAAiB,GAAG,KAAK,cAAL,CAAoB,UAA9C;AACA,aAAK,MAAL,CAAY,gBAAZ,CAA6B,QAA7B,EAAuC,YAAK;AAC1C,UAAA,iBAAiB,CAAC,KAAI,CAAC,eAAN,CAAjB;AACD,SAFD;AAGD;AACF;;;WAEM,iBAAK;AACV,UAAI,KAAK,QAAL,EAAJ,EAAqB;AACnB,YAAM,WAAW,GAAa,EAA9B;;AACA,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,cAAL,CAAoB,MAAxC,EAAgD,CAAC,EAAjD,EAAqD;AACnD,cAAM,GAAG,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,CAAxB,CAAZ,CADmD;AAGnD;AACA;;AACA,cAAI,GAAG,IAAI,GAAG,CAAC,OAAJ,CAAY,KAAK,kBAAjB,MAAyC,CAApD,EAAuD;AACrD,YAAA,WAAW,CAAC,IAAZ,CAAiB,GAAjB;AACD;AACF;;AACD,YAAM,iBAAiB,GAAG,KAAK,cAAL,CAAoB,UAA9C;AACA,QAAA,WAAW,CAAC,OAAZ,CAAoB,UAAC,GAAD;AAAA,iBAAS,iBAAiB,CAAC,GAAD,CAA1B;AAAA,SAApB;AACA,QAAA,iBAAiB,CAAC,KAAK,eAAN,CAAjB;AACD;AACF;;;WAEO,oBAAW,SAAX,EAA4B;AAClC,uBAAU,KAAK,kBAAf,SAAoC,SAApC;AACD;;;WAEO,oBAAQ;AAId,aAAO,CAAC,EAAE,KAAK,cAAL,IAAuB,KAAK,cAAL,CAAoB,MAA3C,IAAqD,KAAK,MAA5D,CAAR;AACD;;;;;;oCA3FG,2BAG4C;;AA2FlD,qBAAe,IAAI,YAAJ,EAAf;;ICzFM;AAGJ,qCACW,KADX,EAEW,OAFX,EAGW,KAHX,EAIE,GAJF,EAKW,IALX,EAMW,EANX,EAMsB;AAAA;;AALX,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,KAAA,GAAA,KAAA;AAEA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,EAAA,GAAA,EAAA;AAET,SAAK,GAAL,GAAW,GAAX;AACD;AAGD;;;;;WACO,4BAAgB;AACrB;AACA,UAAM,GAAG,GAAG,IAAI,IAAJ,EAAZ;AACA,UAAI,WAAW,GAAG,KAAK,KAAvB;AACA,UAAI,SAAS,GAAG,KAAK,GAAL,GAAW,KAAK,GAAhB,GAAsB,GAAtC;;AACA,UAAI,SAAS,GAAG,WAAhB,EAA6B;AAC3B,YAAM,GAAG,GAAG,SAAZ;AACA,QAAA,SAAS,GAAG,WAAZ;AACA,QAAA,WAAW,GAAG,GAAd;AACD,OAToB;;;AAYrB,UAAM,WAAW,GAAG,WAAW,CAAC,OAAZ,KAAwB,GAAG,CAAC,OAAJ,EAA5C;AACA,UAAM,SAAS,GAAG,SAAS,CAAC,OAAV,KAAsB,GAAG,CAAC,OAAJ,EAAxC;AAEA,UAAM,MAAM,GAAG,IAAI,cAAJ,CACb,WADa,EAEb,SAFa,EAGb,KAAK,KAHQ,EAIb,KAAK,OAJQ,EAKb,KAAK,EALQ,EAMb,KAAK,IANQ,CAAf;AASA,aAAO,MAAP;AACD;;;;;;AAGEY;;AAAL,CAAA,UAAK,cAAL,EAAmB;AACjB,EAAA,cAAA,CAAA,cAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,EAAA,cAAA,CAAA,cAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA;AACD,CAHD,EAAKA,sBAAc,KAAdA,sBAAc,GAAA,EAAA,CAAnB;;AAKKC;;AAAL,CAAA,UAAK,sBAAL,EAA2B;AACzB,EAAA,sBAAA,CAAA,sBAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA;AACA,EAAA,sBAAA,CAAA,sBAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACA,EAAA,sBAAA,CAAA,sBAAA,CAAA,8BAAA,CAAA,GAAA,CAAA,CAAA,GAAA,8BAAA;AACD,CAJD,EAAKA,8BAAsB,KAAtBA,8BAAsB,GAAA,EAAA,CAA3B;;IAMM;AACJ;AAEA;AAImC;AACoB;AAKvD,4BAAY,MAAZ,EAAmC,eAAnC,EAAmE;AAAA;;AAAA,wEAXzB,EAWyB;;AAAA,wEATzB,GASyB;;AAAA,+DAN3C,IAAI,GAAJ,EAM2C;;AAAA,6DALhB,EAKgB;;AAAA,2EAJ/B,KAI+B;;AAAA,mEAFvC,KAEuC;;AACjE,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,eAAL,GAAuB,eAAvB;AACD;AAGD;;;;;SACA,eAAsB;AACpB,aAAO,KAAK,MAAL,CAAY,qBAAZ,CAAkC,GAAlC,CAAsC,cAAtC,CAAP;AACD;;;SAED,eAA2B;AACzB,aAAO,KAAK,iBAAL,IAA0B,KAAK,kBAAtC;AACD;SAED,aAA4B,MAA5B,EAA2C;AACzC,MAAAb,WAAG,CAAC,KAAJ,8CACwC,MADxC,mDACuF,KAAK,kBAD5F,GADyC;AAMzC;;AACA,UAAI,KAAK,iBAAL,IAA0B,CAAC,MAA/B,EAAuC;AACrC,aAAK,aAAL,CAAmB,KAAnB;AACA,aAAK,WAAL,GAAmB,EAAnB;AACD;;AAED,WAAK,iBAAL,GAAyB,MAAzB;;AAEA,UAAI,MAAJ,EAAY;AACV,aAAK,aAAL,CAAmBa,8BAAsB,CAAC,SAA1C;AACD;;AAED,UAAI,MAAM,IAAI,CAAC,KAAK,yBAApB,EAA+C;AAC7C,aAAK,yBAAL,GAAiC,IAAjC;AACD;AACF;;;;WAGM,2BAAkB,KAAlB,EAAkD;AACvD;AACA,UAAI,CAAC,KAAK,gBAAN,IAA0B,KAAK,yBAAnC,EAA8D;AAC5D;AACD;;AAED,WAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAtB;AACD;;;;WAGM,yBACL,eADK,EAEL,QAFK,EAGL,KAHK,EAGgB;AAErB,MAAAb,WAAG,CAAC,KAAJ,kBAEI,KAAK,KAAKY,sBAAc,CAAC,KAAzB,GAAiC,UAAjC,GAA8C,QAFlD,6BAGqB,QAHrB;AAKA,UAAM,MAAM,GAAG,KAAK,aAAL,CAAmB,GAAnB,CAAuB,QAAvB,CAAf;;AACA,UAAI,KAAK,KAAKA,sBAAc,CAAC,KAA7B,EAAoC;AAClC,YAAI,MAAJ,EAAY;AACV,UAAAZ,WAAG,CAAC,KAAJ,2CAA6C,QAA7C;AACD;;AACD,aAAK,aAAL,CAAmB,GAAnB,CAAuB,QAAvB,EAAiC,eAAjC;AACD,OALD,MAKO;AACL,YAAI,CAAC,MAAL,EAAa;AACX,UAAAA,WAAG,CAAC,IAAJ,6CAA8C,QAA9C;AACA;AACD;;AACD,aAAK,iBAAL,CACE,KAAK,KAAL,CAAW,KAAK,aAAL,CAAmB,GAAnB,CAAuB,QAAvB,CAAX,EAA6C,eAA7C,CADF;AAGA,aAAK,aAAL,CAAmB,MAAnB,CAA0B,QAA1B;AACD;AACF;;;WAEM,4BACL,YADK,EAC+B;AAEpC,UAAI,CAAC,KAAK,gBAAN,IAA0B,KAAK,WAAL,CAAiB,MAAjB,IAA2B,CAAzD,EAA4D;AAC1D,eAAO,EAAP,CAD0D;AAE3D;;AAED,UACE,YAAY,IAAIa,8BAAsB,CAAC,gBAAvC,IACA,KAAK,WAAL,CAAiB,MAAjB,GAA0B,KAAK,sBAFjC,EAGE;AACA,eAAO,EAAP;AACD;;AAED,aAAO,KAAK,mBAAL,CACL,YAAY,IAAIA,8BAAsB,CAAC,4BADlC,CAAP;AAGD;;;WAEO,6BACN,iBADM,EACoB;AAAA;;AAE1B,UAAM,mBAAmB,GAAG,IAAI,CAAC,GAAL,CAC1B,KAAK,WAAL,CAAiB,MADS,EAE1B,KAAK,sBAFqB,CAA5B;AAIA,UAAM,GAAG,GAAG,KAAK,WAAL,CAAiB,MAAjB,CAAwB,CAAxB,EAA2B,mBAA3B,CAAZ;;AAEA,UAAI,iBAAiB,IAAI,GAAG,CAAC,MAAJ,GAAa,KAAK,sBAA3C,EAAmE;AACjE,aAAK,aAAL,CAAmB,OAAnB,CAA2B,UAAC,KAAD,EAAQ,GAAR,EAAe;AACxC,cAAI,GAAG,CAAC,MAAJ,IAAc,KAAI,CAAC,sBAAvB,EAA+C;AAC7C,mBAD6C;AAE9C;;AACD,cAAM,KAAK,GAAG,KAAI,CAAC,aAAL,CAAmB,GAAnB,CAAuB,GAAvB,CAAd;;AACA,UAAA,KAAI,CAAC,aAAL,CAAmB,MAAnB,CAA0B,GAA1B;;AACA,UAAA,GAAG,CAAC,IAAJ,CACE,IAAI,yBAAJ,wBACkB,KAAK,CAAC,KADxB;AAEE,UAAA,KAAK,CAAC,OAFR,EAGE,KAAK,CAAC,KAHR,EAIE,IAJF;AAKE,UAAA,KAAK,CAAC,IALR,EAME,KAAK,CAAC,EANR,CADF;AAUD,SAhBD;AAiBD;;AAED,aAAO,GAAP;AACD;AAGD;AACA;AACA;AACA;;;;WACQ,eACN,KADM,EAEN,GAFM,EAEwB;AAE9B,aAAO,IAAI,yBAAJ,CACL,GAAG,CAAC,KAAJ,GAAY,GAAG,CAAC,KAAhB,GAAwB,KAAK,CAAC,KADzB,EAEL,GAAG,CAAC,OAAJ,GAAc,GAAG,CAAC,OAAlB,GAA4B,KAAK,CAAC,OAF7B,EAGL,KAAK,CAAC,KAHD,EAIL,GAAG,CAAC,GAJC,EAKL,GAAG,CAAC,IAAJ,GAAW,GAAG,CAAC,IAAf,GAAsB,KAAK,CAAC,IALvB,EAML,GAAG,CAAC,EAAJ,GAAS,GAAG,CAAC,EAAb,GAAkB,KAAK,CAAC,EANnB,CAAP;AAQD;;;WAEM,kDAAsC;AAC3C,WAAK,aAAL,CAAmBA,8BAAsB,CAAC,gBAA1C;AACD;AAGD;;;;WACO,uBAAc,KAAd,EAA2C;AAChD,UAAM,MAAM,GAAG,KAAK,kBAAL,CAAwB,KAAxB,CAAf;;AAEA,UAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AACvB,eADuB;AAExB;;AAED,UAAI;AACF,aAAK,eAAL,CAAqB,IAArB,CACE,IAAI,SAAJ,CAAc,MAAM,CAAC,GAAP,CAAW,UAAC,CAAD;AAAA,iBAAO,CAAC,CAAC,gBAAF,EAAP;AAAA,SAAX,CAAd,CADF;AAGD,OAJD,CAIE,OAAO,GAAP,EAAY;AACZ,QAAAb,WAAG,CAAC,KAAJ,+BACyB,MAAM,CAAC,MADhC,sCACkE,GADlE;AAGA,aAAK,WAAL,GAAmB,KAAK,WAAL,CAAiB,MAAjB,CAAwB,MAAxB,CAAnB;AACD;AACF;;;;;;;;;ICnNU,eAAb;AAAA;AAAA;AA8CA;;;;;;;;;;;AAWG;;oCAzDU,qCAC+B;;oCAD/B,kCAE4B;;AA6DnCc,sBAAN;AAAA;;AAAA;;AAYE;;;;AAIG;AACH,0BACE,KADF,EAEE,SAFF,EAGE,OAHF,EAGqC;AAAA;;AAAA;;AAEnC;;AAFmC,sGAbX,OAaW;;AAAA,qHAVnC,IAAI,QAAJ,EAUmC;;AAInC,IAAA,OAAO,CAAC,iBAAR,GAA4B,OAAO,CAAC,iBAAR,GACxB,OAAO,CAAC,iBADgB,GAExBC,cAAY,CAAC,cAAb,CAA4B,SAA5B,CAFJ;AAIA,QAAM,MAAM,GAAI,MAAK,MAAL,GAAc,IAAI,aAAJ,CAAkB,KAAlB,EAAyB,SAAzB,EAAoC,OAApC,CAA9B;AAEA,IAAAf,WAAG,CAAC,QAAJ,CAAa,MAAM,CAAC,QAApB;AAEA,QAAM,SAAS,GAAG,IAAI,gBAAJ,CAAqB,MAAM,CAAC,GAA5B,CAAlB;AAEA,QAAM,SAAS,GAAG,IAAI,eAAJ,CAAoB,SAApB,EAA+B,MAA/B,CAAlB;AACA,UAAK,OAAL,GAAe,IAAI,eAAJ,CAAoB,SAApB,EAA+B,SAA/B,EAA0C,MAA1C,CAAf;AACA,UAAK,aAAL,GAAqB,IAAI,aAAJ,CAAkB,SAAlB,CAArB;AAEA,UAAK,QAAL,GAAgB,IAAI,QAAJ,CAAa,SAAb,EAAwB,MAAK,OAA7B,EAAsC,MAAtC,CAAhB,CAlBmC;;AAqBnC,UAAK,gBAAL,GAAwB,IAAI,gBAAJ,CAAqB,MAArB,EAA6B,SAA7B,CAAxB;;AACA,UAAK,OAAL,CAAa,EAAb,CACE,aADF,EAEE;AAAA,aAAO,MAAK,gBAAL,CAAsB,gBAAtB,GAAyC,IAAhD;AAAA,KAFF;;AAIA,IAAA,SAAS,CAAC,EAAV,CACE,cADF,EAEE;AAAA,aAAO,MAAK,gBAAL,CAAsB,gBAAtB,GAAyC,KAAhD;AAAA,KAFF;;AAKA,UAAK,aAAL,CAAmB,EAAnB,CAAsB,YAAtB,EAAoC,UAAC,EAAD;AAAA,aAAQ,MAAK,IAAL,CAAU,YAAV,EAAwB,EAAxB,CAAR;AAAA,KAApC;;AAEA,UAAK,OAAL,CAAa,EAAb,CAAgB,SAAhB,EAA2B,UAAC,IAAD,EAAO,OAAP;AAAA,aACzB,UAAU,CAAC;AAAA,eAAM,MAAK,IAAL,CAAU,SAAV,EAAqB,IAArB,EAA2B,OAA3B,CAAN;AAAA,OAAD,EAA4C,CAA5C,CADe;AAAA,KAA3B;;AAIA,UAAK,OAAL,CAAa,EAAb,CAAgB,cAAhB,EAAgC,UAAC,KAAD;AAAA,aAC9B,UAAU,CAAC;AAAA,eAAM,MAAK,IAAL,CAAU,cAAV,EAA0B,KAA1B,CAAN;AAAA,OAAD,EAAyC,CAAzC,CADoB;AAAA,KAAhC;;AAIA,UAAK,OAAL,CAAa,EAAb,CAAgB,iBAAhB,EAAmC,UAAC,eAAD;AAAA,aACjC,UAAU,CAAC;AAAA,eAAM,MAAK,IAAL,CAAU,iBAAV,EAA6B,eAA7B,CAAN;AAAA,OAAD,EAAsD,CAAtD,CADuB;AAAA,KAAnC;;AAIA,UAAK,OAAL,CAAa,EAAb,CAAgB,oBAAhB,EAAsC;AAAA,aACpC,UAAU,CAAC;AAAA,eAAM,MAAK,IAAL,CAAU,oBAAV,CAAN;AAAA,OAAD,EAAwC,CAAxC,CAD0B;AAAA,KAAtC;;AAGA,UAAK,OAAL,CAAa,EAAb,CAAgB,cAAhB,EAAgC;AAAA,aAC9B,UAAU,CAAC;AAAA,eAAM,MAAK,IAAL,CAAU,cAAV,CAAN;AAAA,OAAD,EAAkC,CAAlC,CADoB;AAAA,KAAhC;;AAIA,UAAK,OAAL,CAAa,EAAb,CAAgB,WAAhB,EAA6B;AAAA,aAC3B,MAAK,aAAL,CAAmB,mBAAnB,EAD2B;AAAA,KAA7B;;AAGA,UAAK,OAAL,CAAa,EAAb,CAAgB,WAAhB,EAA6B;AAAA,aAAM,MAAK,QAAL,CAAc,mBAAd,EAAN;AAAA,KAA7B;;AACA,UAAK,OAAL,CAAa,EAAb,CAAgB,WAAhB,EAA6B;AAAA,aAC3B,UAAU,CAAC;AAAA,eAAM,MAAK,IAAL,CAAU,WAAV,CAAN;AAAA,OAAD,EAA+B,CAA/B,CADiB;AAAA,KAA7B,EAxDmC;;;AA6DnC,UAAK,OAAL,CAAa,EAAb,CAAgB,eAAhB,EAAiC;AAAA,aAC/B,MAAK,gBAAL,CAAsB,eAAtB,CACE,IAAI,yBAAJ,CACE,gCADF,EAEE,EAFF,EAGE,IAAI,IAAJ,EAHF,CADF,EAME,eAAe,CAAC,gBANlB,EAOEY,sBAAc,CAAC,KAPjB,CAD+B;AAAA,KAAjC;;AAYA,UAAK,OAAL,CAAa,EAAb,CAAgB,WAAhB,EAA6B;AAAA,aAC3B,MAAK,gBAAL,CAAsB,eAAtB,CACE,IAAI,yBAAJ,CACE,gCADF,EAEE,EAFF,EAGE,IAAI,IAAJ,EAHF,EAIE,IAAI,IAAJ,EAJF,CADF,EAOE,eAAe,CAAC,gBAPlB,EAQEA,sBAAc,CAAC,GARjB,CAD2B;AAAA,KAA7B;;AAaA,UAAK,OAAL,CAAa,EAAb,CAAgB,gBAAhB,EAAkC;AAAA,aAChC,MAAK,gBAAL,CAAsB,eAAtB,CACE,IAAI,yBAAJ,CAA8B,oBAA9B,EAAoD,EAApD,EAAwD,IAAI,IAAJ,EAAxD,CADF,EAEE,eAAe,CAAC,aAFlB,EAGEA,sBAAc,CAAC,KAHjB,CADgC;AAAA,KAAlC;;AAQA,UAAK,OAAL,CAAa,EAAb,CAAgB,aAAhB,EAA+B;AAAA,aAC7B,MAAK,gBAAL,CAAsB,eAAtB,CACE,IAAI,yBAAJ,CACE,oBADF,EAEE,WAFF,EAGE,IAAI,IAAJ,EAHF,EAIE,IAAI,IAAJ,EAJF,CADF,EAOE,eAAe,CAAC,aAPlB,EAQEA,sBAAc,CAAC,GARjB,CAD6B;AAAA,KAA/B;;AAaA,UAAK,OAAL,CAAa,EAAb,CAAgB,gBAAhB,EAAkC;AAAA,aAChC,MAAK,gBAAL,CAAsB,eAAtB,CACE,IAAI,yBAAJ,CACE,oBADF,EAEE,QAFF,EAGE,IAAI,IAAJ,EAHF,EAIE,IAAI,IAAJ,EAJF,CADF,EAOE,eAAe,CAAC,aAPlB,EAQEA,sBAAc,CAAC,GARjB,CADgC;AAAA,KAAlC;;AAaA,UAAK,OAAL,CAAa,EAAb,CAAgB,aAAhB,EAA+B,UAAC,SAAD,EAAyB;AACtD,YAAK,eAAL,CAAqB,SAArB,EAAgC,SAAhC;;AACA,MAAAG,cAAY,CAAC,UAAb,CAAwB,SAAS,CAAC,iBAAlC,EAAqD,SAArD;AACA,MAAA,UAAU,CAAC;AAAA,eAAM,MAAK,IAAL,CAAU,aAAV,EAAyB,SAAzB,CAAN;AAAA,OAAD,EAA4C,CAA5C,CAAV;AACD,KAJD;;AAMA,UAAK,OAAL,CAAa,EAAb,CAAgB,cAAhB,EAAgC;AAAA,aAC9B,UAAU,CAAC;AAAA,eAAM,MAAK,IAAL,CAAU,cAAV,CAAN;AAAA,OAAD,EAAkC,CAAlC,CADoB;AAAA,KAAhC;;AAGA,UAAK,OAAL,CAAa,EAAb,CAAgB,cAAhB,EAAgC;AAAA,aAC9B,MAAK,QAAL,CAAc,qBAAd,EAD8B;AAAA,KAAhC;;AAGA,UAAK,OAAL,CAAa,EAAb,CAAgB,cAAhB,EAAgC;AAAA,aAC9B,MAAK,sBAAL,CAA4B,IAA5B,CAAiC,IAAI,aAAJ,CAAkB,qBAAlB,CAAjC,CAD8B;AAAA,KAAhC;;AAIA,UAAK,sBAAL,CAA4B,OAA5B,CAAoC,KAApC,CAA0C;AAAA,aAAM,KAAK,CAAX;AAAA,KAA1C;;AAxImC;AAyIpC;;AA7JH;AAAA;AAAA,WA+JS,cAAK,KAAL,EAA+C;AAAA;;AAAA,wCAAf,IAAe;AAAf,QAAA,IAAe;AAAA;;AACpD,MAAAf,WAAG,CAAC,KAAJ,oBACc,KAAK,CAAC,QAAN,EADd,cACkC,IAAI,CACjC,GAD6B,CACzB,UAAC,CAAD;AAAA,eAAO,IAAI,CAAC,SAAL,CAAe,CAAf,CAAP;AAAA,OADyB,EAE7B,IAF6B,CAExB,IAFwB,CADlC;AAKA,sJAAkB,KAAlB,SAA4B,IAA5B;AACD;AAtKH;AAAA;AAAA,WAwKU,yBAAgB,SAAhB,EAAmC,SAAnC,EAAuD;AAC7D,UAAI,CAAC,SAAS,CAAC,cAAf,EAA+B;AAC7B,aAAK,sBAAL,CAA4B,IAA5B,CACE,IAAI,aAAJ,CAAkB,uBAAlB,CADF;AAGD,OAJD,MAIO,IAAI,SAAS,CAAC,cAAV,CAAyB,cAAzB,CAAwC,SAAxC,CAAJ,EAAwD;AAC7D,YAAI;AACF,eAAK,sBAAL,CAA4B,GAA5B,CACE,qBAAqB,CAAC,MAAtB,CAA6B,SAAS,CAAC,cAAV,CAAyB,SAAzB,CAA7B,CADF;AAGA,UAAAA,WAAG,CAAC,KAAJ,gCAC0B,SAD1B,wBACiD,IAAI,CAAC,SAAL,CAC7C,SAAS,CAAC,cAAV,CAAyB,SAAzB,CAD6C,CADjD;AAKD,SATD,CASE,OAAO,CAAP,EAAU;AACV,eAAK,sBAAL,CAA4B,IAA5B,CACE,IAAI,aAAJ,+CACyC,SADzC,cACsD,IAAI,CAAC,SAAL,CAClD,SAAS,CAAC,cAAV,CAAyB,SAAzB,CADkD,CADtD,eAGQ,CAHR,OADF;AAOD;AACF,OAnBM,MAmBA;AACL,aAAK,sBAAL,CAA4B,IAA5B,CACE,IAAI,aAAJ,sCACgC,SADhC,wBACuD,IAAI,CAAC,SAAL,CACnD,SAAS,CAAC,cADyC,CADvD,EADF;AAOD;AACF;AAED;;;AAGG;;AA9ML;AAAA;AAAA,WA+MS,qBAAS;AACd,aAAO,KAAK,sBAAL,CAA4B,OAAnC;AACD;AAED;;;AAGG;;AAtNL;AAAA;AAAA,SAuNE,eAAsB;AACpB,aAAO,KAAK,OAAL,CAAa,WAApB;AACD;AAED;;;AAGG;;AA9NL;AAAA;AAAA,SA+NE,eAAgB;AACd,aAAO,KAAK,OAAL,CAAa,KAApB;AACD;AAED;;;;AAIG;;AAvOL;AAAA;AAAA;AAAA,0HAwOS,iBAAkB,KAAlB;AAAA;AAAA;AAAA;AAAA;AACL,gBAAAA,WAAG,CAAC,KAAJ,2BAA6B,KAA7B;;AADK,sBAED,KAAK,MAAL,CAAY,KAAZ,KAAsB,KAFrB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAML,qBAAK,MAAL,CAAY,WAAZ,CAAwB,KAAxB;AANK;AAAA,uBAOQ,KAAK,OAAL,CAAa,WAAb,CAAyB,KAAzB,CAPR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAxOT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkPE;;;;;;AAMG;;AAxPL;AAAA;AAAA;AAAA,sIAyPS,kBACL,SADK,EAEL,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAIC,KAAK,aAAL,CAAmB,uBAAnB,CAA2C,SAA3C,EAAsD,OAAtD,CAJD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAzPT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgQE;;;;;AAKG;;AArQL;AAAA;AAAA;AAAA,yIAsQS,kBAAiC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACC,KAAK,aAAL,CAAmB,0BAAnB,CAA8C,SAA9C,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAtQT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA0QE;;;;;AAKG;;AA/QL;AAAA;AAAA,WAgRS,mBAAO;AACZ,aAAO,KAAK,OAAL,CAAa,OAAb,EAAP;AACD;AAED;;;;;AAKG;;AAzRL;AAAA;AAAA;AAAA,yHA0RS;AAAA;AAAA;AAAA;AAAA;AACL,qBAAK,gBAAL,CAAsB,aAAtB,CACEa,8BAAsB,CAAC,4BADzB;AADK;AAAA,uBAIQ,KAAK,OAAL,CAAa,UAAb,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA1RT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiSE;;;;;;AAMG;;AAvSL;AAAA;AAAA;AAAA,mHAwSS,kBACL,GADK,EAEL,OAFK,EAGL,KAHK;AAAA;AAAA;AAAA;AAAA;AAKL,qBAAK,gBAAL,CAAsB,aAAtB,CAAoCA,8BAAsB,CAAC,SAA3D,EALK;;AAAA;AAAA,uBAMQ,KAAK,QAAL,CAAc,IAAd,CAAmB,KAAnB,EAA0B,GAA1B,EAA+B,OAA/B,EAAwC,SAAxC,EAAmD,KAAnD,CANR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAxST;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiTE;;;;;;;AAOG;;AAxTL;AAAA;AAAA;AAAA,mHAyTS,kBAGL,GAHK,EAIL,OAJK,EAKL,IALK,EAML,KANK;AAAA;AAAA;AAAA;AAAA;AAQL,qBAAK,gBAAL,CAAsB,aAAtB,CAAoCA,8BAAsB,CAAC,SAA3D,EARK;;AAAA;AAAA,uBASS,KAAK,QAAL,CAAc,IAAd,CACZ,MADY,EAEZ,GAFY,EAGZ,OAHY,EAIZ,IAJY,EAKZ,KALY,CATT;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAzTT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA2UE;;;;;;;AAOG;;AAlVL;AAAA;AAAA;AAAA,kHAmVS,kBACL,GADK,EAEL,OAFK,EAGL,IAHK,EAIL,KAJK;AAAA;AAAA;AAAA;AAAA;AAML,qBAAK,gBAAL,CAAsB,aAAtB,CAAoCA,8BAAsB,CAAC,SAA3D,EANK;;AAAA;AAAA,uBAOS,KAAK,QAAL,CAAc,IAAd,CACZ,KADY,EAEZ,GAFY,EAGZ,OAHY,EAIZ,IAJY,EAKZ,KALY,CAPT;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAnVT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmWE;;;;;;;AAOG;;AA1WL;AAAA;AAAA;AAAA,sHA2WS,kBAGL,GAHK,EAIL,OAJK,EAKL,IALK,EAML,KANK;AAAA;AAAA;AAAA;AAAA;AAQL,qBAAK,gBAAL,CAAsB,aAAtB,CAAoCA,8BAAsB,CAAC,SAA3D,EARK;;AAAA;AAAA,uBASS,KAAK,QAAL,CAAc,IAAd,CACZ,QADY,EAEZ,GAFY,EAGZ,OAHY,EAIZ,IAJY,EAKZ,KALY,CATT;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA3WT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6XE;;;;AAIG;;AAjYL;AAAA;AAAA,WAkYS,2BAAkB,KAAlB,EAAkD;AACvD,WAAK,gBAAL,CAAsB,iBAAtB,CAAwC,KAAxC;AACA,WAAK,gBAAL,CAAsB,sCAAtB,GAFuD;AAGxD;AAED;;;;;;AAMG;;AA7YL;AAAA;AAAA,WA8YS,kCACL,KADK,EAEL,QAFK,EAGL,KAHK,EAGgB;AAErB,WAAK,gBAAL,CAAsB,eAAtB,CAAsC,KAAtC,EAA6C,QAA7C,EAAuD,KAAvD;;AACA,UAAI,KAAK,KAAKD,sBAAc,CAAC,GAA7B,EAAkC;AAChC;AACA,aAAK,gBAAL,CAAsB,sCAAtB,GAFgC;AAGjC;AACF;AAxZH;;AAAA;AAAA,EAA6B,YAA7B;;AAAME,sBAAc,GAAA,UAAA,CAAA,CALnBE,iDAAwB,CAACC,uCAAD,EAAiBA,uCAAjB,EAAiC,CACxDC,mCADwD,EAExD,WAFwD,EAGxDC,gCAAO,CAAC,IAAD,CAHiD,CAAjC,CAKL,2DAAA,CAAA,EAAdL,sBAAc,CAAd;AA6ZN;;;;;;AAMG;;AAEH;;;;;;AAMG;;AAEH;;;;AAIG;;AAEH;;;;AAIG;;AAEH;;;AAGG;;AAEH;;;AAGG;;AAEH;;;AAGG;;AAEH;;;;AAIG;;AAEH;;;;;;;;AAQG;;ICrjBG;AAI4B;AAEhC,4BAAY,OAAZ,EAA2B;AAAA;;AACzB,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,IAAL,GAAY,KAAZ;AACA,SAAK,6BAAL,GAAqC,CAArC;AACA,SAAK,aAAL,GAAqB,EAArB;AACD;AAED;;;;;;;;;;AAUG;;;;;WACI,mCAA0B,KAA1B,EAAyC;AAC9C,UAAM,CAAC,GAAG,IAAI,GAAJ,CAAgB,KAAK,aAArB,CAAV,CAD8C;;AAG9C,WAAK,IAAM,GAAX,IAAkB,KAAlB,EAAyB;AACvB,QAAA,CAAC,CAAC,GAAF,CAAM,KAAK,CAAC,GAAD,CAAX;AACD;;AACD,WAAK,aAAL,GAAqB,KAAK,CAAC,IAAN,CAAW,CAAX,CAArB;AACD;;;;;;;;;;;"}