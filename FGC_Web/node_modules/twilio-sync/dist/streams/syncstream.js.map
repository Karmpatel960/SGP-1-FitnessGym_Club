{"version":3,"file":"syncstream.js","sources":["../../src/streams/syncstream.ts"],"sourcesContent":["import { EntityServices, RemovalHandler, SyncEntity } from '../entity';\nimport { PublishMessageRequest, PublishMessageResponse, StreamDescriptor } from './serverapi';\nimport Closeable from '../closeable';\nimport { nonNegativeInteger, pureObject, validateTypesAsync } from '@twilio/declarative-type-validator';\n\nexport interface SyncStreamServices extends EntityServices {\n}\n\n/**\n * Stream message descriptor.\n */\nexport interface SyncStreamMessage {\n  /**\n   * Stream message SID.\n   */\n  sid: string;\n\n  /**\n   * Stream message data.\n   */\n  data: object;\n}\n\nclass SyncStreamImpl extends SyncEntity {\n\n  private readonly descriptor: StreamDescriptor;\n\n  /**\n   * @internal\n   */\n  constructor(services: SyncStreamServices, descriptor: StreamDescriptor, removalHandler: RemovalHandler) {\n    super(services, removalHandler);\n    this.descriptor = descriptor;\n  }\n\n  // private props\n  get uri(): string {\n    return this.descriptor.url;\n  }\n\n  get links(): any {\n    return this.descriptor.links;\n  }\n\n  static get type() {\n    return 'stream';\n  }\n\n  get dateExpires(): string {\n    return this.descriptor.date_expires;\n  }\n\n  get type() {\n    return 'stream';\n  }\n\n  get lastEventId() {\n    return null;\n  }\n\n  // below properties are specific to Insights only\n  get indexName(): string {\n    return undefined;\n  }\n\n  get queryString(): string {\n    return undefined;\n  }\n\n  // public props, documented along with class description\n  get sid() {\n    return this.descriptor.sid;\n  }\n\n  get uniqueName() {\n    return this.descriptor.unique_name || null;\n  }\n\n  @validateTypesAsync(pureObject)\n  public async publishMessage(data: object): Promise<SyncStreamMessage> {\n    const requestBody: PublishMessageRequest = {data};\n    const response = await this.services.network.post(this.links.messages, requestBody);\n    const responseBody: PublishMessageResponse = response.body;\n\n    const event = this._handleMessagePublished(responseBody.sid, data, false);\n    return event;\n  }\n\n  @validateTypesAsync(nonNegativeInteger)\n  public async setTtl(ttl: number): Promise<void> {\n    try {\n      const requestBody = {ttl: ttl};\n      const response = await this.services.network.post(this.uri, requestBody);\n      this.descriptor.date_expires = response.body.date_expires;\n    } catch (error) {\n      if (error.status === 404) {\n        this.onRemoved(false);\n      }\n      throw error;\n    }\n  }\n\n  public async removeStream() {\n    await this.services.network.delete(this.uri);\n    this.onRemoved(true);\n  }\n\n  /**\n   * Handle event from the server\n   * @private\n   */\n  _update(update): void {\n    switch (update.type) {\n      case 'stream_message_published': {\n        this._handleMessagePublished(update.message_sid, update.message_data, true);\n        break;\n      }\n      case 'stream_removed': {\n        this.onRemoved(false);\n        break;\n      }\n    }\n  }\n\n  private _handleMessagePublished(sid: string, data: object, remote: boolean): SyncStreamMessage {\n    const event: SyncStreamMessage = {\n      sid: sid,\n      data: data\n    };\n\n    this.broadcastEventToListeners('messagePublished', {message: event, isLocal: !remote});\n    return event;\n  }\n\n  protected onRemoved(isLocal: boolean) {\n    this._unsubscribe();\n    this.removalHandler(this.type, this.sid, this.uniqueName);\n    this.broadcastEventToListeners('removed', {isLocal: isLocal});\n  }\n}\n\n/**\n * A Sync primitive for pub-sub messaging. Stream Messages are not persisted, exist\n * only in transit, and will be dropped if (due to congestion or network anomalies) they\n * cannot be delivered promptly. Use the {@link SyncClient.stream} method to obtain a reference to a Sync Message Stream.\n * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).\n */\nclass SyncStream extends Closeable {\n\n  private readonly syncStreamImpl: SyncStreamImpl;\n\n  // private props\n  get uri(): string {\n    return this.syncStreamImpl.uri;\n  }\n\n  get links(): any {\n    return this.syncStreamImpl.links;\n  }\n\n  static get type() {\n    return SyncStreamImpl.type;\n  }\n\n  get dateExpires(): string {\n    return this.syncStreamImpl.dateExpires;\n  }\n\n  get type() {\n    return SyncStreamImpl.type;\n  }\n\n  get lastEventId() {\n    return null;\n  }\n\n  /**\n   * The immutable system-assigned identifier of this stream. Never null.\n   */\n  get sid() {\n    return this.syncStreamImpl.sid;\n  }\n\n  /**\n   * A unique identifier optionally assigned to the stream on creation.\n   */\n  get uniqueName() {\n    return this.syncStreamImpl.uniqueName;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(syncStreamImpl: SyncStreamImpl) {\n    super();\n    this.syncStreamImpl = syncStreamImpl;\n    this.syncStreamImpl.attach(this);\n  }\n\n  /**\n   * Fired when a message is published to the stream either locally or by a remote actor.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * {@link SyncStreamMessage} `message` -  Published message\n   *     * boolean `isLocal` - equals true if the message was published by a local actor, false otherwise\n   * @example\n   * ```typescript\n   * stream.on('messagePublished', (args) => {\n   *   console.log('Stream message published');\n   *   console.log('Message SID:', args.message.sid);\n   *   console.log('Message data: ', args.message.data);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly messagePublished = 'messagePublished';\n\n  /**\n   * Fired when a stream is removed entirely, regardless of whether the remover was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * boolean `isLocal` - equals true if the stream was removed by a local actor, false otherwise\n   * @example\n   * ```typescript\n   * stream.on('removed', (args) => {\n   *   console.log(`Stream ${stream.sid} was removed`);\n   *   console.log('args.isLocal:', args.isLocal);\n   * });\n   * ```\n   * @event\n   */\n  static readonly removed = 'removed';\n\n  /**\n   * Publish a message to the stream. The system will attempt delivery to all online subscribers.\n   * @param data The body of the dispatched message. Maximum size in serialized JSON: 4KB.\n   * A rate limit applies to this operation, refer to the [Sync API documentation](https://www.twilio.com/docs/api/sync) for details.\n   * @return A promise which resolves after the message is successfully published\n   * to the Sync service. Resolves irrespective of ultimate delivery to any subscribers.\n   * @example\n   * ```typescript\n   * stream.publishMessage({ x: 42, y: 123 })\n   *   .then((message) => {\n   *     console.log('Stream publishMessage() successful, message SID:', message.sid);\n   *   })\n   *   .catch((error) => {\n   *     console.error('Stream publishMessage() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(pureObject)\n  public async publishMessage(data: object): Promise<SyncStreamMessage> {\n    this.ensureNotClosed();\n    return this.syncStreamImpl.publishMessage(data);\n  }\n\n  /**\n   * Update the time-to-live of the stream.\n   * @param ttl Specifies the TTL in seconds after which the stream is subject to automatic deletion. The value 0 means infinity.\n   * @return A promise that resolves after the TTL update was successful.\n   * @example\n   * ```typescript\n   * stream.setTtl(3600)\n   *   .then(() => {\n   *     console.log('Stream setTtl() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Stream setTtl() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async setTtl(ttl: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncStreamImpl.setTtl(ttl);\n  }\n\n  /**\n   * Permanently delete this Stream.\n   * @return A promise which resolves after the Stream is successfully deleted.\n   * @example\n   * ```typescript\n   * stream.removeStream()\n   *   .then(() => {\n   *     console.log('Stream removeStream() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Stream removeStream() failed', error);\n   *   });\n   * ```\n   */\n  public async removeStream() {\n    this.ensureNotClosed();\n    return this.syncStreamImpl.removeStream();\n  }\n\n  /**\n   * Conclude work with the stream instance and remove all event listeners attached to it.\n   * Any subsequent operation on this object will be rejected with error.\n   * Other local copies of this stream will continue operating and receiving events normally.\n   * @example\n   * ```typescript\n   * stream.close();\n   * ```\n   */\n  public close(): void {\n    super.close();\n    this.syncStreamImpl.detach(this.listenerUuid);\n  }\n\n}\n\nexport { SyncStream, SyncStreamImpl };\nexport default SyncStream;\n"],"names":["SyncEntity","__decorate","validateTypesAsync","pureObject","nonNegativeInteger","Closeable"],"mappings":"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"}