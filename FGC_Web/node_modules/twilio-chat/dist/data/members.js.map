{"version":3,"file":"members.js","sources":["../../src/data/members.ts"],"sourcesContent":["import {\n  MemberDescriptor,\n  Member,\n  MemberUpdatedEventArgs,\n  MemberUpdateReason\n} from '../member';\nimport { Logger } from '../logger';\n\nimport { Channel } from '../channel';\n\nimport { SyncMap, SyncClient } from 'twilio-sync';\nimport { Users } from './users';\nimport { CommandExecutor } from '../commandexecutor';\nimport { JoinChannelRequest, JoinChannelResponse } from '../interfaces/commands/joinchannel';\nimport { Configuration } from '../configuration';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype MembersEvents = {\n  memberJoined: (member: Member) => void;\n  memberLeft: (member: Member) => void;\n  memberUpdated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope('Members');\n\nexport interface MembersServices {\n  syncClient: SyncClient;\n  users: Users;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MembersLinks {\n  participants: string;\n}\n\n/**\n * @classdesc Represents the collection of members for the channel\n * @fires Members#memberJoined\n * @fires Members#memberLeft\n * @fires Members#memberUpdated\n */\nclass Members extends ReplayEventEmitter<MembersEvents> {\n\n  rosterEntityPromise: Promise<SyncMap>;\n\n  constructor(\n    public readonly channel: Channel,\n    public readonly members: Map<string, Member>,\n    private readonly links: MembersLinks,\n    private readonly configuration: Configuration,\n    private readonly services: MembersServices\n  ) {\n    super();\n  }\n\n  public async unsubscribe(): Promise<void> {\n    if (this.rosterEntityPromise) {\n      let entity = await this.rosterEntityPromise;\n      entity.close();\n      this.rosterEntityPromise = null;\n    }\n  }\n\n  public async subscribe(rosterObjectName: string) {\n    return this.rosterEntityPromise = this.rosterEntityPromise\n      || this.services.syncClient.map({ id: rosterObjectName, mode: 'open_existing' })\n             .then(rosterMap => {\n               rosterMap.on('itemAdded', args => {\n                 log.debug(this.channel.sid + ' itemAdded: ' + args.item.key);\n                 this.upsertMember(args.item.key, args.item.data)\n                     .then(member => {\n                       this.emit('memberJoined', member);\n                     });\n               });\n\n               rosterMap.on('itemRemoved', args => {\n                 log.debug(this.channel.sid + ' itemRemoved: ' + args.key);\n                 let memberSid = args.key;\n                 if (!this.members.has(memberSid)) {\n                   return;\n                 }\n                 let leftMember = this.members.get(memberSid);\n                 this.members.delete(memberSid);\n                 this.emit('memberLeft', leftMember);\n               });\n\n               rosterMap.on('itemUpdated', args => {\n                 log.debug(this.channel.sid + ' itemUpdated: ' + args.item.key);\n                 this.upsertMember(args.item.key, args.item.data);\n               });\n\n               let membersPromises = [];\n               let that = this;\n               const rosterMapHandler = function(paginator) {\n                 paginator.items.forEach(item => { membersPromises.push(that.upsertMember(item.key, item.data)); });\n                 return paginator.hasNextPage ? paginator.nextPage().then(rosterMapHandler) : null;\n               };\n\n               return rosterMap\n                 .getItems()\n                 .then(rosterMapHandler)\n                 .then(() => Promise.all(membersPromises))\n                 .then(() => rosterMap);\n             })\n             .catch(err => {\n               this.rosterEntityPromise = null;\n               if (this.services.syncClient.connectionState != 'disconnected') {\n                 log.error('Failed to get roster object for channel', this.channel.sid, err);\n               }\n               log.debug('ERROR: Failed to get roster object for channel', this.channel.sid, err);\n               throw err;\n             });\n  }\n\n  public async upsertMember(memberSid: string, data: MemberDescriptor): Promise<Member> {\n    let member = this.members.get(memberSid);\n    if (member) {\n      return member._update(data);\n    }\n\n    const links = {\n      self: `${this.links.participants}/${memberSid}`\n    };\n\n    member = new Member(data, memberSid, this.channel, links, this.services);\n    this.members.set(memberSid, member);\n    member.on('updated', (args: MemberUpdatedEventArgs) => this.emit('memberUpdated', args));\n    return member;\n  }\n\n  /**\n   * @returns {Promise<Array<Member>>} returns list of members {@see Member}\n   */\n  public async getMembers(): Promise<Array<Member>> {\n    return this.rosterEntityPromise.then(() => {\n      let members = [];\n      this.members.forEach((member) => members.push(member));\n      return members;\n    });\n  }\n\n  /**\n   * Get member by SID from channel\n   * @returns {Promise<Member>}\n   */\n  public async getMemberBySid(memberSid: string): Promise<Member> {\n    return this.rosterEntityPromise.then(() => {\n      let member = this.members.get(memberSid);\n      if (!member) {\n        throw new Error('Member with SID ' + memberSid + ' was not found');\n      }\n      return member;\n    });\n  }\n\n  /**\n   * Get member by identity from channel\n   * @returns {Promise<Member>}\n   */\n  public async getMemberByIdentity(identity: string): Promise<Member> {\n    let foundMember = null;\n    return this.rosterEntityPromise.then(() => {\n      this.members.forEach((member) => {\n        if (member.identity === identity) {\n          foundMember = member;\n        }\n      });\n      if (!foundMember) {\n        throw new Error('Member with identity ' + identity + ' was not found');\n      }\n      return foundMember;\n    });\n  }\n\n  /**\n   * Add user to the channel\n   * @returns {Promise<any>}\n   */\n  public async add(identity: string): Promise<JoinChannelResponse> {\n    return await this.services.commandExecutor.mutateResource<JoinChannelRequest, JoinChannelResponse>(\n      'post',\n      this.links.participants,\n      {\n        identity\n      }\n    );\n  }\n\n  /**\n   * Invites user to the channel\n   * User can choose either to join or not\n   * @returns {Promise<any>}\n   */\n  public async invite(identity: string): Promise<any> {\n    return await this.services.commandExecutor.mutateResource(\n      'post',\n      this.channel.links.invites,\n      {\n        identity\n      }\n    );\n  }\n\n  /**\n   * Remove member from channel\n   * @returns {Promise<any>}\n   */\n  public async remove(identity: string): Promise<void> {\n    return await this.services.commandExecutor.mutateResource(\n      'delete',\n      `${this.links.participants}/${identity}`,\n    );\n  }\n}\n\nexport { Members };\n\n/**\n * Fired when member joined channel\n * @event Members#memberJoined\n * @type {Member}\n */\n\n/**\n * Fired when member left channel\n * @event Members#memberLeft\n * @type {Member}\n */\n\n/**\n * Fired when member updated\n * @event Members#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n"],"names":["Logger","ReplayEventEmitter","member","Member"],"mappings":"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"}