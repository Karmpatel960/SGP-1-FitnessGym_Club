{"version":3,"file":"client.js","sources":["../src/client.ts"],"sourcesContent":["import { Logger } from \"./logger\";\nimport { Configuration } from \"./configuration\";\nimport { Media, MediaCategory, MediaResponse } from \"./media\";\nimport { Transport } from \"./services/transport\";\nimport { Network } from \"./services/network\";\nimport { version } from \"../package.json\";\nimport * as loglevel from \"loglevel\";\nimport {\n  validateTypesAsync,\n  validateTypes,\n  nonEmptyString,\n  literal,\n  pureObject,\n  validateConstructorTypes,\n} from \"@twilio/declarative-type-validator\";\n\nconst log = Logger.scope(\"\");\n//log.setLevel('trace');\n\nexport type LogLevel = loglevel.LogLevelDesc | null;\n\nexport interface Options {\n  region?: string;\n  logLevel?: loglevel.LogLevelDesc;\n  transport?: Transport;\n}\n\n/**\n * @classdesc A Client provides an interface for Media Content Service\n */\n@validateConstructorTypes(\n  nonEmptyString,\n  nonEmptyString,\n  [nonEmptyString, literal(null)],\n  [pureObject, \"undefined\"]\n)\nclass Client {\n  // eslint-disable-next-line\n  private readonly transport: any;\n  private options: Options;\n  private network: Network;\n  private config: Configuration;\n  public static readonly version: string = version;\n\n  /**\n   * Base URLs must be full URLs with host. If host is not provided it will be generated from a default configuration\n   * template using options.region.\n   *\n   * @param {String} token - Access token\n   * @param {String} baseUrl - Base URL for Media Content Service Media resource, i.e. /v1/Services/{serviceSid}/Media\n   * @param {String} baseSetUrl - Base URL for Media Content Service MediaSet resource, i.e. /v1/Services/{serviceSid}/MediaSet\n   * @param {Client#ClientOptions} [options] - Options to customize the Client\n   */\n  constructor(\n    token: string,\n    baseUrl: string,\n    baseSetUrl: string | null,\n    options: Options = {}\n  ) {\n    this.options = options;\n    this.options.logLevel = this.options.logLevel ?? \"silent\";\n    this.config = new Configuration(token, baseUrl, baseSetUrl, this.options);\n\n    log.setLevel(this.options.logLevel);\n\n    this.options.transport = this.options.transport ?? new Transport();\n\n    this.transport = this.options.transport;\n    this.network = new Network(this.config, this.transport);\n  }\n\n  /**\n   * These options can be passed to Client constructor\n   * @typedef {Object} Client#ClientOptions\n   * @property {String} [logLevel='silent'] - The level of logging to enable. Valid options\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n   */\n\n  /**\n   * Update the token used for Client operations\n   * @param {String} token - The JWT string of the new token\n   * @returns {void}\n   */\n  @validateTypes(nonEmptyString)\n  public updateToken(token: string): void {\n    log.info(\"updateToken\");\n    this.config.updateToken(token);\n  }\n\n  /**\n   * Gets media from media service\n   * @param {String} sid - Media's SID\n   * @returns {Promise<Media>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async get(sid: string): Promise<Media> {\n    const response = await this.network.get(`${this.config.mediaUrl}/${sid}`);\n    return new Media(this.config, this.network, response.body);\n  }\n\n  /**\n   * Posts raw content to media service\n   * @param {String} contentType - content type of media\n   * @param {String|Buffer|Blob} media - content to post\n   * @param {MediaCategory|null} category - category for the media\n   * @returns {Promise<Media>}\n   */\n  public async post(\n    contentType: string,\n    media: string | Buffer | Blob,\n    category: MediaCategory | null,\n    filename?: string\n  ): Promise<Media> {\n    const response = await this.network.post(\n      this.config.mediaUrl,\n      category ?? \"media\",\n      media,\n      contentType,\n      filename\n    );\n    return new Media(this.config, this.network, response.body);\n  }\n\n  /**\n   * Posts FormData to media service. Can be used only with browser engine's FormData.\n   * In non-browser FormData case the method will do promise reject with\n   * new TypeError(\"Posting FormData supported only with browser engine's FormData\")\n   * @param {FormData} formData - form data to post\n   * @param {MediaCategory|null} category - category for the media\n   * @returns {Promise<Media>}\n   */\n  public async postFormData(\n    formData: FormData,\n    category?: MediaCategory | null\n  ): Promise<Media> {\n    const response = await this.network.post(\n      this.config.mediaUrl,\n      category ?? \"media\",\n      formData\n    );\n    return new Media(this.config, this.network, response.body);\n  }\n\n  /**\n   * Retrieve information about multiple media SIDs at the same time.\n   * @param mediaSids Array of Media SIDs to get information from.\n   */\n  public async mediaSetGet(mediaSids: string[]): Promise<Media[]> {\n    const query = {\n      command: \"get\",\n      list: mediaSids.map((sid) => ({ media_sid: sid })),\n    };\n    const response = await this.network.post(\n      `${this.config.mediaSetUrl}`,\n      null,\n      query,\n      \"application/json\"\n    );\n    return response.body.map((item) => {\n      if (item.code !== 200) {\n        throw new Error(\n          `Failed to obtain detailed information about Media items (failed SID ${item.media_record.sid})`\n        );\n      }\n      return new Media(this.config, this.network, item.media_record);\n    });\n  }\n}\n\n// Proper renames should happen in index.ts,\n// otherwise it might screw up exported TS types information.\nexport { Client, Media, MediaCategory };\n"],"names":["Logger","Client","Configuration","Transport","Network","Media","media","version","__decorate","validateTypes","nonEmptyString","validateTypesAsync","validateConstructorTypes","literal","pureObject"],"mappings":"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"}