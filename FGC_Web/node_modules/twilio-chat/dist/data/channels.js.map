{"version":3,"file":"channels.js","sources":["../../src/data/channels.ts"],"sourcesContent":["import { Logger } from '../logger';\nimport {\n  Channel,\n  ChannelUpdatedEventArgs,\n  ChannelUpdateReason\n} from '../channel';\n\nimport { SyncMap, SyncClient, SyncMapItem } from 'twilio-sync';\nimport { ChannelDescriptor } from '../channeldescriptor';\nimport { Users } from './users';\nimport { Network } from '../services/network';\nimport { TypingIndicator } from '../services/typingindicator';\nimport { McsClient } from '@twilio/mcs-client';\nimport { Deferred } from '../util/deferred';\nimport { Member, MemberUpdatedEventArgs, MemberUpdateReason } from '../member';\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason\n} from '../message';\nimport { UriBuilder } from '../util';\nimport { Configuration } from '../configuration';\nimport { CommandExecutor } from '../commandexecutor';\nimport { CreateChannelRequest } from '../interfaces/commands/createchannel';\nimport { ChannelResponse } from '../interfaces/commands/channel';\nimport { SyncPaginator } from '../syncpaginator';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype ChannelsEvents = {\n  channelAdded: (channel: Channel) => void;\n  channelJoined: (channel: Channel) => void;\n  channelInvited: (channel: Channel) => void;\n  channelLeft: (channel: Channel) => void;\n  channelRemoved: (channel: Channel) => void;\n  channelUpdated: (data: {\n    channel: Channel;\n    updateReasons: ChannelUpdateReason[];\n  }) => void;\n  memberJoined: (member: Member) => void;\n  memberLeft: (member: Member) => void;\n  memberUpdated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  typingEnded: (member: Member) => void;\n  typingStarted: (member: Member) => void;\n};\n\nconst log = Logger.scope('Channels');\n\nexport interface ChannelsServices {\n  syncClient: SyncClient;\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  commandExecutor: CommandExecutor;\n}\n\n/**\n * Represents channels collection\n * {@see Channel}\n */\nclass Channels extends ReplayEventEmitter<ChannelsEvents> {\n\n  public readonly channels: Map<string, Channel> = new Map<string, Channel>();\n  private readonly tombstones: Set<string> = new Set<string>();\n  private myChannelsFetched = false;\n  public myChannelsRead: Deferred<boolean> = new Deferred<boolean>();\n\n  constructor(\n    private readonly configuration: Configuration,\n    private readonly services: ChannelsServices\n  ) {\n    super();\n  }\n\n  private async getMap(): Promise<SyncMap> {\n    return await this.services.syncClient.map({\n      id: this.configuration.myConversations,\n      mode: 'open_existing'\n    });\n  }\n\n  /**\n   * Add channel to server\n   * @private\n   * @returns {Promise<Channel>} Channel\n   */\n  public async addChannel(options): Promise<Channel> {\n    let attributes;\n    if (typeof options.attributes === 'undefined') {\n      attributes = {};\n    } else {\n      attributes = options.attributes;\n    }\n\n    const response = await this.services.commandExecutor.mutateResource<CreateChannelRequest, ChannelResponse>(\n      'post',\n      this.configuration.links.conversations,\n      {\n        type: options.isPrivate ? 'private' : 'public',\n        unique_name: options.uniqueName,\n        friendly_name: options.friendlyName,\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined,\n      }\n    );\n\n    const channelSid = response.sid || null;\n    const channelDocument = response.sync_objects.conversation || null;\n    const links = {\n      self: response.url,\n      ...response.links\n    };\n\n    let existingChannel = this.channels.get(channelSid);\n    if (existingChannel) {\n      await existingChannel._subscribe();\n      return existingChannel;\n    }\n\n    let channel = new Channel(\n      {\n        channel: channelDocument,\n\n        entityName: null,\n        uniqueName: null,\n        attributes: null,\n        createdBy: null,\n        friendlyName: null,\n        lastConsumedMessageIndex: null,\n        type: options.isPrivate ? 'private' : 'public',\n        dateCreated: null,\n        dateUpdated: null\n      },\n      channelSid,\n      links,\n      this.configuration,\n      this.services\n    );\n\n    this.channels.set(channel.sid, channel);\n    this.registerForEvents(channel);\n\n    await channel._subscribe();\n    this.emit('channelAdded', channel);\n    return channel;\n  }\n\n  /**\n   * Fetch channels list and instantiate all necessary objects\n   */\n  public async fetchChannels(): Promise<Channels> {\n    try {\n      const map = await this.getMap();\n\n      map.on('itemAdded', args => {\n        log.debug(`itemAdded: ${args.item.key}`);\n        this.upsertChannel('sync', args.item.key, args.item.data);\n      });\n\n      map.on('itemRemoved', args => {\n        log.debug(`itemRemoved: ${args.key}`);\n        const sid = args.key;\n\n        if (!this.myChannelsFetched) {\n          this.tombstones.add(sid);\n        }\n\n        const channel = this.channels.get(sid);\n\n        if (!channel) {\n          return;\n        }\n\n        if (channel.status === 'joined' || channel.status === 'invited') {\n          channel._setStatus('notParticipating', 'sync');\n          this.emit('channelLeft', channel);\n        }\n\n        if (channel.isPrivate) {\n          this.channels.delete(sid);\n          this.emit('channelRemoved', channel);\n          channel.emit('removed', channel);\n        }\n      });\n\n      map.on('itemUpdated', args => {\n        log.debug(`itemUpdated: ${args.item.key}`);\n        this.upsertChannel('sync', args.item.key, args.item.data);\n      });\n\n      const myChannels = await this._fetchMyChannels();\n      const upserts = [];\n\n      for (const channel of myChannels) {\n        upserts.push(this.upsertChannel('rest', channel.channel_sid, channel));\n      }\n\n      this.myChannelsRead.set(true);\n\n      await Promise.all(upserts);\n\n      this.myChannelsFetched = true;\n      this.tombstones.clear();\n\n      log.debug('The channels list has been successfully fetched');\n\n      return this;\n    } catch (error) {\n      const errorMessage = 'Failed to fetch the channels list';\n\n      if (this.services.syncClient.connectionState !== 'disconnected') {\n        log.error(errorMessage, error);\n      }\n\n      log.debug(`ERROR: ${errorMessage}`, error);\n\n      throw error;\n    }\n  }\n\n  private async _wrapPaginator(page, op) {\n    return op(page.items)\n      .then(items => ({\n        items: items,\n        hasNextPage: page.hasNextPage,\n        hasPrevPage: page.hasPrevPage,\n        nextPage: () => page.nextPage().then(x => this._wrapPaginator(x, op)),\n        prevPage: () => page.prevPage().then(x => this._wrapPaginator(x, op))\n      }));\n  }\n\n  public async getChannels(args): Promise<SyncPaginator<Channel>> {\n    const channelsMap = await this.getMap();\n    const page = await channelsMap.getItems(args);\n    return this._wrapPaginator(page\n      , items => Promise.all(items.map((item: SyncMapItem) => this.upsertChannel('sync', item.key, item.data))));\n  }\n\n  public async getChannel(sid: string): Promise<Channel> {\n    const channelsMap = await this.getMap();\n    const page = await channelsMap.getItems({ key: sid });\n    const items = page.items.map((item: SyncMapItem) => this.upsertChannel('sync', item.key, item.data));\n    return items.length > 0 ? items[0] : null;\n  }\n\n  public async pushChannel(descriptor: Channel | ChannelDescriptor): Promise<Channel> {\n    const sid = descriptor.sid;\n    const data = {\n      entityName: null,\n      lastConsumedMessageIndex: descriptor.lastConsumedMessageIndex,\n      type: descriptor.type,\n      status: descriptor.status,\n      friendlyName: descriptor.friendlyName,\n      dateUpdated: descriptor.dateUpdated,\n      dateCreated: descriptor.dateCreated,\n      uniqueName: descriptor.uniqueName,\n      createdBy: descriptor.createdBy,\n      attributes: descriptor.attributes,\n      channel: descriptor instanceof ChannelDescriptor ? descriptor.channel : null,\n      notificationLevel: descriptor.notificationLevel,\n      sid: sid\n    };\n\n    return await this.upsertChannel('chat', sid, data);\n  }\n\n  private _updateChannel(source: Channels.DataSource, channel: Channel, data): void {\n    const areSourcesDifferent = channel._statusSource() !== undefined && source !== channel._statusSource();\n    const isChannelSourceSync = source !== 'rest' || channel._statusSource() === 'sync';\n\n    if (areSourcesDifferent && isChannelSourceSync && source !== 'sync') {\n      log.trace('upsertChannel: the channel is known from sync and it came from chat, ignoring', {\n        sid: channel.sid,\n        data: data.status,\n        channel: channel.status\n      });\n\n      return;\n    }\n\n    if (['joined', 'invited'].includes(data.status) && channel.status !== data.status) {\n      channel._setStatus(data.status, source);\n\n      let updateData: any = {};\n\n      if (data.notificationLevel !== undefined) {\n        updateData.notificationLevel = data.notificationLevel;\n      }\n\n      if (data.lastConsumedMessageIndex !== undefined) {\n        updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n      }\n\n      if (!isEqual(updateData, {})) {\n        channel._update(updateData);\n      }\n\n      channel._subscribe().then(() => {\n        this.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', channel);\n      });\n\n      return;\n    }\n\n    if (['joined', 'invited'].includes(channel.status) && data.status === 'notParticipating') {\n      channel._setStatus('notParticipating', source);\n      channel._update(data);\n      channel._subscribe().then(() => {\n        this.emit('channelLeft', channel);\n      });\n\n      return;\n    }\n\n    if (data.type === 'private' && data.status === 'notParticipating') {\n      channel._subscribe();\n\n      return;\n    }\n\n    channel._update(data);\n  }\n\n  private async upsertChannel(source: Channels.DataSource, sid: string, data): Promise<Channel> {\n    log.trace(`upsertChannel called for ${sid}`, data);\n    const channel = this.channels.get(sid);\n\n    // If the channel is known, update it\n    if (channel) {\n      log.trace(\n        `upsertChannel: the channel ${channel.sid} is known;` +\n        `its status is known from source ${channel._statusSource()} ` +\n        `and the update came from source ${source}`,\n        channel\n      );\n      this._updateChannel(source, channel, data);\n\n      await channel._subscribe();\n      return channel;\n    }\n\n    // If the channel is deleted, ignore it\n    if (['chat', 'rest'].includes(source) && this.tombstones.has(sid)) {\n      log.trace('upsertChannel: the channel is deleted but reappeared again from chat, ignoring', sid);\n\n      return null;\n    }\n\n    // If the channel is unknown, fetch it\n    log.trace(`upsertChannel: creating a local channel object with sid ${sid}`, data);\n    const baseLink = `${this.configuration.links.conversations}/${sid}`;\n    const links = {\n      self: baseLink,\n      messages: `${baseLink}/Messages`,\n      participants: `${baseLink}/Participants`,\n      invites: `${baseLink}/Invites`\n    };\n    const newChannel = new Channel(data, sid, links, this.configuration, this.services);\n    this.channels.set(sid, newChannel);\n\n    await newChannel._subscribe();\n    this.registerForEvents(newChannel);\n    this.emit('channelAdded', newChannel);\n\n    if (['joined', 'invited'].includes(data.status)) {\n      newChannel._setStatus(data.status, source);\n      this.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', newChannel);\n    }\n\n    return newChannel;\n  }\n\n  private onChannelRemoved(sid: string) {\n    let channel = this.channels.get(sid);\n    if (channel) {\n      this.channels.delete(sid);\n      this.emit('channelRemoved', channel);\n    }\n  }\n\n  private registerForEvents(channel) {\n    channel.on('removed', () => this.onChannelRemoved(channel.sid));\n    channel.on('updated', (args: ChannelUpdatedEventArgs) => this.emit('channelUpdated', args));\n    channel.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n    channel.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n    channel.on('memberUpdated', (args: MemberUpdatedEventArgs) => this.emit('memberUpdated', args));\n    channel.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n    channel.on('messageUpdated', (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n    channel.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n    channel.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n    channel.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n  }\n\n  private async _fetchMyChannels() {\n    let channels = [];\n    let pageToken: null | string = null;\n\n    do {\n      const url = new UriBuilder(this.configuration.links.myConversations);\n\n      if (pageToken) {\n        url.arg('PageToken', pageToken);\n      }\n\n      const response = await this.services.network.get(url.build());\n      const preProcessedChannels = response.body.conversations.map(\n        (channelDescriptor) => ({\n          descriptor: channelDescriptor,\n          channel_sid: channelDescriptor.conversation_sid,\n          status: channelDescriptor.status,\n          channel: channelDescriptor.sync_objects.conversation,\n          messages: channelDescriptor.sync_objects.messages,\n          roster: `${channelDescriptor.conversation_sid}.roster`,\n          lastConsumedMessageIndex: channelDescriptor.last_consumed_message_index,\n          notificationLevel: channelDescriptor.notification_level\n        })\n      );\n\n      pageToken = response.body.meta.next_token;\n      channels = [...channels, ...preProcessedChannels];\n    } while (pageToken);\n\n    return channels;\n  }\n}\n\nnamespace Channels {\n  export type DataSource = 'sync' | 'chat' | 'rest';\n}\n\nexport { Channel, Channels };\n"],"names":["Logger","ReplayEventEmitter","Deferred","channel","Channel","ChannelDescriptor","isEqual","UriBuilder"],"mappings":"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"}