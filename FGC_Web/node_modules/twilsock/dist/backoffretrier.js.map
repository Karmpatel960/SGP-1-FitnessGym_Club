{"version":3,"file":"backoffretrier.js","sources":["../src/backoffretrier.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\nimport { Retrier } from \"@twilio/operation-retrier\";\n\n/**\n * Retrier with backoff override capability\n */\ntype RetrierOptionsType = {\n  min: number;\n  max: number;\n  initial?: number;\n  maxAttemptsCount?: number;\n  maxAttemptsTime?: number;\n  randomness?: number;\n};\n\nclass BackoffRetrier extends EventEmitter {\n  private readonly options;\n  private newBackoff: number | null = null;\n  private usedBackoff: number | null = null;\n\n  private retrier: Retrier | null = null;\n\n  public get inProgress(): boolean {\n    return !!this.retrier;\n  }\n\n  constructor(options: RetrierOptionsType) {\n    super();\n    this.options = options ? { ...options } : {};\n  }\n\n  /**\n   * Should be called once per attempt series to start retrier.\n   */\n  public start(): void {\n    if (this.inProgress) {\n      throw new Error(\n        \"Already waiting for next attempt, call finishAttempt(success : boolean) to finish it\"\n      );\n    }\n    this.createRetrier();\n  }\n\n  /**\n   * Should be called to stop retrier entirely.\n   */\n  public stop(): void {\n    this.cleanRetrier();\n    this.newBackoff = null;\n    this.usedBackoff = null;\n  }\n\n  /**\n   * Modifies backoff for next attempt.\n   * Expected behavior:\n   * - If there was no backoff passed previously reschedulling next attempt to given backoff\n   * - If previous backoff was longer then ignoring this one.\n   * - If previous backoff was shorter then reschedulling with this one.\n   * With or without backoff retrier will keep growing normally.\n   * @param delay delay of next attempts in ms.\n   */\n  public modifyBackoff(delay: number): void {\n    this.newBackoff = delay;\n  }\n\n  /**\n   * Mark last emmited attempt as failed, initiating either next of fail if limits were hit.\n   */\n  public attemptFailed(): void {\n    if (!this.inProgress) {\n      throw new Error(\"No attempt is in progress\");\n    }\n\n    if (this.newBackoff) {\n      const shouldUseNewBackoff =\n        !this.usedBackoff || this.usedBackoff < this.newBackoff;\n      if (shouldUseNewBackoff) {\n        this.createRetrier();\n      } else {\n        this.retrier?.failed(new Error());\n      }\n    } else {\n      this.retrier?.failed(new Error());\n    }\n  }\n\n  public cancel(): void {\n    this.retrier?.cancel();\n  }\n\n  private cleanRetrier(): void {\n    this.retrier?.removeAllListeners();\n    this.retrier?.cancel();\n    this.retrier = null;\n  }\n\n  private getRetryPolicy(): RetrierOptionsType {\n    const clone = { ...this.options };\n\n    if (this.newBackoff) {\n      clone.min = this.newBackoff;\n      clone.max =\n        this.options.max && this.options.max > this.newBackoff\n          ? this.options.max\n          : this.newBackoff;\n    }\n\n    // As we're always skipping first attempt we should add one extra if limit is present\n    clone.maxAttemptsCount = this.options.maxAttemptsCount\n      ? this.options.maxAttemptsCount + 1\n      : undefined;\n\n    return clone;\n  }\n\n  private createRetrier(): void {\n    this.cleanRetrier();\n    const retryPolicy = this.getRetryPolicy();\n    this.retrier = new Retrier(retryPolicy);\n\n    this.retrier.once(\"attempt\", () => {\n      this.retrier?.on(\"attempt\", () => this.emit(\"attempt\"));\n      this.retrier?.failed(new Error(\"Skipping first attempt\"));\n    });\n\n    this.retrier.on(\"failed\", (err) => this.emit(\"failed\", err));\n\n    this.usedBackoff = this.newBackoff;\n    this.newBackoff = null;\n\n    this.retrier.start();\n    // .catch(err => {});\n  }\n}\n\nexport { BackoffRetrier };\n"],"names":["EventEmitter","Retrier"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,MAAM,cAAe,SAAQA,+BAAY;IAWvC,YAAY,OAA2B;QACrC,KAAK,EAAE,CAAC;QAVF,eAAU,GAAkB,IAAI,CAAC;QACjC,gBAAW,GAAkB,IAAI,CAAC;QAElC,YAAO,GAAmB,IAAI,CAAC;QAQrC,IAAI,CAAC,OAAO,GAAG,OAAO,qBAAQ,OAAO,IAAK,EAAE,CAAC;KAC9C;IAPD,IAAW,UAAU;QACnB,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;KACvB;;;;IAUM,KAAK;QACV,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM,IAAI,KAAK,CACb,sFAAsF,CACvF,CAAC;SACH;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;;;;IAKM,IAAI;QACT,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;KACzB;;;;;;;;;;IAWM,aAAa,CAAC,KAAa;QAChC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KACzB;;;;IAKM,aAAa;;QAClB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC9C;QAED,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM,mBAAmB,GACvB,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC;YAC1D,IAAI,mBAAmB,EAAE;gBACvB,IAAI,CAAC,aAAa,EAAE,CAAC;aACtB;iBAAM;gBACL,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;aACnC;SACF;aAAM;YACL,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;SACnC;KACF;IAEM,MAAM;;QACX,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM,EAAE,CAAC;KACxB;IAEO,YAAY;;QAClB,MAAA,IAAI,CAAC,OAAO,0CAAE,kBAAkB,EAAE,CAAC;QACnC,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM,EAAE,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;KACrB;IAEO,cAAc;QACpB,MAAM,KAAK,qBAAQ,IAAI,CAAC,OAAO,CAAE,CAAC;QAElC,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;YAC5B,KAAK,CAAC,GAAG;gBACP,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU;sBAClD,IAAI,CAAC,OAAO,CAAC,GAAG;sBAChB,IAAI,CAAC,UAAU,CAAC;SACvB;;QAGD,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB;cAClD,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,CAAC;cACjC,SAAS,CAAC;QAEd,OAAO,KAAK,CAAC;KACd;IAEO,aAAa;QACnB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1C,IAAI,CAAC,OAAO,GAAG,IAAIC,wBAAO,CAAC,WAAW,CAAC,CAAC;QAExC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE;;YAC3B,MAAA,IAAI,CAAC,OAAO,0CAAE,EAAE,CAAC,SAAS,EAAE,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACxD,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM,CAAC,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAC;SAC3D,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;QAE7D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;;KAEtB;;;;;"}