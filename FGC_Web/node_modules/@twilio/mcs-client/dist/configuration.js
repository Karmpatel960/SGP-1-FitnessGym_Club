/*
@license
Copyright (c) 2018, Twilio, Inc.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

*/
'use strict';

var global =
  typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : typeof window !== "undefined"
    ? window
    : {};

Object.defineProperty(exports, '__esModule', { value: true });

const MINIMUM_RETRY_DELAY = 1000;
const MAXIMUM_RETRY_DELAY = 4000;
const MAXIMUM_ATTEMPTS_COUNT = 3;
const RETRY_WHEN_THROTTLED = true;
const regionalMcsHost = (region) => `https://mcs.${region !== null && region !== void 0 ? region : "us1"}.twilio.com`;
const isFullUrl = (url) => url.startsWith("http");
const fullUrl = (partUrl, region) => `${!isFullUrl(partUrl) ? regionalMcsHost(region) : ""}${partUrl}`;
class Configuration {
    constructor(token, baseUrl, baseSetUrl, options) {
        var _a, _b, _c, _d, _e, _f;
        const constructorOptions = (_b = (_a = options.MCS) !== null && _a !== void 0 ? _a : options) !== null && _b !== void 0 ? _b : {};
        this.region = (_d = (_c = constructorOptions.region) !== null && _c !== void 0 ? _c : options.region) !== null && _d !== void 0 ? _d : 'us1';
        this.mediaUrl = fullUrl(baseUrl, this.region);
        this.mediaSetUrl = baseSetUrl ? fullUrl(baseSetUrl) : `${this.mediaUrl}Set`;
        this.token = token;
        this.retryWhenThrottledOverride =
            (_e = constructorOptions.retryWhenThrottledOverride) !== null && _e !== void 0 ? _e : RETRY_WHEN_THROTTLED;
        this.backoffConfigOverride = (_f = constructorOptions.backoffConfigOverride) !== null && _f !== void 0 ? _f : Configuration.backoffConfigDefault;
    }
    static get backoffConfigDefault() {
        return {
            min: MINIMUM_RETRY_DELAY,
            max: MAXIMUM_RETRY_DELAY,
            maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT,
        };
    }
    static get retryWhenThrottledDefault() {
        return RETRY_WHEN_THROTTLED;
    }
    updateToken(token) {
        this.token = token;
    }
}

exports.Configuration = Configuration;
//# sourceMappingURL=configuration.js.map
