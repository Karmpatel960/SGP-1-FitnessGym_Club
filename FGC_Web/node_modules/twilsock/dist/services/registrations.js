/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2016, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes javascript-state-machine under the following license.

    Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.


*/
'use strict';

var global =
  typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : typeof window !== "undefined"
    ? window
    : {};

Object.defineProperty(exports, '__esModule', { value: true });

var logger = require('../logger.js');
var _polyfillNode_events = require('../_virtual/_polyfill-node_events.js');
var uuid = require('uuid');
var twilsockerror = require('../error/twilsockerror.js');

/**
 * Registrations module handles all operations with registration contexts through twilsock.
 * Main role: it automatically refreshes all registrations after reconnect.
 */
class Registrations extends _polyfillNode_events['default'] {
    constructor(transport) {
        super();
        this.transport = transport;
        this.registrations = new Map();
        this.registrationsInProgress = new Map();
    }
    async putNotificationContext(contextId, context) {
        const header = {
            method: "put_notification_ctx",
            notification_ctx_id: contextId,
        };
        await this.transport.sendWithReply(header, context);
    }
    async deleteNotificationContext(contextId) {
        const message = {
            method: "delete_notification_ctx",
            notification_ctx_id: contextId,
        };
        await this.transport.sendWithReply(message);
    }
    async updateRegistration(contextId, context) {
        logger.log.debug("update registration for context", contextId);
        let registrationAttempts = this.registrationsInProgress.get(contextId);
        if (!registrationAttempts) {
            registrationAttempts = new Set();
            this.registrationsInProgress.set(contextId, registrationAttempts);
        }
        const attemptId = uuid.v4();
        registrationAttempts.add(attemptId);
        try {
            await this.putNotificationContext(contextId, context);
            logger.log.debug("registration attempt succeeded for context", context);
            registrationAttempts.delete(attemptId);
            if (registrationAttempts.size === 0) {
                this.registrationsInProgress.delete(contextId);
                this.emit("registered", contextId);
            }
        }
        catch (err) {
            logger.log.warn("registration attempt failed for context", context);
            logger.log.debug(err);
            registrationAttempts.delete(attemptId);
            if (registrationAttempts.size === 0) {
                this.registrationsInProgress.delete(contextId);
                this.emit("registrationFailed", contextId, err);
            }
        }
    }
    async updateRegistrations() {
        logger.log.trace(`refreshing ${this.registrations.size} registrations`);
        const promises = [];
        this.registrations.forEach((context, id) => {
            promises.push(this.updateRegistration(id, context));
        });
        await Promise.all(promises);
    }
    async setNotificationsContext(contextId, context) {
        if (!contextId || !context) {
            throw new twilsockerror.TwilsockError("Invalid arguments provided");
        }
        this.registrations.set(contextId, context);
        return await this.updateRegistration(contextId, context);
    }
    async removeNotificationsContext(contextId) {
        if (!this.registrations.has(contextId)) {
            return;
        }
        await this.deleteNotificationContext(contextId);
        if (this.transport.isConnected) {
            this.registrations.delete(contextId);
        }
    }
}

exports.Registrations = Registrations;
//# sourceMappingURL=registrations.js.map
