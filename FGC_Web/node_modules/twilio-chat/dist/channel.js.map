{"version":3,"file":"channel.js","sources":["../src/channel.ts"],"sourcesContent":["import { Logger } from './logger';\n\nimport { Members } from './data/members';\nimport { Member, MemberUpdatedEventArgs, MemberUpdateReason } from './member';\nimport { Messages } from './data/messages';\nimport { Message, MessageUpdatedEventArgs, MessageUpdateReason } from './message';\n\nimport { UriBuilder, parseToNumber } from './util';\nimport { UserDescriptor } from './userdescriptor';\nimport { Users } from './data/users';\nimport { Paginator } from './interfaces/paginator';\nimport { Channels } from './data/channels';\nimport { McsClient } from '@twilio/mcs-client';\n\nimport { SyncClient } from 'twilio-sync';\nimport { TypingIndicator } from './services/typingindicator';\nimport { Network } from './services/network';\nimport { validateTypesAsync, custom, literal, nonEmptyString, nonNegativeInteger, objectSchema } from '@twilio/declarative-type-validator';\nimport { Configuration } from './configuration';\nimport { CommandExecutor } from './commandexecutor';\nimport { JoinChannelRequest, JoinChannelResponse } from './interfaces/commands/joinchannel';\nimport { EditChannelRequest } from './interfaces/commands/editchannel';\nimport { ChannelResponse } from './interfaces/commands/channel';\nimport { EditNotificationLevelRequest } from './interfaces/commands/editnotificationlevel';\nimport { EditLastConsumedMessageIndexRequest, EditLastConsumedMessageIndexResponse } from './interfaces/commands/editlastconsumedmessageindex';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype ChannelEvents = {\n  memberJoined: (member: Member) => void;\n  memberInvited: (member: Member) => void;\n  memberLeft: (member: Member) => void;\n  memberUpdated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  typingEnded: (member: Member) => void;\n  typingStarted: (member: Member) => void;\n  updated: (data: {\n    channel: Channel;\n    updateReasons: ChannelUpdateReason[];\n  }) => void;\n  removed: (channel: Channel) => void;\n};\n\nconst log = Logger.scope('Channel');\n\nconst fieldMappings = {\n  lastMessage: 'lastMessage',\n  attributes: 'attributes',\n  createdBy: 'createdBy',\n  dateCreated: 'dateCreated',\n  dateUpdated: 'dateUpdated',\n  friendlyName: 'friendlyName',\n  lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n  notificationLevel: 'notificationLevel',\n  sid: 'sid',\n  status: 'status',\n  type: 'type',\n  uniqueName: 'uniqueName',\n  state: 'state'\n};\n\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n\ninterface ChannelServices {\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface ChannelInternalState {\n  uniqueName: string;\n  status: ChannelStatus;\n  type: ChannelType;\n  attributes: any;\n  createdBy?: string;\n  dateCreated: Date;\n  dateUpdated: Date;\n  friendlyName: string;\n  lastConsumedMessageIndex: number | null;\n  lastMessage?: LastMessage;\n  notificationLevel?: NotificationLevel;\n  state?: ChannelState;\n}\n\ninterface ChannelDescriptor {\n  channel: string;\n  entityName: string;\n  uniqueName: string;\n  attributes: any;\n  createdBy?: string;\n  friendlyName: string;\n  lastConsumedMessageIndex: number;\n  dateCreated: any;\n  dateUpdated: any;\n  type: ChannelType;\n  notificationLevel?: NotificationLevel;\n}\n\ninterface ChannelLinks {\n  self: string;\n  messages: string;\n  participants: string;\n  invites: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a channel.\n */\ntype ChannelUpdateReason =\n  | 'attributes'\n  | 'createdBy'\n  | 'dateCreated'\n  | 'dateUpdated'\n  | 'friendlyName'\n  | 'lastConsumedMessageIndex'\n  | 'state'\n  | 'status'\n  | 'uniqueName'\n  | 'lastMessage'\n  | 'notificationLevel';\n\n/**\n * The status of the channel, relative to the client: whether\n * the channel has been `joined` or the client is\n * `notParticipating` in the channel or has been `invited` to\n * the channel.\n */\ntype ChannelStatus = 'unknown' | 'notParticipating' | 'invited' | 'joined';\n\n/**\n * Channel type.\n */\ntype ChannelType = 'public' | 'private';\n\n/**\n * The user's notification level for the channel. Determines\n * whether the currently logged-in user will receive pushes for events\n * in this channel. Can be either `muted` or `default`, where\n * `default` defers to the global service push configuration.\n */\ntype NotificationLevel = 'default' | 'muted';\n\n/**\n * The conversational state of the channel.\n */\ntype ChannelState = {\n  /**\n   * The current state.\n   */\n  current: 'active' | 'inactive' | 'closed',\n\n  /**\n   * Date at which the latest channel state update happened.\n   */\n  dateUpdated: Date\n};\n\ninterface ChannelUpdatedEventArgs {\n  channel: Channel;\n  updateReasons: ChannelUpdateReason[];\n}\n\n/**\n * These options can be passed to {@link Channel.sendMessage}.\n */\ninterface SendMediaOptions {\n  /**\n   * Content type of media.\n   */\n  contentType: string;\n\n  /**\n   * Content to post.\n   */\n  media: string | Buffer;\n}\n\n/**\n * Information about the last message of a channel.\n */\ninterface LastMessage {\n  /**\n   * Message's index.\n   */\n  index?: number;\n\n  /**\n   *  Message's creation date.\n   */\n  dateCreated?: Date;\n}\n\n/**\n * A channel represents a remote channel of communication between multiple Programmable Chat clients.\n */\n\nclass Channel extends ReplayEventEmitter<ChannelEvents> {\n  private readonly channelState: ChannelInternalState;\n  private statusSource: Channels.DataSource;\n\n  private entityPromise: Promise<any>;\n  private entityName: string;\n  private entity: any;\n  private messagesEntity: any;\n  private membersEntity: Members;\n  private readonly members: any;\n\n  /**\n   * Unique system identifier of the channel.\n   */\n  public readonly sid: string;\n  public readonly links: ChannelLinks;\n  private readonly configuration: Configuration;\n  private readonly services: ChannelServices;\n\n  /**\n   * @internal\n   */\n  constructor(\n    descriptor: ChannelDescriptor,\n    sid: string,\n    links: ChannelLinks,\n    configuration: Configuration,\n    services: ChannelServices\n  ) {\n    super();\n\n    this.sid = sid;\n    this.links = links;\n    this.configuration = configuration;\n    this.services = services;\n\n    let attributes = descriptor.attributes || {};\n    let createdBy = descriptor.createdBy;\n    let dateCreated = parseTime(descriptor.dateCreated);\n    let dateUpdated = parseTime(descriptor.dateUpdated);\n    let friendlyName = descriptor.friendlyName || null;\n    let lastConsumedMessageIndex =\n      Number.isInteger(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n    let uniqueName = descriptor.uniqueName || null;\n\n    try {\n      JSON.stringify(attributes);\n    } catch (e) {\n      throw new Error('Attributes must be a valid JSON object.');\n    }\n\n    this.entityName = descriptor.channel;\n    this.channelState = {\n      uniqueName,\n      status: 'notParticipating',\n      type: descriptor.type,\n      attributes,\n      createdBy,\n      dateCreated,\n      dateUpdated,\n      friendlyName,\n      lastConsumedMessageIndex\n    };\n\n    if (descriptor.notificationLevel) {\n      this.channelState.notificationLevel = descriptor.notificationLevel;\n    }\n\n    const membersLinks = {\n      participants: this.links.participants\n    };\n\n    this.members = new Map();\n    this.membersEntity = new Members(this, this.members, membersLinks, this.configuration, this.services);\n    this.membersEntity.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n    this.membersEntity.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n    this.membersEntity.on('memberUpdated',\n      (args: MemberUpdatedEventArgs) => this.emit('memberUpdated', args));\n\n    this.messagesEntity = new Messages(this, this.configuration, services);\n    this.messagesEntity.on('messageAdded', message => this._onMessageAdded(message));\n    this.messagesEntity.on('messageUpdated',\n      (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n    this.messagesEntity.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n  }\n\n  /**\n   * Fired when a member has joined the channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - member that joined the channel\n   * @event\n   */\n  static readonly memberJoined = 'memberJoined';\n\n  /**\n   * Fired when a member has left the channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - member that left the channel\n   * @event\n   */\n  static readonly memberLeft = 'memberLeft';\n\n  /**\n   * Fired when data of a member has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Member} `member` - member that has received the update\n   *     * {@link MemberUpdateReason}[] `updateReasons` - array of reasons for update\n   * @event\n   */\n  static readonly memberUpdated = 'memberUpdated';\n\n  /**\n   * Fired when a new message has been added to the channel.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - message that has been added\n   * @event\n   */\n  static readonly messageAdded = 'messageAdded';\n\n  /**\n   * Fired when message is removed from the channel's message list.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - message that has been removed\n   * @event\n   */\n  static readonly messageRemoved = 'messageRemoved';\n\n  /**\n   * Fired when data of a message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} `message` - message that has received the update\n   *     * {@link MessageUpdateReason}[] `updateReasons` - array of reasons for update\n   * @event\n   */\n  static readonly messageUpdated = 'messageUpdated';\n\n  /**\n   * Fired when a member has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member that has stopped typing\n   * @event\n   */\n  static readonly typingEnded = 'typingEnded';\n\n  /**\n   * Fired when a member has started typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member that has started typing\n   * @event\n   */\n  static readonly typingStarted = 'typingStarted';\n\n  /**\n   * Fired when the data of the message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Channel} `channel` - channel that has received the update\n   *     * {@link ChannelUpdateReason}[] `updateReasons` - array of reasons for update\n   * @event\n   */\n  static readonly updated = 'updated';\n\n  /**\n   * Fired when the channel was destroyed or the currently-logged-in user has left private channel.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - channel that has been removed\n   * @event\n   */\n  static readonly removed = 'removed';\n\n  /**\n   * Delivery status of the channel.\n   */\n  public get status(): ChannelStatus { return this.channelState.status; }\n\n  /**\n   * MemberType of the channel.\n   */\n  public get type(): ChannelType { return this.channelState.type; }\n\n  /**\n   * Unique name of the channel.\n   */\n  public get uniqueName(): string { return this.channelState.uniqueName; }\n\n  /**\n   * Signifies whether the channel is private.\n   */\n  public get isPrivate(): boolean { return this.channelState.type === 'private'; }\n\n  /**\n   * Name of the channel.\n   */\n  public get friendlyName(): string { return this.channelState.friendlyName; }\n\n  /**\n   * Date this channel was last updated on.\n   */\n  public get dateUpdated(): any { return this.channelState.dateUpdated; }\n\n  /**\n   * Date this channel was created on.\n   */\n  public get dateCreated(): any { return this.channelState.dateCreated; }\n\n  /**\n   * Identity of the user that created this channel.\n   */\n  public get createdBy(): string { return this.channelState.createdBy; }\n\n  /**\n   * Custom attributes of the channel.\n   */\n  public get attributes(): Object { return this.channelState.attributes; }\n\n  /**\n   * Index of the last message the user has read in this channel.\n   */\n  public get lastConsumedMessageIndex(): number | null { return this.channelState.lastConsumedMessageIndex; }\n\n  /**\n   * Last message sent to this channel.\n   */\n  public get lastMessage(): LastMessage { return this.channelState.lastMessage; }\n\n  /**\n   * User notification level for this channel.\n   */\n  public get notificationLevel(): NotificationLevel { return this.channelState.notificationLevel; }\n\n  /**\n   * State of the channel.\n   */\n  public get state(): ChannelState | undefined { return this.channelState.state; }\n\n  /**\n   * Load and subscribe to this channel and do not subscribe to its members and messages.\n   * This or _subscribeStreams will need to be called before any events on channel will fire.\n   * @internal\n   */\n  async _subscribe() { // protected? private? used by others in module\n    if (this.entityPromise) { return this.entityPromise; }\n\n    return this.entityPromise = this.entityPromise ||\n      this.services.syncClient.document({ id: this.entityName, mode: 'open_existing' })\n        .then(entity => {\n          this.entity = entity;\n          this.entity.on('updated', args => { this._update(args.data); });\n          this.entity.on('removed', () => this.emit('removed', this));\n          this._update(this.entity.data);\n          return entity;\n        })\n        .catch(err => {\n          this.entity = null;\n          this.entityPromise = null;\n          if (this.services.syncClient.connectionState != 'disconnected') {\n            log.error('Failed to get channel object', err);\n          }\n          log.debug('ERROR: Failed to get channel object', err);\n          throw err;\n        });\n  }\n\n  /**\n   * Load the attributes of this channel and instantiate its members and messages.\n   * This or _subscribe will need to be called before any events on the channel will fire.\n   * This will need to be called before any events on members or messages will fire\n   * @internal\n   */\n  private async _subscribeStreams() {\n    try {\n      await this._subscribe();\n      log.trace('_subscribeStreams, this.entity.data=', this.entity.data);\n      const messagesObjectName = this.entity.data.messages;\n      const rosterObjectName = this.entity.data.roster;\n      await Promise.all([\n        this.messagesEntity.subscribe(messagesObjectName),\n        this.membersEntity.subscribe(rosterObjectName)\n      ]);\n    } catch (err) {\n      if (this.services.syncClient.connectionState !== 'disconnected') {\n        log.error('Failed to subscribe on channel objects', this.sid, err);\n      }\n      log.debug('ERROR: Failed to subscribe on channel objects', this.sid, err);\n      throw err;\n    }\n  }\n\n  /**\n   * Stop listening for and firing events on this channel.\n   * @internal\n   */\n  private async _unsubscribe() {\n    // Keep our subscription to public channels objects\n    if (this.isPrivate && this.entity) {\n      await this.entity.close();\n      this.entity = null;\n      this.entityPromise = null;\n    }\n\n    return Promise.all([\n      this.membersEntity.unsubscribe(),\n      this.messagesEntity.unsubscribe()\n    ]);\n  }\n\n  /**\n   * Set channel status.\n   * @internal\n   */\n  _setStatus(status: ChannelStatus, source: Channels.DataSource) {\n    this.statusSource = source;\n\n    if (this.channelState.status === status) { return; }\n\n    this.channelState.status = status;\n\n    if (status === 'joined') {\n      this._subscribeStreams()\n          .catch(err => {\n            log.debug('ERROR while setting channel status ' + status, err);\n            if (this.services.syncClient.connectionState !== 'disconnected') {\n              throw err;\n            }\n          });\n    } else if (status === 'invited') {\n      this._subscribe()\n          .catch(err => {\n            log.debug('ERROR while setting channel status ' + status, err);\n            if (this.services.syncClient.connectionState !== 'disconnected') {\n              throw err;\n            }\n          });\n    } else if (this.entityPromise) {\n      this._unsubscribe().catch(err => {\n        log.debug('ERROR while setting channel status ' + status, err);\n        if (this.services.syncClient.connectionState !== 'disconnected') {\n          throw err;\n        }\n      });\n    }\n  }\n\n  /**\n   * Update source of the channel.\n   * @internal\n   */\n  _statusSource(): Channels.DataSource {\n    return this.statusSource;\n  }\n\n  private static preprocessUpdate(update, channelSid) {\n    try {\n      if (typeof update.attributes === 'string') {\n        update.attributes = JSON.parse(update.attributes);\n      } else if (update.attributes) {\n        JSON.stringify(update.attributes);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);\n      update.attributes = {};\n    }\n\n    try {\n      if (update.dateCreated) {\n        update.dateCreated = new Date(update.dateCreated);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);\n      delete update.dateCreated;\n    }\n\n    try {\n      if (update.dateUpdated) {\n        update.dateUpdated = new Date(update.dateUpdated);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);\n      delete update.dateUpdated;\n    }\n\n    try {\n      if (update.lastMessage && update.lastMessage.timestamp) {\n        update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);\n      delete update.lastMessage.timestamp;\n    }\n  }\n\n  /**\n   * Update the local channel object with new values.\n   * @internal\n   */\n  _update(update) {\n    log.trace('_update', update);\n\n    Channel.preprocessUpdate(update, this.sid);\n    const updateReasons = new Set<ChannelUpdateReason>();\n\n    for (const key of Object.keys(update)) {\n      const localKey = fieldMappings[key];\n\n      if (!localKey) {\n        continue;\n      }\n\n      switch (localKey) {\n        case fieldMappings.status:\n          if (!update.status || update.status === 'unknown'\n            || this.channelState.status === update.status) {\n            break;\n          }\n\n          this.channelState.status = update.status;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.attributes:\n          if (isEqual(this.channelState.attributes, update.attributes)) {\n            break;\n          }\n\n          this.channelState.attributes = update.attributes;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.lastConsumedMessageIndex:\n          if (update.lastConsumedMessageIndex === undefined\n            || update.lastConsumedMessageIndex === this.channelState.lastConsumedMessageIndex) {\n            break;\n          }\n\n          this.channelState.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.lastMessage:\n          if (this.channelState.lastMessage && !update.lastMessage) {\n            delete this.channelState.lastMessage;\n            updateReasons.add(localKey);\n\n            break;\n          }\n\n          this.channelState.lastMessage = this.channelState.lastMessage || {};\n\n          if (update.lastMessage?.index !== undefined\n            && update.lastMessage.index !== this.channelState.lastMessage.index) {\n            this.channelState.lastMessage.index = update.lastMessage.index;\n            updateReasons.add(localKey);\n          }\n\n          if (update.lastMessage?.timestamp !== undefined\n            && this.channelState.lastMessage?.dateCreated?.getTime() !== update.lastMessage.timestamp.getTime()) {\n            this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n            updateReasons.add(localKey);\n          }\n\n          if (isEqual(this.channelState.lastMessage, {})) {\n            delete this.channelState.lastMessage;\n          }\n\n          break;\n        case fieldMappings.state:\n          const state = update.state || undefined;\n\n          if (state !== undefined) {\n            state.dateUpdated = new Date(state.dateUpdated);\n          }\n\n          if (isEqual(this.channelState.state, state)) {\n            break;\n          }\n\n          this.channelState.state = state;\n          updateReasons.add(localKey);\n\n          break;\n        default:\n          const isDate = update[key] instanceof Date;\n          const keysMatchAsDates = isDate && this.channelState[localKey]?.getTime() === update[key].getTime();\n          const keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n\n          if (keysMatchAsDates || keysMatchAsNonDates) {\n            break;\n          }\n\n          this.channelState[localKey] = update[key];\n          updateReasons.add(localKey);\n      }\n    }\n\n    if (updateReasons.size > 0) {\n      this.emit('updated', { channel: this, updateReasons: [...updateReasons] });\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onMessageAdded(message) {\n    for (let member of this.members.values()) {\n      if (member.identity === message.author) {\n        member._endTyping();\n        break;\n      }\n    }\n    this.emit('messageAdded', message);\n  }\n\n  private async _setLastConsumedMessageIndex(index: number | null): Promise<number> {\n    const result = await this.services.commandExecutor.mutateResource<\n      EditLastConsumedMessageIndexRequest,\n      EditLastConsumedMessageIndexResponse\n    >(\n      'post',\n      `${this.configuration.links.myConversations}/${this.sid}`,\n      {\n        last_consumed_message_index: index\n      }\n    );\n\n    return result.unread_messages_count;\n  }\n\n  /**\n   * Add a member to the channel by its identity.\n   * @param identity Identity of the Client to add.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async add(identity: string): Promise<void> {\n    await this.membersEntity.add(identity);\n  }\n\n  /**\n   * Advance the channel's last consumed message index to the current read horizon.\n   * Rejects if the user is not a member of the channel.\n   * Last consumed message index is updated only if the new index value is higher than the previous.\n   * @param index Message index to advance to.\n   * @return Resulting unread messages count in the channel.\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async advanceLastConsumedMessageIndex(index: number): Promise<number> {\n    await this._subscribeStreams();\n\n    if (index < this.lastConsumedMessageIndex) {\n      return await this._setLastConsumedMessageIndex(this.lastConsumedMessageIndex);\n    }\n\n    return await this._setLastConsumedMessageIndex(index);\n  }\n\n  /**\n   * Decline an invitation to the channel and unsubscribe from its events.\n   */\n  public async decline(): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource(\n      'delete',\n      `${this.links.invites}/${this.configuration.userIdentity}`\n    );\n\n    return this;\n  }\n\n  /**\n   * Delete the channel and unsubscribe from its events.\n   */\n  public async delete(): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource(\n      'delete',\n      this.links.self,\n    );\n\n    return this;\n  }\n\n  /**\n   * Get the custom attributes of this Channel.\n   *\n   * *Note: {@link Channel.attributes} will be empty for public channels until this function is called.*\n   */\n  public async getAttributes(): Promise<any> {\n    await this._subscribe();\n    return this.attributes;\n  }\n\n  /**\n   * Return messages from the channel using the paginator interface.\n   * @param pageSize Number of messages to return in a single chunk. Default is 30.\n   * @param anchor Index of the newest message to fetch. Default is from the end.\n   * @param direction Query direction. By default it queries backwards\n   * from newer to older. The `\"forward\"` value will query in the opposite direction.\n   * @return A page of messages.\n   */\n  @validateTypesAsync(\n    ['undefined', nonNegativeInteger],\n    ['undefined', nonNegativeInteger],\n    ['undefined', literal('backwards', 'forward')]\n  )\n  public async getMessages(pageSize?: number, anchor?: number, direction?: 'backwards' | 'forward'): Promise<Paginator<Message>> {\n    await this._subscribeStreams();\n    return await this.messagesEntity.getMessages(pageSize, anchor, direction);\n  }\n\n  /**\n   * Get a list of all the members who are joined to this channel.\n   */\n  public async getMembers(): Promise<Member[]> {\n    await this._subscribeStreams();\n    return await this.membersEntity.getMembers();\n  }\n\n  /**\n   * Get channel members count.\n   *\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not\n   * provide real time events for counter values changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any core application\n   * logic based on these counters being accurate in real time.\n   */\n  public async getMembersCount(): Promise<number> {\n    const url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n    const response = await this.services.network.get(url);\n\n    return response.body.participants_count;\n  }\n\n  /**\n   * Get a member by its SID.\n   * @param memberSid Member SID.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getMemberBySid(memberSid: string): Promise<Member> {\n    return await this.membersEntity.getMemberBySid(memberSid);\n  }\n\n  /**\n   * Get a member by its identity.\n   * @param identity Member identity.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getMemberByIdentity(identity: string): Promise<Member> {\n    return await this.membersEntity.getMemberByIdentity(identity);\n  }\n\n  /**\n   * Get the total message count in the channel.\n   *\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not\n   * provide real time events for counter values changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any core application\n   * logic based on these counters being accurate in real time.\n   */\n  public async getMessagesCount(): Promise<number> {\n    const url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n    const response = await this.services.network.get(url);\n\n    return response.body.messages_count;\n  }\n\n  /**\n   * Get unread messages count for the user if they are a member of this channel.\n   * Rejects if the user is not a member of the channel.\n   *\n   * Use this method to obtain the number of unread messages together with\n   * {@link Channel.updateLastConsumedMessageIndex} instead of relying on the\n   * message indices which may have gaps. See {@link Message.index} for details.\n   *\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not\n   * provide real time events for counter values changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any core application\n   * logic based on these counters being accurate in real time.\n   */\n  public async getUnconsumedMessagesCount(): Promise<number | null> {\n    const url = new UriBuilder(this.configuration.links.myConversations).path(this.sid).build();\n    const response = await this.services.network.get(url);\n\n    if (response.body.conversation_sid !== this.sid) {\n      throw new Error('Channel was not found in the user channels list');\n    }\n\n    const unreadMessageCount = response.body.unread_messages_count;\n\n    if (typeof unreadMessageCount === 'number') {\n      return unreadMessageCount;\n    }\n\n    return null;\n  }\n\n  /**\n   * Invite a user to the channel by their identity.\n   * @param identity Identity of the user.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async invite(identity: string): Promise<void> {\n    await this.membersEntity.invite(identity);\n  }\n\n  /**\n   * Join the channel and subscribe to its events.\n   */\n  public async join(): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource<JoinChannelRequest, JoinChannelResponse>(\n      'post',\n      this.links.participants,\n      {\n        identity: this.configuration.userIdentity\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Leave the channel.\n   */\n  public async leave(): Promise<Channel> {\n    if (this.channelState.status === 'joined') {\n      await this.services.commandExecutor.mutateResource(\n        'delete',\n        `${this.links.participants}/${this.configuration.userIdentity}`,\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Remove a member from the channel. When a string is passed as the argument, it will assume that the string is an identity.\n   * @param member Identity or the member object to remove.\n   */\n  @validateTypesAsync([nonEmptyString, Member])\n  public async removeMember(member: string | Member): Promise<void> {\n    await this.membersEntity.remove(typeof member === 'string' ? member : member.sid);\n  }\n\n  /**\n   * Send a message to the channel.\n   * @param message Message body for the text message,\n   * `FormData` or {@link Channel.MediaOptions) for media content. Sending FormData is supported only with the browser engine.\n   * @param messageAttributes Attributes for the message.\n   * @return Index of the new message.\n   */\n  @validateTypesAsync(\n    [\n      'string',\n      literal(null),\n      // Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\n      custom((value) => [value instanceof FormData, 'an instance of FormData']),\n      objectSchema('media options', {\n        contentType: [nonEmptyString, 'undefined'],\n        media: custom((value) => {\n          let isValid = (typeof value === 'string' && value.length > 0) || value instanceof Uint8Array || value instanceof ArrayBuffer;\n\n          if (typeof Blob === 'function') {\n            isValid = isValid || value instanceof Blob;\n          }\n\n          return [\n            isValid,\n            'a non-empty string, an instance of Buffer or an instance of Blob'\n          ];\n        })\n      })\n    ],\n    ['undefined', 'string', 'number', 'boolean', 'object', literal(null)]\n  )\n  public async sendMessage(message: string | FormData | SendMediaOptions | null, messageAttributes?: any): Promise<number> {\n    if (typeof message === 'string' || message === null) {\n      const response = await this.messagesEntity.send(message, messageAttributes);\n      return parseToNumber(response.index);\n    }\n\n    const response = await this.messagesEntity.sendMedia(message, messageAttributes);\n    return parseToNumber(response.index);\n  }\n\n  /**\n   * Set last consumed message index of the channel to the index of the last known message.\n   * @return Resulting unread messages count in the channel.\n   */\n  public async setAllMessagesConsumed(): Promise<number> {\n    await this._subscribeStreams();\n    const messagesPage = await this.getMessages(1);\n    if (messagesPage.items.length > 0) {\n      return this.advanceLastConsumedMessageIndex(messagesPage.items[0].index);\n    }\n    return Promise.resolve(0);\n  }\n\n  /**\n   * Set all messages in the channel unread.\n   * @return Resulting unread messages count in the channel.\n   */\n  public async setNoMessagesConsumed(): Promise<number> {\n    await this._subscribeStreams();\n    return await this._setLastConsumedMessageIndex(null);\n  }\n\n  /**\n   * Set user notification level for this channel.\n   * @param notificationLevel New user notification level.\n   */\n  @validateTypesAsync(literal('default', 'muted'))\n  public async setUserNotificationLevel(notificationLevel: NotificationLevel): Promise<void> {\n    await this.services.commandExecutor.mutateResource<EditNotificationLevelRequest>(\n      'post',\n      `${this.configuration.links.myConversations}/${this.sid}`,\n      {\n        notification_level: notificationLevel\n      }\n    );\n  }\n\n  /**\n   * Send a notification to the server indicating that this client is currently typing in this channel.\n   * Typing ended notification is sent after a while automatically, but by calling this method again you ensure that typing ended is not received.\n   */\n  public typing(): Promise<void> {\n    return this.services.typingIndicator.send(this.sid);\n  }\n\n  /**\n   * Update the attributes of the channel.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource<EditChannelRequest, ChannelResponse>(\n      'post',\n      this.links.self,\n      { attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined }\n    );\n\n    return this;\n  }\n\n  /**\n   * Update the friendly name of the channel.\n   * @param friendlyName New friendly name.\n   */\n  @validateTypesAsync('string')\n  public async updateFriendlyName(friendlyName: string): Promise<Channel> {\n    if (this.channelState.friendlyName !== friendlyName) {\n      await this.services.commandExecutor.mutateResource<EditChannelRequest, ChannelResponse>(\n        'post',\n        this.links.self,\n        { friendly_name: friendlyName }\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the last consumed message index to the current read horizon.\n   * @param index Message index to set as last consumed.\n   * If null is provided, then the behavior is identical to {@link Channel.setNoMessagesConsumed}.\n   * @returns Resulting unread messages count in the channel.\n   */\n  @validateTypesAsync([literal(null), nonNegativeInteger])\n  public async updateLastConsumedMessageIndex(index: number | null): Promise<number> {\n    await this._subscribeStreams();\n    return await this._setLastConsumedMessageIndex(index);\n  }\n\n  /**\n   * Update the unique name of the channel.\n   * @param uniqueName New unique name for the channel. Setting unique name to null removes it.\n   */\n  @validateTypesAsync(['string', literal(null)])\n  public async updateUniqueName(uniqueName: string | null): Promise<Channel> {\n    if (this.channelState.uniqueName !== uniqueName) {\n      if (!uniqueName) {\n        uniqueName = '';\n      }\n\n      await this.services.commandExecutor.mutateResource<EditChannelRequest, ChannelResponse>(\n        'post',\n        this.links.self,\n        { unique_name: uniqueName }\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Get user descriptors of this channel.\n   */\n  public async getUserDescriptors(): Promise<Paginator<UserDescriptor>> {\n    return await this.services.users.getChannelUserDescriptors(this.sid);\n  }\n}\n\nexport {\n  ChannelDescriptor,\n  Channel,\n  ChannelType,\n  ChannelUpdateReason,\n  ChannelStatus,\n  NotificationLevel,\n  ChannelState,\n  ChannelUpdatedEventArgs,\n  SendMediaOptions,\n  LastMessage\n};\n"],"names":["Logger","ReplayEventEmitter","Members","Messages","isEqual","UriBuilder","parseToNumber","__decorate","validateTypesAsync","nonEmptyString","nonNegativeInteger","literal","Member","custom","objectSchema"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,MAAM,GAAG,GAAGA,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAEpC,MAAM,aAAa,GAAG;IACpB,WAAW,EAAE,aAAa;IAC1B,UAAU,EAAE,YAAY;IACxB,SAAS,EAAE,WAAW;IACtB,WAAW,EAAE,aAAa;IAC1B,WAAW,EAAE,aAAa;IAC1B,YAAY,EAAE,cAAc;IAC5B,wBAAwB,EAAE,0BAA0B;IACpD,iBAAiB,EAAE,mBAAmB;IACtC,GAAG,EAAE,KAAK;IACV,MAAM,EAAE,QAAQ;IAChB,IAAI,EAAE,MAAM;IACZ,UAAU,EAAE,YAAY;IACxB,KAAK,EAAE,OAAO;CACf,CAAC;AAEF,SAAS,SAAS,CAAC,UAAU;IAC3B,IAAI;QACF,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC;KAC7B;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAsID;;;AAIA,MAAM,OAAQ,SAAQC,qCAAiC;;;;IAsBrD,YACE,UAA6B,EAC7B,GAAW,EACX,KAAmB,EACnB,aAA4B,EAC5B,QAAyB;QAEzB,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAI,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,EAAE,CAAC;QAC7C,IAAI,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;QACrC,IAAI,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,YAAY,GAAG,UAAU,CAAC,YAAY,IAAI,IAAI,CAAC;QACnD,IAAI,wBAAwB,GAC1B,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,wBAAwB,CAAC,GAAG,UAAU,CAAC,wBAAwB,GAAG,IAAI,CAAC;QACrG,IAAI,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,IAAI,CAAC;QAE/C,IAAI;YACF,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;SAC5B;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;SAC5D;QAED,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC;QACrC,IAAI,CAAC,YAAY,GAAG;YAClB,UAAU;YACV,MAAM,EAAE,kBAAkB;YAC1B,IAAI,EAAE,UAAU,CAAC,IAAI;YACrB,UAAU;YACV,SAAS;YACT,WAAW;YACX,WAAW;YACX,YAAY;YACZ,wBAAwB;SACzB,CAAC;QAEF,IAAI,UAAU,CAAC,iBAAiB,EAAE;YAChC,IAAI,CAAC,YAAY,CAAC,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,CAAC;SACpE;QAED,MAAM,YAAY,GAAG;YACnB,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;SACtC,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,IAAIC,eAAO,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,eAAe,EACnC,CAAC,IAA4B,KAAK,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC;QAEtE,IAAI,CAAC,cAAc,GAAG,IAAIC,iBAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;QACvE,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,cAAc,EAAE,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;QACjF,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,gBAAgB,EACrC,CAAC,IAA6B,KAAK,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC,CAAC;KAClF;;;;IAqGD,IAAW,MAAM,KAAoB,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;;;;IAKvE,IAAW,IAAI,KAAkB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;;;;IAKjE,IAAW,UAAU,KAAa,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;;;;IAKxE,IAAW,SAAS,KAAc,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,SAAS,CAAC,EAAE;;;;IAKhF,IAAW,YAAY,KAAa,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE;;;;IAK5E,IAAW,WAAW,KAAU,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;;;;IAKvE,IAAW,WAAW,KAAU,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;;;;IAKvE,IAAW,SAAS,KAAa,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE;;;;IAKtE,IAAW,UAAU,KAAa,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;;;;IAKxE,IAAW,wBAAwB,KAAoB,OAAO,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,EAAE;;;;IAK3G,IAAW,WAAW,KAAkB,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;;;;IAK/E,IAAW,iBAAiB,KAAwB,OAAO,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE;;;;IAKjG,IAAW,KAAK,KAA+B,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;;;;;;IAOhF,MAAM,UAAU;QACd,IAAI,IAAI,CAAC,aAAa,EAAE;YAAE,OAAO,IAAI,CAAC,aAAa,CAAC;SAAE;QAEtD,OAAO,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa;YAC5C,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC;iBAC9E,IAAI,CAAC,MAAM;gBACV,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;gBAChE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC5D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC/B,OAAO,MAAM,CAAC;aACf,CAAC;iBACD,KAAK,CAAC,GAAG;gBACR,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAC1B,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,IAAI,cAAc,EAAE;oBAC9D,GAAG,CAAC,KAAK,CAAC,8BAA8B,EAAE,GAAG,CAAC,CAAC;iBAChD;gBACD,GAAG,CAAC,KAAK,CAAC,qCAAqC,EAAE,GAAG,CAAC,CAAC;gBACtD,MAAM,GAAG,CAAC;aACX,CAAC,CAAC;KACR;;;;;;;IAQO,MAAM,iBAAiB;QAC7B,IAAI;YACF,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YACxB,GAAG,CAAC,KAAK,CAAC,sCAAsC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACpE,MAAM,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACrD,MAAM,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACjD,MAAM,OAAO,CAAC,GAAG,CAAC;gBAChB,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,kBAAkB,CAAC;gBACjD,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,gBAAgB,CAAC;aAC/C,CAAC,CAAC;SACJ;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,KAAK,cAAc,EAAE;gBAC/D,GAAG,CAAC,KAAK,CAAC,wCAAwC,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;aACpE;YACD,GAAG,CAAC,KAAK,CAAC,+CAA+C,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAC1E,MAAM,GAAG,CAAC;SACX;KACF;;;;;IAMO,MAAM,YAAY;;QAExB,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE;YACjC,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;SAC3B;QAED,OAAO,OAAO,CAAC,GAAG,CAAC;YACjB,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE;YAChC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;SAClC,CAAC,CAAC;KACJ;;;;;IAMD,UAAU,CAAC,MAAqB,EAAE,MAA2B;QAC3D,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;QAE3B,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,MAAM,EAAE;YAAE,OAAO;SAAE;QAEpD,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC;QAElC,IAAI,MAAM,KAAK,QAAQ,EAAE;YACvB,IAAI,CAAC,iBAAiB,EAAE;iBACnB,KAAK,CAAC,GAAG;gBACR,GAAG,CAAC,KAAK,CAAC,qCAAqC,GAAG,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC/D,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,KAAK,cAAc,EAAE;oBAC/D,MAAM,GAAG,CAAC;iBACX;aACF,CAAC,CAAC;SACR;aAAM,IAAI,MAAM,KAAK,SAAS,EAAE;YAC/B,IAAI,CAAC,UAAU,EAAE;iBACZ,KAAK,CAAC,GAAG;gBACR,GAAG,CAAC,KAAK,CAAC,qCAAqC,GAAG,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC/D,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,KAAK,cAAc,EAAE;oBAC/D,MAAM,GAAG,CAAC;iBACX;aACF,CAAC,CAAC;SACR;aAAM,IAAI,IAAI,CAAC,aAAa,EAAE;YAC7B,IAAI,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,GAAG;gBAC3B,GAAG,CAAC,KAAK,CAAC,qCAAqC,GAAG,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC/D,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,KAAK,cAAc,EAAE;oBAC/D,MAAM,GAAG,CAAC;iBACX;aACF,CAAC,CAAC;SACJ;KACF;;;;;IAMD,aAAa;QACX,OAAO,IAAI,CAAC,YAAY,CAAC;KAC1B;IAEO,OAAO,gBAAgB,CAAC,MAAM,EAAE,UAAU;QAChD,IAAI;YACF,IAAI,OAAO,MAAM,CAAC,UAAU,KAAK,QAAQ,EAAE;gBACzC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;aACnD;iBAAM,IAAI,MAAM,CAAC,UAAU,EAAE;gBAC5B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;aACnC;SACF;QAAC,OAAO,CAAC,EAAE;YACV,GAAG,CAAC,IAAI,CAAC,8DAA8D,GAAG,UAAU,CAAC,CAAC;YACtF,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC;SACxB;QAED,IAAI;YACF,IAAI,MAAM,CAAC,WAAW,EAAE;gBACtB,MAAM,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aACnD;SACF;QAAC,OAAO,CAAC,EAAE;YACV,GAAG,CAAC,IAAI,CAAC,+DAA+D,GAAG,UAAU,CAAC,CAAC;YACvF,OAAO,MAAM,CAAC,WAAW,CAAC;SAC3B;QAED,IAAI;YACF,IAAI,MAAM,CAAC,WAAW,EAAE;gBACtB,MAAM,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aACnD;SACF;QAAC,OAAO,CAAC,EAAE;YACV,GAAG,CAAC,IAAI,CAAC,+DAA+D,GAAG,UAAU,CAAC,CAAC;YACvF,OAAO,MAAM,CAAC,WAAW,CAAC;SAC3B;QAED,IAAI;YACF,IAAI,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE;gBACtD,MAAM,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;aACvE;SACF;QAAC,OAAO,CAAC,EAAE;YACV,GAAG,CAAC,IAAI,CAAC,yEAAyE,GAAG,UAAU,CAAC,CAAC;YACjG,OAAO,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC;SACrC;KACF;;;;;IAMD,OAAO,CAAC,MAAM;;QACZ,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAE7B,OAAO,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3C,MAAM,aAAa,GAAG,IAAI,GAAG,EAAuB,CAAC;QAErD,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACrC,MAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;YAEpC,IAAI,CAAC,QAAQ,EAAE;gBACb,SAAS;aACV;YAED,QAAQ,QAAQ;gBACd,KAAK,aAAa,CAAC,MAAM;oBACvB,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS;2BAC5C,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,EAAE;wBAC/C,MAAM;qBACP;oBAED,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;oBACzC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBAE5B,MAAM;gBACR,KAAK,aAAa,CAAC,UAAU;oBAC3B,IAAIC,2BAAO,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE;wBAC5D,MAAM;qBACP;oBAED,IAAI,CAAC,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;oBACjD,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBAE5B,MAAM;gBACR,KAAK,aAAa,CAAC,wBAAwB;oBACzC,IAAI,MAAM,CAAC,wBAAwB,KAAK,SAAS;2BAC5C,MAAM,CAAC,wBAAwB,KAAK,IAAI,CAAC,YAAY,CAAC,wBAAwB,EAAE;wBACnF,MAAM;qBACP;oBAED,IAAI,CAAC,YAAY,CAAC,wBAAwB,GAAG,MAAM,CAAC,wBAAwB,CAAC;oBAC7E,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBAE5B,MAAM;gBACR,KAAK,aAAa,CAAC,WAAW;oBAC5B,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;wBACxD,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;wBACrC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;wBAE5B,MAAM;qBACP;oBAED,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,IAAI,EAAE,CAAC;oBAEpE,IAAI,CAAA,MAAA,MAAM,CAAC,WAAW,0CAAE,KAAK,MAAK,SAAS;2BACtC,MAAM,CAAC,WAAW,CAAC,KAAK,KAAK,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE;wBACrE,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC;wBAC/D,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;qBAC7B;oBAED,IAAI,CAAA,MAAA,MAAM,CAAC,WAAW,0CAAE,SAAS,MAAK,SAAS;2BAC1C,CAAA,MAAA,MAAA,IAAI,CAAC,YAAY,CAAC,WAAW,0CAAE,WAAW,0CAAE,OAAO,EAAE,MAAK,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE;wBACrG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC;wBACzE,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;qBAC7B;oBAED,IAAIA,2BAAO,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,EAAE,CAAC,EAAE;wBAC9C,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;qBACtC;oBAED,MAAM;gBACR,KAAK,aAAa,CAAC,KAAK;oBACtB,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,SAAS,CAAC;oBAExC,IAAI,KAAK,KAAK,SAAS,EAAE;wBACvB,KAAK,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;qBACjD;oBAED,IAAIA,2BAAO,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE;wBAC3C,MAAM;qBACP;oBAED,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC;oBAChC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBAE5B,MAAM;gBACR;oBACE,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,IAAI,CAAC;oBAC3C,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAA,MAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,0CAAE,OAAO,EAAE,MAAK,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;oBACpG,MAAM,mBAAmB,GAAG,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,MAAM,CAAC,GAAG,CAAC,CAAC;oBAEtE,IAAI,gBAAgB,IAAI,mBAAmB,EAAE;wBAC3C,MAAM;qBACP;oBAED,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC1C,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;aAC/B;SACF;QAED,IAAI,aAAa,CAAC,IAAI,GAAG,CAAC,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,GAAG,aAAa,CAAC,EAAE,CAAC,CAAC;SAC5E;KACF;;;;IAKO,eAAe,CAAC,OAAO;QAC7B,KAAK,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE;YACxC,IAAI,MAAM,CAAC,QAAQ,KAAK,OAAO,CAAC,MAAM,EAAE;gBACtC,MAAM,CAAC,UAAU,EAAE,CAAC;gBACpB,MAAM;aACP;SACF;QACD,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;KACpC;IAEO,MAAM,4BAA4B,CAAC,KAAoB;QAC7D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAI/D,MAAM,EACN,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,eAAe,IAAI,IAAI,CAAC,GAAG,EAAE,EACzD;YACE,2BAA2B,EAAE,KAAK;SACnC,CACF,CAAC;QAEF,OAAO,MAAM,CAAC,qBAAqB,CAAC;KACrC;;;;;IAOM,MAAM,GAAG,CAAC,QAAgB;QAC/B,MAAM,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KACxC;;;;;;;;IAUM,MAAM,+BAA+B,CAAC,KAAa;QACxD,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAE/B,IAAI,KAAK,GAAG,IAAI,CAAC,wBAAwB,EAAE;YACzC,OAAO,MAAM,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;SAC/E;QAED,OAAO,MAAM,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;KACvD;;;;IAKM,MAAM,OAAO;QAClB,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAChD,QAAQ,EACR,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAC3D,CAAC;QAEF,OAAO,IAAI,CAAC;KACb;;;;IAKM,MAAM,MAAM;QACjB,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAChD,QAAQ,EACR,IAAI,CAAC,KAAK,CAAC,IAAI,CAChB,CAAC;QAEF,OAAO,IAAI,CAAC;KACb;;;;;;IAOM,MAAM,aAAa;QACxB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC,UAAU,CAAC;KACxB;;;;;;;;;IAeM,MAAM,WAAW,CAAC,QAAiB,EAAE,MAAe,EAAE,SAAmC;QAC9F,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC/B,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;KAC3E;;;;IAKM,MAAM,UAAU;QACrB,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC/B,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;KAC9C;;;;;;;;;;;IAYM,MAAM,eAAe;QAC1B,MAAM,GAAG,GAAG,IAAIC,gBAAU,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;QAC1F,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEtD,OAAO,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC;KACzC;;;;;IAOM,MAAM,cAAc,CAAC,SAAiB;QAC3C,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;KAC3D;;;;;IAOM,MAAM,mBAAmB,CAAC,QAAgB;QAC/C,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;KAC/D;;;;;;;;;;;IAYM,MAAM,gBAAgB;QAC3B,MAAM,GAAG,GAAG,IAAIA,gBAAU,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;QAC1F,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEtD,OAAO,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC;KACrC;;;;;;;;;;;;;;;;IAiBM,MAAM,0BAA0B;QACrC,MAAM,GAAG,GAAG,IAAIA,gBAAU,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;QAC5F,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEtD,IAAI,QAAQ,CAAC,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,GAAG,EAAE;YAC/C,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;SACpE;QAED,MAAM,kBAAkB,GAAG,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC;QAE/D,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;YAC1C,OAAO,kBAAkB,CAAC;SAC3B;QAED,OAAO,IAAI,CAAC;KACb;;;;;IAOM,MAAM,MAAM,CAAC,QAAgB;QAClC,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KAC3C;;;;IAKM,MAAM,IAAI;QACf,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAChD,MAAM,EACN,IAAI,CAAC,KAAK,CAAC,YAAY,EACvB;YACE,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,YAAY;SAC1C,CACF,CAAC;QAEF,OAAO,IAAI,CAAC;KACb;;;;IAKM,MAAM,KAAK;QAChB,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,QAAQ,EAAE;YACzC,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAChD,QAAQ,EACR,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAChE,CAAC;SACH;QAED,OAAO,IAAI,CAAC;KACb;;;;;IAOM,MAAM,YAAY,CAAC,MAAuB;QAC/C,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,MAAM,KAAK,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;KACnF;;;;;;;;IAiCM,MAAM,WAAW,CAAC,OAAoD,EAAE,iBAAuB;QACpG,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,EAAE;YACnD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;YAC5E,OAAOC,mBAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SACtC;QAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;QACjF,OAAOA,mBAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACtC;;;;;IAMM,MAAM,sBAAsB;QACjC,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC/B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,YAAY,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,OAAO,IAAI,CAAC,+BAA+B,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;SAC1E;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KAC3B;;;;;IAMM,MAAM,qBAAqB;QAChC,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC/B,OAAO,MAAM,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC;KACtD;;;;;IAOM,MAAM,wBAAwB,CAAC,iBAAoC;QACxE,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAChD,MAAM,EACN,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,eAAe,IAAI,IAAI,CAAC,GAAG,EAAE,EACzD;YACE,kBAAkB,EAAE,iBAAiB;SACtC,CACF,CAAC;KACH;;;;;IAMM,MAAM;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACrD;;;;;IAOM,MAAM,gBAAgB,CAAC,UAAe;QAC3C,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAChD,MAAM,EACN,IAAI,CAAC,KAAK,CAAC,IAAI,EACf,EAAE,UAAU,EAAE,UAAU,KAAK,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,SAAS,EAAE,CAClF,CAAC;QAEF,OAAO,IAAI,CAAC;KACb;;;;;IAOM,MAAM,kBAAkB,CAAC,YAAoB;QAClD,IAAI,IAAI,CAAC,YAAY,CAAC,YAAY,KAAK,YAAY,EAAE;YACnD,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAChD,MAAM,EACN,IAAI,CAAC,KAAK,CAAC,IAAI,EACf,EAAE,aAAa,EAAE,YAAY,EAAE,CAChC,CAAC;SACH;QAED,OAAO,IAAI,CAAC;KACb;;;;;;;IASM,MAAM,8BAA8B,CAAC,KAAoB;QAC9D,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC/B,OAAO,MAAM,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;KACvD;;;;;IAOM,MAAM,gBAAgB,CAAC,UAAyB;QACrD,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,KAAK,UAAU,EAAE;YAC/C,IAAI,CAAC,UAAU,EAAE;gBACf,UAAU,GAAG,EAAE,CAAC;aACjB;YAED,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAChD,MAAM,EACN,IAAI,CAAC,KAAK,CAAC,IAAI,EACf,EAAE,WAAW,EAAE,UAAU,EAAE,CAC5B,CAAC;SACH;QACD,OAAO,IAAI,CAAC;KACb;;;;IAKM,MAAM,kBAAkB;QAC7B,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,yBAAyB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACtE;;AA1zBD;;;;;;;AAOgB,oBAAY,GAAG,cAAc,CAAC;AAE9C;;;;;;;AAOgB,kBAAU,GAAG,YAAY,CAAC;AAE1C;;;;;;;;;AASgB,qBAAa,GAAG,eAAe,CAAC;AAEhD;;;;;;;AAOgB,oBAAY,GAAG,cAAc,CAAC;AAE9C;;;;;;;AAOgB,sBAAc,GAAG,gBAAgB,CAAC;AAElD;;;;;;;;;AASgB,sBAAc,GAAG,gBAAgB,CAAC;AAElD;;;;;;;AAOgB,mBAAW,GAAG,aAAa,CAAC;AAE5C;;;;;;;AAOgB,qBAAa,GAAG,eAAe,CAAC;AAEhD;;;;;;;;;AASgB,eAAO,GAAG,SAAS,CAAC;AAEpC;;;;;;;AAOgB,eAAO,GAAG,SAAS,CAAC;AA4WpCC;IADCC,2CAAkB,CAACC,uCAAc,CAAC;;;;kCAGlC;AAUDF;IADCC,2CAAkB,CAACE,2CAAkB,CAAC;;;;8DAStC;AAiDDH;IALCC,2CAAkB,CACjB,CAAC,WAAW,EAAEE,2CAAkB,CAAC,EACjC,CAAC,WAAW,EAAEA,2CAAkB,CAAC,EACjC,CAAC,WAAW,EAAEC,gCAAO,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAC/C;;;;0CAIA;AAgCDJ;IADCC,2CAAkB,CAACC,uCAAc,CAAC;;;;6CAGlC;AAODF;IADCC,2CAAkB,CAACC,uCAAc,CAAC;;;;kDAGlC;AAwDDF;IADCC,2CAAkB,CAACC,uCAAc,CAAC;;;;qCAGlC;AAoCDF;IADCC,2CAAkB,CAAC,CAACC,uCAAc,EAAEG,aAAM,CAAC,CAAC;;;;2CAG5C;AAiCDL;IAxBCC,2CAAkB,CACjB;QACE,QAAQ;QACRG,gCAAO,CAAC,IAAI,CAAC;;QAEbE,+BAAM,CAAC,CAAC,KAAK,KAAK,CAAC,KAAK,YAAY,QAAQ,EAAE,yBAAyB,CAAC,CAAC;QACzEC,qCAAY,CAAC,eAAe,EAAE;YAC5B,WAAW,EAAE,CAACL,uCAAc,EAAE,WAAW,CAAC;YAC1C,KAAK,EAAEI,+BAAM,CAAC,CAAC,KAAK;gBAClB,IAAI,OAAO,GAAG,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,KAAK,KAAK,YAAY,UAAU,IAAI,KAAK,YAAY,WAAW,CAAC;gBAE7H,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;oBAC9B,OAAO,GAAG,OAAO,IAAI,KAAK,YAAY,IAAI,CAAC;iBAC5C;gBAED,OAAO;oBACL,OAAO;oBACP,kEAAkE;iBACnE,CAAC;aACH,CAAC;SACH,CAAC;KACH,EACD,CAAC,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAEF,gCAAO,CAAC,IAAI,CAAC,CAAC,CACtE;;;;0CASA;AA6BDJ;IADCC,2CAAkB,CAACG,gCAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;;;;uDAS/C;AAeDJ;IADCC,2CAAkB,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAEG,gCAAO,CAAC,IAAI,CAAC,CAAC,CAAC;;;;+CAS5E;AAODJ;IADCC,2CAAkB,CAAC,QAAQ,CAAC;;;;iDAW5B;AASDD;IADCC,2CAAkB,CAAC,CAACG,gCAAO,CAAC,IAAI,CAAC,EAAED,2CAAkB,CAAC,CAAC;;;;6DAIvD;AAODH;IADCC,2CAAkB,CAAC,CAAC,QAAQ,EAAEG,gCAAO,CAAC,IAAI,CAAC,CAAC,CAAC;;;;+CAc7C;;;;"}