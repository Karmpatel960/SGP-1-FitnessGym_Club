/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2016, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

This software includes Backoff library under the following license

    Copyright (C) 2012 Mathieu Turcotte

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

This software includes Event-to-Promise library under the following license

    Copyright (c) 2014, Julien Fontanet <julien.fontanet@isonoe.net>.

    Permission to use, copy, modify, and/or distribute this software for any purpose
    with or without fee is hereby granted, provided that the above copyright notice
    and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
    OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
    TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
    THIS SOFTWARE.

*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('./node_modules/tslib/tslib.es6.js');
var sanitize = require('./utils/sanitize.js');
var uri = require('./utils/uri.js');
var syncerror = require('./utils/syncerror.js');
var logger = require('./utils/logger.js');
var entity = require('./entity.js');
var syncmapitem = require('./syncmapitem.js');
var paginator = require('./paginator.js');
var cache = require('./cache.js');
var mergingqueue = require('./mergingqueue.js');
var closeable = require('./closeable.js');
var declarativeTypeValidator = require('@twilio/declarative-type-validator');

class SyncMapImpl extends entity.SyncEntity {
    /**
     * @private
     */
    constructor(services, descriptor, removalHandler) {
        super(services, removalHandler);
        const updateRequestReducer = (acc, input) => (typeof input.ttl === 'number') ? { ttl: input.ttl }
            : acc;
        this.updateMergingQueue = new mergingqueue.NamespacedMergingQueue(updateRequestReducer);
        this.cache = new cache.Cache();
        this.descriptor = descriptor;
        this.descriptor.date_updated = new Date(this.descriptor.date_updated);
        if (descriptor.items) {
            descriptor.items.forEach(itemDescriptor => {
                itemDescriptor.date_updated = new Date(itemDescriptor.date_updated);
                this.cache.store(itemDescriptor.key, new syncmapitem.SyncMapItem(itemDescriptor), itemDescriptor.last_event_id);
            });
        }
    }
    // private props
    get uri() {
        return this.descriptor.url;
    }
    get links() {
        return this.descriptor.links;
    }
    get revision() {
        return this.descriptor.revision;
    }
    get lastEventId() {
        return this.descriptor.last_event_id;
    }
    get dateExpires() {
        return this.descriptor.date_expires;
    }
    static get type() {
        return 'map';
    }
    get type() {
        return 'map';
    }
    // below properties are specific to Insights only
    get indexName() {
        return undefined;
    }
    get queryString() {
        return undefined;
    }
    // public props, documented along with class description
    get sid() {
        return this.descriptor.sid;
    }
    get uniqueName() {
        return this.descriptor.unique_name || null;
    }
    get dateUpdated() {
        return this.descriptor.date_updated;
    }
    async set(key, value, itemMetadataUpdates) {
        const input = itemMetadataUpdates || {};
        return this.updateMergingQueue.squashAndAdd(key, input, (input) => this._putItemUnconditionally(key, value, input.ttl));
    }
    async get(key) {
        if (key === null || key === undefined) {
            throw new syncerror.SyncError('SyncMapItem key may not be empty', 400, 54209);
        }
        if (this.cache.has(key)) {
            return this.cache.get(key);
        }
        else {
            return this._getItemFromServer(key);
        }
    }
    async _getItemFromServer(key) {
        let result = await this.queryItems({ key: key });
        if (result.items.length < 1) {
            throw new syncerror.SyncError(`The specified Map Item does not exist`, 404, 54201);
        }
        else {
            return result.items[0];
        }
    }
    async mutate(key, mutator, itemMetadataUpdates) {
        const input = itemMetadataUpdates || {};
        return this.updateMergingQueue.add(key, input, (input) => this._putItemWithIfMatch(key, mutator, input.ttl));
    }
    async update(key, obj, itemMetadataUpdates) {
        return this.mutate(key, remote => Object.assign(remote, obj), itemMetadataUpdates);
    }
    async _putItemUnconditionally(key, data, ttl) {
        const result = await this._putItemToServer(key, data, undefined, ttl);
        const item = result.item;
        this._handleItemMutated(item.key, item.url, item.last_event_id, item.revision, item.data, item.date_updated, item.date_expires, result.added, false);
        return this.cache.get(item.key);
    }
    async _putItemWithIfMatch(key, mutatorFunction, ttl) {
        const currentItem = await this.get(key)
            .catch(error => {
            if (error.status === 404) {
                // PUT /Items/myKey with `If-Match: -1` acts as "put if not exists"
                return new syncmapitem.SyncMapItem({ key: key, data: {}, last_event_id: -1, revision: '-1', url: null, date_updated: null, date_expires: null });
            }
            else {
                throw error;
            }
        });
        let data = mutatorFunction(sanitize.deepClone(currentItem.data));
        if (data) {
            let ifMatch = currentItem.revision;
            try {
                const result = await this._putItemToServer(key, data, ifMatch, ttl);
                const item = result.item;
                this._handleItemMutated(item.key, item.url, item.last_event_id, item.revision, item.data, item.date_updated, item.date_expires, result.added, false);
                return this.cache.get(item.key);
            }
            catch (error) {
                if (error.status === 412) {
                    await this._getItemFromServer(key);
                    return this._putItemWithIfMatch(key, mutatorFunction, ttl);
                }
                else {
                    throw error;
                }
            }
        }
        else {
            return currentItem;
        }
    }
    async _putItemToServer(key, data, ifMatch, ttl) {
        const url = new uri.UriBuilder(this.links.items).pathSegment(key).build();
        const requestBody = { data };
        if (ttl !== undefined) {
            requestBody.ttl = ttl;
        }
        try {
            const response = await this.services.network.put(url, requestBody, ifMatch);
            const mapItemDescriptor = response.body;
            mapItemDescriptor.data = data; // The server does not return the data in the response
            mapItemDescriptor.date_updated = new Date(mapItemDescriptor.date_updated);
            const added = response.status.code === 201;
            return { added, item: mapItemDescriptor };
        }
        catch (error) {
            if (error.status === 404) {
                this.onRemoved(false);
            }
            throw error;
        }
    }
    async remove(key) {
        const item = await this.get(key);
        const previousItemData = sanitize.deepClone(item.data);
        const response = await this.services.network.delete(item.uri);
        this._handleItemRemoved(key, response.body.last_event_id, previousItemData, new Date(response.body.date_updated), false);
    }
    /**
     * @private
     */
    async queryItems(args) {
        args = args || {};
        const uri$1 = new uri.UriBuilder(this.links.items)
            .queryParam('From', args.from)
            .queryParam('PageSize', args.limit)
            .queryParam('Key', args.key)
            .queryParam('PageToken', args.pageToken)
            .queryParam('Order', args.order)
            .build();
        let response = await this.services.network.get(uri$1);
        let items = response.body.items.map(el => {
            el.date_updated = new Date(el.date_updated);
            let itemInCache = this.cache.get(el.key);
            if (itemInCache) {
                this._handleItemMutated(el.key, el.url, el.last_event_id, el.revision, el.data, el.date_updated, el.date_expires, false, true);
            }
            else {
                this.cache.store(el.key, new syncmapitem.SyncMapItem(el), el.last_event_id);
            }
            return this.cache.get(el.key);
        });
        const meta = response.body.meta;
        return new paginator.Paginator(items, pageToken => this.queryItems({ pageToken }), meta.previous_token, meta.next_token);
    }
    async getItems(args) {
        args = args || {};
        sanitize.validatePageSize(args.pageSize);
        args.limit = args.pageSize || args.limit || 50;
        args.order = args.order || 'asc';
        return this.queryItems(args);
    }
    shouldIgnoreEvent(key, eventId) {
        return this.cache.isKnown(key, eventId);
    }
    /**
     * Handle update from the server
     * @private
     */
    _update(update, isStrictlyOrdered) {
        update.date_created = new Date(update.date_created);
        switch (update.type) {
            case 'map_item_added':
            case 'map_item_updated':
                {
                    this._handleItemMutated(update.item_key, update.item_url, update.id, update.item_revision, update.item_data, update.date_created, undefined, // orchestration events do not include date_expires
                    update.type === 'map_item_added', true);
                }
                break;
            case 'map_item_removed':
                {
                    this._handleItemRemoved(update.item_key, update.id, update.item_data, update.date_created, true);
                }
                break;
            case 'map_removed':
                {
                    this.onRemoved(false);
                }
                break;
        }
        if (isStrictlyOrdered) {
            this._advanceLastEventId(update.id, update.map_revision);
        }
    }
    _advanceLastEventId(eventId, revision) {
        if (this.lastEventId < eventId) {
            this.descriptor.last_event_id = eventId;
            if (revision) {
                this.descriptor.revision = revision;
            }
        }
    }
    _updateRootDateUpdated(dateUpdated) {
        if (!this.descriptor.date_updated || dateUpdated.getTime() > this.descriptor.date_updated.getTime()) {
            this.descriptor.date_updated = dateUpdated;
            this.services.storage.update(this.type, this.sid, this.uniqueName, { date_updated: dateUpdated });
        }
    }
    _handleItemMutated(key, url, lastEventId, revision, data, dateUpdated, dateExpires, added, remote) {
        if (this.shouldIgnoreEvent(key, lastEventId)) {
            logger["default"].trace('SyncMapItem ', key, ' update skipped, current:', this.lastEventId, ', remote:', lastEventId);
            return;
        }
        this._updateRootDateUpdated(dateUpdated);
        const item = this.cache.get(key);
        if (!item) {
            const newItem = new syncmapitem.SyncMapItem({
                key: key,
                url,
                last_event_id: lastEventId,
                revision,
                data,
                date_updated: dateUpdated,
                date_expires: dateExpires,
            });
            this.cache.store(key, newItem, lastEventId);
            this.emitItemMutationEvent(newItem, remote, added);
            return;
        }
        const previousItemData = sanitize.deepClone(item.data);
        item.update(lastEventId, revision, data, dateUpdated);
        this.cache.store(key, item, lastEventId);
        if (dateExpires !== undefined) {
            item.updateDateExpires(dateExpires);
        }
        this.emitItemMutationEvent(item, remote, false, previousItemData);
    }
    emitItemMutationEvent(item, remote, added, previousItemData = null) {
        const eventName = added ? 'itemAdded' : 'itemUpdated';
        const args = { item, isLocal: !remote };
        if (!added) {
            args.previousItemData = previousItemData;
        }
        this.broadcastEventToListeners(eventName, args);
    }
    /**
     * @private
     */
    _handleItemRemoved(key, eventId, oldData, dateUpdated, remote) {
        this._updateRootDateUpdated(dateUpdated);
        this.cache.delete(key, eventId);
        this.broadcastEventToListeners('itemRemoved', { key: key, isLocal: !remote, previousItemData: oldData });
    }
    onRemoved(locally) {
        this._unsubscribe();
        this.removalHandler(this.type, this.sid, this.uniqueName);
        this.broadcastEventToListeners('removed', { isLocal: locally });
    }
    async setTtl(ttl) {
        try {
            const requestBody = { ttl };
            const response = await this.services.network.post(this.uri, requestBody);
            this.descriptor.date_expires = response.body.date_expires;
        }
        catch (error) {
            if (error.status === 404) {
                this.onRemoved(false);
            }
            throw error;
        }
    }
    async setItemTtl(key, ttl) {
        let existingItem = await this.get(key);
        const requestBody = { ttl };
        const response = await this.services.network.post(existingItem.uri, requestBody);
        existingItem.updateDateExpires(response.body.date_expires);
    }
    async removeMap() {
        await this.services.network.delete(this.uri);
        this.onRemoved(true);
    }
}
/**
 * Represents a Sync map, which is a data structure that stores an unordered set of key-value pairs.
 * Use the {@link SyncClient.map} method to obtain a reference to a Sync map.
 * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).
 */
class SyncMap extends closeable.Closeable {
    /**
     * @internal
     */
    constructor(syncMapImpl) {
        super();
        this.syncMapImpl = syncMapImpl;
        this.syncMapImpl.attach(this);
    }
    // private props
    get uri() {
        return this.syncMapImpl.uri;
    }
    get links() {
        return this.syncMapImpl.links;
    }
    get revision() {
        return this.syncMapImpl.revision;
    }
    get lastEventId() {
        return this.syncMapImpl.lastEventId;
    }
    get dateExpires() {
        return this.syncMapImpl.dateExpires;
    }
    static get type() {
        return SyncMapImpl.type;
    }
    get type() {
        return SyncMapImpl.type;
    }
    /**
     * An immutable identifier (a SID) assigned by the system on creation.
     */
    get sid() {
        return this.syncMapImpl.sid;
    }
    /**
     * An optional immutable identifier that may be assigned by the
     * programmer to this map on creation. Unique among other Maps.
     */
    get uniqueName() {
        return this.syncMapImpl.uniqueName;
    }
    /**
     * Date when the map was last updated.
     */
    get dateUpdated() {
        return this.syncMapImpl.dateUpdated;
    }
    /**
     * Add a new item to the map with the given key-value pair. Overwrites any data that might already exist with that key.
     * @param key Unique item identifier.
     * @param data Data to be set.
     * @param itemMetadataUpdates New item metadata.
     * @return Newly added item, or modified one if already exists, with the latest known data.
     * @example
     * ```typescript
     * map.set('myKey', { name: 'John Smith' }, { ttl: 86400 })
     *   .then((item) => {
     *     console.log('Map SyncMapItem set() successful, item data:', item.data);
     *   })
     *   .catch((error) => {
     *     console.error('Map SyncMapItem set() failed', error);
     *   });
     * ```
     */
    async set(key, data, itemMetadataUpdates) {
        this.ensureNotClosed();
        return this.syncMapImpl.set(key, data, itemMetadataUpdates);
    }
    /**
     * Retrieve an item by key.
     * @param key Identifies the desired item.
     * @return A promise that resolves when the item has been fetched.
     * This promise will be rejected if item was not found.
     * @example
     * ```typescript
     * map.get('myKey')
     *   .then((item) => {
     *     console.log('Map SyncMapItem get() successful, item data:', item.data)
     *   })
     *   .catch((error) => {
     *     console.error('Map SyncMapItem get() failed', error);
     *   });
     * ```
     */
    async get(key) {
        this.ensureNotClosed();
        return this.syncMapImpl.get(key);
    }
    /**
     * Schedules a modification to this Map SyncMapItem that will apply a mutation function.
     * If no SyncMapItem with the given key exists, it will first be created, having the default data (`{}`).
     * @param key Selects the map item to be mutated.
     * @param mutator A function that outputs a new data based on the existing data.
     * May be called multiple times, particularly if this Map SyncMapItem is modified concurrently by remote code.
     * If the mutation ultimately succeeds, the Map SyncMapItem will have made the particular transition described
     * by this function.
     * @param itemMetadataUpdates New item metadata.
     * @return Resolves with the most recent item state, the output of a successful
     * mutation or a state that prompted graceful cancellation (mutator returned `null`).
     * @example
     * ```typescript
     * const mutatorFunction = (currentData) => {
     *     currentData.viewCount = (currentData.viewCount || 0) + 1;
     *     return currentData;
     * };
     * map.mutate('myKey', mutatorFunction, { ttl: 86400 })
     *   .then((item) => {
     *     console.log('Map SyncMapItem mutate() successful, new data:', item.data)
     *   })
     *   .catch((error) => {
     *     console.error('Map SyncMapItem mutate() failed', error);
     *   });
     * ```
     */
    async mutate(key, mutator, itemMetadataUpdates) {
        this.ensureNotClosed();
        return this.syncMapImpl.mutate(key, mutator, itemMetadataUpdates);
    }
    /**
     * Modify a map item by appending new fields (or by overwriting existing ones) with the values from
     * the provided Object. Creates a new item if no item by this key exists, copying all given fields and values
     * into it.
     * This is equivalent to
     * ```typescript
     * map.mutate('myKey', (currentData) => Object.assign(currentData, obj));
     * ```
     * @param key Selects the map item to update.
     * @param obj Specifies the particular (top-level) attributes that will receive new values.
     * @param itemMetadataUpdates New item metadata.
     * @return A promise resolving to the modified item in its new state.
     * @example
     * ```typescript
     * // Say, the Map SyncMapItem (key: `'myKey'`) data is `{ name: 'John Smith' }`
     * map.update('myKey', { age: 34 }, { ttl: 86400 })
     *   .then((item) => {
     *     // Now the Map SyncMapItem data is `{ name: 'John Smith', age: 34 }`
     *     console.log('Map SyncMapItem update() successful, new data:', item.data);
     *   })
     *   .catch((error) => {
     *     console.error('Map SyncMapItem update() failed', error);
     *   });
     * ```
     */
    async update(key, obj, itemMetadataUpdates) {
        this.ensureNotClosed();
        return this.syncMapImpl.update(key, obj, itemMetadataUpdates);
    }
    /**
     * Delete an item, given its key.
     * @param key Selects the item to delete.
     * @return A promise to remove an item.
     * The promise will be rejected if 'key' is undefined or an item was not found.
     * @example
     * ```typescript
     * map.remove('myKey')
     *   .then(() => {
     *     console.log('Map SyncMapItem remove() successful');
     *   })
     *   .catch((error) => {
     *     console.error('Map SyncMapItem remove() failed', error);
     *   });
     * ```
     */
    async remove(key) {
        this.ensureNotClosed();
        return this.syncMapImpl.remove(key);
    }
    /**
     * Get a complete list of items from the map.
     * Information about the query limits can be found [here](https://www.twilio.com/docs/sync/limits).
     * @param queryOptions Query options.
     * @example
     * ```typescript
     * const pageHandler = (paginator) => {
     *   paginator.items.forEach((item) => {
     *     console.log(`SyncMapItem ${item.key}: `, item.data);
     *   });
     *   return paginator.hasNextPage
     *     ? paginator.nextPage().then(pageHandler)
     *     : null;
     * };
     * map.getItems({ from: 'myKey', order: 'asc' })
     *   .then(pageHandler)
     *   .catch((error) => {
     *     console.error('Map getItems() failed', error);
     *   });
     * ```
     */
    async getItems(queryOptions) {
        this.ensureNotClosed();
        return this.syncMapImpl.getItems(queryOptions);
    }
    /**
     * Update the time-to-live of the map.
     * @param ttl Specifies the TTL in seconds after which the map is subject to automatic deletion. The value 0 means infinity.
     * @return A promise that resolves after the TTL update was successful.
     * @example
     * ```typescript
     * map.setTtl(3600)
     *   .then(() => {
     *     console.log('Map setTtl() successful');
     *   })
     *   .catch((error) => {
     *     console.error('Map setTtl() failed', error);
     *   });
     * ```
     */
    async setTtl(ttl) {
        this.ensureNotClosed();
        return this.syncMapImpl.setTtl(ttl);
    }
    /**
     * Update the time-to-live of a map item.
     * @param key SyncMapItem key.
     * @param ttl Specifies the TTL in seconds after which the map item is subject to automatic deletion. The value 0 means infinity.
     * @return A promise that resolves after the TTL update was successful.
     * @example
     * ```typescript
     * map.setItemTtl('myKey', 86400)
     *   .then(() => {
     *     console.log('Map setItemTtl() successful');
     *   })
     *   .catch((error) => {
     *     console.error('Map setItemTtl() failed', error);
     *   });
     * ```
     */
    async setItemTtl(key, ttl) {
        this.ensureNotClosed();
        return this.syncMapImpl.setItemTtl(key, ttl);
    }
    /**
     * Delete this map. It will be impossible to restore it.
     * @return A promise that resolves when the map has been deleted.
     * @example
     * ```typescript
     * map.removeMap()
     *   .then(() => {
     *     console.log('Map removeMap() successful');
     *   })
     *   .catch((error) => {
     *     console.error('Map removeMap() failed', error);
     *   });
     * ```
     */
    async removeMap() {
        this.ensureNotClosed();
        await this.syncMapImpl.removeMap();
    }
    /**
     * Conclude work with the map instance and remove all event listeners attached to it.
     * Any subsequent operation on this object will be rejected with error.
     * Other local copies of this map will continue operating and receiving events normally.
     * @example
     * ```typescript
     * map.close();
     * ````
     */
    close() {
        super.close();
        this.syncMapImpl.detach(this.listenerUuid);
    }
}
/**
 * Fired when a new item appears in the map, regardless of whether its creator was local or remote.
 *
 * Parameters:
 * 1. object `args` - info object provided with the event. It has the following properties:
 *     * {@link SyncMapItem} `item` - added item
 *     * boolean `isLocal` - equals true if the item was added by a local actor, false otherwise
 * @example
 * ```typescript
 * map.on('itemAdded', (args) => {
 *   console.log(`Map item ${args.item.key} was added`);
 *   console.log('args.item.data:', args.item.data);
 *   console.log('args.isLocal:', args.isLocal);
 * });
 * ```
 * @event
 */
SyncMap.itemAdded = 'itemAdded';
/**
 * Fired when a map item is updated (not added or removed, but changed), regardless of whether the updater was local or remote.
 *
 * Parameters:
 * 1. object `args` - info object provided with the event. It has the following properties:
 *     * {@link SyncMapItem} `item` - updated item
 *     * boolean `isLocal` - equals true if the item was updated by a local actor, false otherwise
 *     * object `previousItemData` - contains a snapshot of the item data before the update
 * @example
 * ```typescript
 * map.on('itemUpdated', (args) => {
 *   console.log(`Map item ${args.item.key} was updated`);
 *   console.log('args.item.data:', args.item.data);
 *   console.log('args.isLocal:', args.isLocal);
 *   console.log('args.previousItemData:', args.previousItemData);
 * });
 * ```
 * @event
 */
SyncMap.itemUpdated = 'itemUpdated';
/**
 * Fired when a map item is removed, regardless of whether the remover was local or remote.
 *
 * Parameters:
 * 1. object `args` - info object provided with the event. It has the following properties:
 *     * string `key` - the key of the removed item
 *     * boolean `isLocal` - equals true if the item was added by a local actor, false otherwise
 *     * object `previousItemData` - contains a snapshot of the item data before removal
 * @example
 * ```typescript
 * map.on('itemRemoved', (args) => {
 *   console.log(`Map item ${args.key} was removed`);
 *   console.log('args.previousItemData:', args.previousItemData);
 *   console.log('args.isLocal:', args.isLocal);
 * });
 * ```
 * @event
 */
SyncMap.itemRemoved = 'itemRemoved';
/**
 * Fired when a map is deleted entirely, by any actor local or remote.
 *
 * Parameters:
 * 1. object `args` - info object provided with the event. It has the following properties:
 *     * boolean `isLocal` - equals true if the map was removed by a local actor, false otherwise
 * @example
 * ```typescript
 * map.on('removed', (args) => {
 *   console.log(`Map ${map.sid} was removed`);
 *   console.log('args.isLocal:', args.isLocal);
 * });
 * ```
 * @event
 */
SyncMap.removed = 'removed';
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync('string', declarativeTypeValidator.pureObject, [
        'undefined',
        declarativeTypeValidator.objectSchema('item metadata', {
            ttl: [declarativeTypeValidator.nonNegativeInteger, 'undefined']
        })
    ]),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [String, Object, Object]),
    tslib_es6.__metadata("design:returntype", Promise)
], SyncMap.prototype, "set", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync('string'),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [String]),
    tslib_es6.__metadata("design:returntype", Promise)
], SyncMap.prototype, "get", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync('string', 'function', [
        'undefined',
        declarativeTypeValidator.objectSchema('item metadata', {
            ttl: [declarativeTypeValidator.nonNegativeInteger, 'undefined']
        })
    ]),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [String, Function, Object]),
    tslib_es6.__metadata("design:returntype", Promise)
], SyncMap.prototype, "mutate", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync('string', declarativeTypeValidator.pureObject, [
        'undefined',
        declarativeTypeValidator.objectSchema('item metadata', {
            ttl: [declarativeTypeValidator.nonNegativeInteger, 'undefined']
        })
    ]),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [String, Object, Object]),
    tslib_es6.__metadata("design:returntype", Promise)
], SyncMap.prototype, "update", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync('string'),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [String]),
    tslib_es6.__metadata("design:returntype", Promise)
], SyncMap.prototype, "remove", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync([
        'undefined',
        declarativeTypeValidator.objectSchema('query options', {
            from: ['string', 'undefined'],
            pageSize: [declarativeTypeValidator.custom((value) => [sanitize.isPositiveInteger(value), 'a positive integer']), 'undefined']
        })
    ]),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [Object]),
    tslib_es6.__metadata("design:returntype", Promise)
], SyncMap.prototype, "getItems", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync(declarativeTypeValidator.nonNegativeInteger),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [Number]),
    tslib_es6.__metadata("design:returntype", Promise)
], SyncMap.prototype, "setTtl", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync('string', declarativeTypeValidator.nonNegativeInteger),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [String, Number]),
    tslib_es6.__metadata("design:returntype", Promise)
], SyncMap.prototype, "setItemTtl", null);

exports.SyncMap = SyncMap;
exports.SyncMapImpl = SyncMapImpl;
exports["default"] = SyncMap;
//# sourceMappingURL=syncmap.js.map
