/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2016, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes javascript-state-machine under the following license.

    Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.


*/
'use strict';

var global =
  typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : typeof window !== "undefined"
    ? window
    : {};

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('./node_modules/tslib/tslib.es6.js');
var _polyfillNode_events = require('./_virtual/_polyfill-node_events.js');
var declarativeTypeValidator = require('@twilio/declarative-type-validator');
var logger = require('./logger.js');
var configuration = require('./configuration.js');
var twilsock = require('./twilsock.js');
var packetinterface = require('./packetinterface.js');
var websocketchannel = require('./websocketchannel.js');
var registrations = require('./services/registrations.js');
var upstream = require('./services/upstream.js');
var deferred = require('./deferred.js');
var twilsockerror = require('./error/twilsockerror.js');
var offlinestorage = require('./offlinestorage.js');
var tokenStorage = require('./tokenStorage.js');
var telemetrytracker = require('./services/telemetrytracker.js');
var _package = require('./packages/twilsock/package.json.js');

class TelemetryEvents {
}
TelemetryEvents.TWILSOCK_CONNECT = "twilsock.sdk.connect"; // establish WebSocket connection (with WebSocket handshake finished)
TelemetryEvents.TWILSOCK_INIT = "twilsock.sdk.init"; // send "init" message and receive reply
/**
 * @alias Twilsock
 * @classdesc Client library for the Twilsock service
 * It allows to recevie service-generated updates as well as bi-directional transport
 * @fires Twilsock#message
 * @fires Twilsock#connected
 * @fires Twilsock#disconnected
 * @fires Twilsock#tokenAboutToExpire
 * @fires Twilsock#tokenExpired
 * @fires Twilsock#stateChanged
 * @fires Twilsock#connectionError
 */
exports.TwilsockClient = class TwilsockClient extends _polyfillNode_events['default'] {
    /**
     * @param {string} token Twilio access token
     * @param {string} productId Product identifier. Should be the same as a grant name in token
     * @param {object} options Twilsock configuration options
     */
    constructor(token, productId, options) {
        super();
        this.version = _package.version;
        this.offlineStorageDeferred = new deferred.Deferred();
        options.continuationToken = options.continuationToken
            ? options.continuationToken
            : tokenStorage['default'].getStoredToken(productId);
        const config = (this.config = new configuration.Configuration(token, productId, options));
        logger.log.setLevel(config.logLevel);
        const websocket = new websocketchannel.WebSocketChannel(config.url);
        const transport = new packetinterface.PacketInterface(websocket, config);
        this.channel = new twilsock.TwilsockChannel(websocket, transport, config);
        this.registrations = new registrations.Registrations(transport);
        this.upstream = new upstream.Upstream(transport, this.channel, config);
        // Send telemetry only when connected and initialised
        this.telemetryTracker = new telemetrytracker.TelemetryTracker(config, transport);
        this.channel.on("initialized", () => (this.telemetryTracker.canSendTelemetry = true));
        websocket.on("disconnected", () => (this.telemetryTracker.canSendTelemetry = false));
        this.registrations.on("registered", (id) => this.emit("registered", id));
        this.channel.on("message", (type, message) => setTimeout(() => this.emit("message", type, message), 0));
        this.channel.on("stateChanged", (state) => setTimeout(() => this.emit("stateChanged", state), 0));
        this.channel.on("connectionError", (connectionError) => setTimeout(() => this.emit("connectionError", connectionError), 0));
        this.channel.on("tokenAboutToExpire", () => setTimeout(() => this.emit("tokenAboutToExpire"), 0));
        this.channel.on("tokenExpired", () => setTimeout(() => this.emit("tokenExpired"), 0));
        this.channel.on("connected", () => this.registrations.updateRegistrations());
        this.channel.on("connected", () => this.upstream.sendPendingMessages());
        this.channel.on("connected", () => setTimeout(() => this.emit("connected"), 0));
        // Twilsock telemetry events
        this.channel.on("beforeConnect", () => this.telemetryTracker.addPartialEvent(new telemetrytracker.TelemetryEventDescription("Establish WebSocket connection", "", new Date()), TelemetryEvents.TWILSOCK_CONNECT, telemetrytracker.TelemetryPoint.Start));
        this.channel.on("connected", () => this.telemetryTracker.addPartialEvent(new telemetrytracker.TelemetryEventDescription("Establish WebSocket connection", "", new Date(), new Date()), TelemetryEvents.TWILSOCK_CONNECT, telemetrytracker.TelemetryPoint.End));
        this.channel.on("beforeSendInit", () => this.telemetryTracker.addPartialEvent(new telemetrytracker.TelemetryEventDescription("Send Twilsock init", "", new Date()), TelemetryEvents.TWILSOCK_INIT, telemetrytracker.TelemetryPoint.Start));
        this.channel.on("initialized", () => this.telemetryTracker.addPartialEvent(new telemetrytracker.TelemetryEventDescription("Send Twilsock init", "Succeeded", new Date(), new Date()), TelemetryEvents.TWILSOCK_INIT, telemetrytracker.TelemetryPoint.End));
        this.channel.on("sendInitFailed", () => this.telemetryTracker.addPartialEvent(new telemetrytracker.TelemetryEventDescription("Send Twilsock init", "Failed", new Date(), new Date()), TelemetryEvents.TWILSOCK_INIT, telemetrytracker.TelemetryPoint.End));
        this.channel.on("initialized", (initReply) => {
            this.handleStorageId(productId, initReply);
            tokenStorage['default'].storeToken(initReply.continuationToken, productId);
            setTimeout(() => this.emit("initialized", initReply), 0);
        });
        this.channel.on("disconnected", () => setTimeout(() => this.emit("disconnected"), 0));
        this.channel.on("disconnected", () => this.upstream.rejectPendingMessages());
        this.channel.on("disconnected", () => this.offlineStorageDeferred.fail(new twilsockerror.TwilsockError("Client disconnected")));
        this.offlineStorageDeferred.promise.catch(() => void 0);
    }
    emit(event, ...args) {
        logger.log.debug(`Emitting ${event.toString()}(${args
            .map((a) => JSON.stringify(a))
            .join(", ")})`);
        return super.emit(event, ...args);
    }
    handleStorageId(productId, initReply) {
        if (!initReply.offlineStorage) {
            this.offlineStorageDeferred.fail(new twilsockerror.TwilsockError("No offline storage id"));
        }
        else if (initReply.offlineStorage.hasOwnProperty(productId)) {
            try {
                this.offlineStorageDeferred.set(offlinestorage.OfflineProductStorage.create(initReply.offlineStorage[productId]));
                logger.log.debug(`Offline storage for '${productId}' product: ${JSON.stringify(initReply.offlineStorage[productId])}.`);
            }
            catch (e) {
                this.offlineStorageDeferred.fail(new twilsockerror.TwilsockError(`Failed to parse offline storage for ${productId} ${JSON.stringify(initReply.offlineStorage[productId])}. ${e}.`));
            }
        }
        else {
            this.offlineStorageDeferred.fail(new twilsockerror.TwilsockError(`No offline storage id for '${productId}' product: ${JSON.stringify(initReply.offlineStorage)}`));
        }
    }
    /**
     * Get offline storage ID
     * @returns {Promise}
     */
    storageId() {
        return this.offlineStorageDeferred.promise;
    }
    /**
     * Indicates if twilsock is connected now
     * @returns {Boolean}
     */
    get isConnected() {
        return this.channel.isConnected;
    }
    /**
     * Current state
     * @returns {ConnectionState}
     */
    get state() {
        return this.channel.state;
    }
    /**
     * Update token
     * @param {String} token
     * @returns {Promise}
     */
    async updateToken(token) {
        logger.log.trace(`updating token '${token}'`);
        if (this.config.token === token) {
            return;
        }
        this.config.updateToken(token);
        return await this.channel.updateToken(token);
    }
    /**
     * Updates notification context.
     * This method shouldn't be used anyone except twilio notifications library
     * @param contextId id of notification context
     * @param context value of notification context
     * @private
     */
    async setNotificationsContext(contextId, context) {
        await this.registrations.setNotificationsContext(contextId, context);
    }
    /**
     * Remove notification context.
     * This method shouldn't be used anyone except twilio notifications library
     * @param contextId id of notification context
     * @private
     */
    async removeNotificationsContext(contextId) {
        await this.registrations.removeNotificationsContext(contextId);
    }
    /**
     * Connect to the server
     * @fires Twilsock#connected
     * @public
     * @returns {void}
     */
    connect() {
        return this.channel.connect();
    }
    /**
     * Disconnect from the server
     * @fires Twilsock#disconnected
     * @public
     * @returns {Promise}
     */
    async disconnect() {
        this.telemetryTracker.sendTelemetry(telemetrytracker.EventSendingLimitation.AnyEventsIncludingUnfinished);
        return await this.channel.disconnect();
    }
    /**
     * Get HTTP request to upstream service
     * @param {string} url Upstream service url
     * @param {headers} headers Set of custom headers
     * @param {string} [grant] The product grant
     * @returns {Promise}
     */
    async get(url, headers, grant) {
        this.telemetryTracker.sendTelemetry(telemetrytracker.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment
        return await this.upstream.send("GET", url, headers, undefined, grant);
    }
    /**
     * Post HTTP request to upstream service
     * @param {string} url Upstream service url
     * @param {headers} headers Set of custom headers
     * @param {body} body Body to send
     * @param {string} [grant] The product grant
     * @returns {Promise}
     */
    async post(url, headers, body, grant) {
        this.telemetryTracker.sendTelemetry(telemetrytracker.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment
        return (await this.upstream.send("POST", url, headers, body, grant));
    }
    /**
     * Put HTTP request to upstream service
     * @param {string} url Upstream service url
     * @param {headers} headers Set of custom headers
     * @param {body} body Body to send
     * @param {string} [grant] The product grant
     * @returns {Promise}
     */
    async put(url, headers, body, grant) {
        this.telemetryTracker.sendTelemetry(telemetrytracker.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment
        return (await this.upstream.send("PUT", url, headers, body, grant));
    }
    /**
     * Delete HTTP request to upstream service
     * @param {string} url Upstream service url
     * @param {headers} headers Set of custom headers
     * @param {body} body Body to send
     * @param {string} [grant] The product grant
     * @returns {Promise}
     */
    async delete(url, headers, body, grant) {
        this.telemetryTracker.sendTelemetry(telemetrytracker.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment
        return (await this.upstream.send("DELETE", url, headers, body, grant));
    }
    /**
     * Submits internal telemetry event. Not to be used for any customer and/or sensitive data.
     * @param {TelemetryEventDescription} event Event details.
     * @returns {void}
     */
    addTelemetryEvent(event) {
        this.telemetryTracker.addTelemetryEvent(event);
        this.telemetryTracker.sendTelemetryIfMinimalPortionCollected(); // send telemetry if need
    }
    /**
     * Submits internal telemetry event. Not to be used for any customer and/or sensitive data.
     * @param {TelemetryEventDescription} event Event details.
     * @param {string} eventKey Unique event key.
     * @param {TelemetryPoint} point Is this partial event for start or end of measurement.
     * @returns {void}
     */
    addPartialTelemetryEvent(event, eventKey, point) {
        this.telemetryTracker.addPartialEvent(event, eventKey, point);
        if (point === telemetrytracker.TelemetryPoint.End) {
            // this telemetry event is complete, so minimal portion could become ready to send
            this.telemetryTracker.sendTelemetryIfMinimalPortionCollected(); // send telemetry if need
        }
    }
};
exports.TwilsockClient = tslib_es6.__decorate([
    declarativeTypeValidator.validateConstructorTypes(declarativeTypeValidator.nonEmptyString, declarativeTypeValidator.nonEmptyString, [
        declarativeTypeValidator.pureObject,
        "undefined",
        declarativeTypeValidator.literal(null),
    ]),
    tslib_es6.__metadata("design:paramtypes", [String, String, Object])
], exports.TwilsockClient);
/**
 * Twilsock destination address descriptor
 * @typedef {Object} Twilsock#Address
 * @property {String} method - HTTP method. (POST, PUT, etc)
 * @property {String} host - host name without path. (e.g. my.company.com)
 * @property {String} path - path on the host (e.g. /my/app/to/call.php)
 */
/**
 * Twilsock upstream message
 * @typedef {Object} Twilsock#Message
 * @property {Twilsock#Address} to - destination address
 * @property {Object} headers - HTTP headers
 * @property {Object} body - Body
 */
/**
 * Fired when new message received
 * @param {Twilsock#Message} message
 * @event Twilsock#message
 */
/**
 * Fired when socket connected
 * @param {String} URI of endpoint
 * @event Twilsock#connected
 */
/**
 * Fired when socket disconnected
 * @event Twilsock#disconnected
 */
/**
 * Fired when token is about to expire and should be updated
 * @event Twilsock#tokenAboutToExpire
 */
/**
 * Fired when token has expired and connection is aborted
 * @event Twilsock#tokenExpired
 */
/**
 * Fired when socket connected
 * @param ConnectionState state - general twilsock state
 * @event Twilsock#stateChanged
 */
/**
 * Fired when connection is interrupted by unexpected reason
 * @type {Object}
 * @property {Boolean} terminal - twilsock will stop connection attempts
 * @property {String} message - root cause
 * @property {Number} [httpStatusCode] - http status code if available
 * @property {Number} [errorCode] - Twilio public error code if available
 * @event Twilsock#connectionError
 */

exports.TelemetryEvents = TelemetryEvents;
exports.Twilsock = exports.TwilsockClient;
//# sourceMappingURL=client.js.map
