{"version":3,"file":"client.js","sources":["../src/client.ts"],"sourcesContent":["import { Logger } from './logger';\nimport { Configuration } from './configuration';\n\nimport { UserUpdatedEventArgs, User, UserUpdateReason } from './user';\nimport { PublicChannels } from './data/publicchannels';\nimport { Network } from './services/network';\n\nimport { NotificationTypes } from './interfaces/notificationtypes';\n\nimport { Notifications as NotificationClient, ChannelType } from '@twilio/notifications';\nimport { TwilsockClient, InitRegistration, ConnectionState as TwilsockConnectionState, Transport } from 'twilsock';\nimport { SyncClient } from 'twilio-sync';\nimport { McsClient } from '@twilio/mcs-client';\n\nimport { Channels as ChannelsEntity, Channel } from './data/channels';\n\nimport { Users } from './data/users';\nimport { TypingIndicator } from './services/typingindicator';\nimport { UserDescriptor } from './userdescriptor';\nimport { UserChannels } from './data/userchannels';\nimport { ChannelDescriptor } from './channeldescriptor';\nimport { Paginator } from './interfaces/paginator';\nimport { PushNotification } from './pushnotification';\nimport { parseToNumber, deepClone } from './util';\nimport { Member, MemberUpdatedEventArgs, MemberUpdateReason } from './member';\nimport { Message, MessageUpdatedEventArgs, MessageUpdateReason } from './message';\nimport {\n  validateTypesAsync,\n  validateTypes,\n  literal,\n  nonEmptyString,\n  pureObject,\n  objectSchema,\n  validateConstructorTypes,\n  type,\n} from '@twilio/declarative-type-validator';\nimport { CommandExecutor } from './commandexecutor';\nimport { ConfigurationResponse } from './interfaces/commands/configuration';\nimport { version } from '../package.json';\nimport { ChannelUpdatedEventArgs, ChannelUpdateReason } from './channel';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\nconst log = Logger.scope('Client');\nconst SDK_VERSION = version;\n\nclass ClientServices {\n  commandExecutor: CommandExecutor;\n  twilsockClient: TwilsockClient;\n  users: Users;\n  notificationClient: NotificationClient;\n  publicChannels: PublicChannels;\n  userChannels: UserChannels;\n  network: Network;\n  typingIndicator: TypingIndicator;\n  syncClient: SyncClient;\n  mcsClient: McsClient;\n  transport: Transport;\n}\n\ntype ClientEvents = {\n  channelAdded: (channel: Channel) => void;\n  channelInvited: (channel: Channel) => void;\n  channelJoined: (channel: Channel) => void;\n  channelLeft: (channel: Channel) => void;\n  channelRemoved: (channel: Channel) => void;\n  channelUpdated: (data: {\n    channel: Channel;\n    updateReasons: ChannelUpdateReason[];\n  }) => void;\n  memberJoined: (member: Member) => void;\n  memberLeft: (member: Member) => void;\n  memberUpdated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  tokenAboutToExpire: (ttl: number) => void;\n  tokenExpired: () => void;\n  typingEnded: (member: Member) => void;\n  typingStarted: (member: Member) => void;\n  pushNotification: (pushNotification: PushNotification) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n  userUpdated: (data: {\n    user: User;\n    updateReasons: UserUpdateReason[];\n  }) => void;\n  stateChanged: (state: State) => void;\n  connectionStateChanged: (state: TwilsockConnectionState) => void;\n  connectionError: (data: {\n    terminal: boolean;\n    message: string;\n    httpStatusCode?: number;\n    errorCode?: number;\n  }) => void;\n};\n\n/**\n * Connection state of the client. Possible values are as follows:\n * * `'connecting'` - client is offline and connection attempt is in process\n * * `'connected'` - client is online and ready\n * * `'disconnecting'` - client is going offline as disconnection is in process\n * * `'disconnected'` - client is offline and no connection attempt is in process\n * * `'denied'` - client connection is denied because of invalid JWT access token. User must\n * refresh token in order to proceed\n */\ntype ConnectionState = TwilsockConnectionState;\n\n/**\n * State of the client. Possible values are as follows:\n * * `'failed'` - the client failed to initialize\n * * `'initialized'` - the client successfully initialized\n */\ntype State = 'failed' | 'initialized';\n\n/**\n * Notifications channel type. Possible values are as follows:\n * * `'fcm'`\n * * `'apn'`\n */\ntype NotificationsChannelType = ChannelType;\n\ntype LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'silent' | null;\n\n/**\n * Chat client options.\n */\ninterface ClientOptions {\n  region?: string;\n\n  /**\n   * The level of logging to enable.\n   */\n  logLevel?: LogLevel;\n  productId?: string;\n  twilsockClient?: TwilsockClient;\n  transport?: Transport;\n  notificationsClient?: NotificationClient;\n  syncClient?: SyncClient;\n  typingIndicatorTimeoutOverride?: number;\n  consumptionReportIntervalOverride?: string;\n  httpCacheIntervalOverride?: number;\n  userInfosToSubscribeOverride?: number;\n  retryWhenThrottledOverride?: boolean;\n  backoffConfigOverride?: any;\n  Chat?: any;\n  IPMessaging?: any;\n  Sync?: any;\n  Notification?: any;\n  Twilsock?: any;\n  clientMetadata?: any;\n  disableDeepClone?: boolean;\n  initRegistrations?: InitRegistration[];\n}\n\n/**\n * Options for {@link Client.createChannel}.\n */\ninterface CreateChannelOptions {\n  /**\n   * Any custom attributes to attach to the channel.\n   */\n  attributes?: any;\n\n  /**\n   * A non-unique display name of the channel.\n   */\n  friendlyName?: string;\n\n  /**\n   * Signifies whether the channel is private.\n   */\n  isPrivate?: boolean;\n\n  /**\n   * A unique identifier of the channel.\n   */\n  uniqueName?: string;\n}\n\n/**\n * Channel sorting criteria.\n */\ntype ChannelSortingCriteria = 'lastMessage' | 'friendlyName' | 'uniqueName';\n\n/**\n * Channel sorting order.\n */\ntype ChannelSortingOrder = 'ascending' | 'descending';\n\n/**\n * Channel sorting options.\n */\ninterface ChannelSortingOptions {\n  /**\n   * Channel sorting criteria.\n   */\n  criteria?: ChannelSortingCriteria;\n\n  /**\n   * Channel sorting order.\n   */\n  order?: ChannelSortingOrder;\n}\n\n/**\n * A client is the starting point to the Twilio Programmable Chat functionality.\n */\n@validateConstructorTypes(nonEmptyString, [\n  pureObject,\n  'undefined',\n  literal(null),\n])\nclass Client extends ReplayEventEmitter<ClientEvents> {\n  /**\n   * Client connection state.\n   */\n  public connectionState: ConnectionState = 'unknown'; // @todo make private?\n  private _ensureReady: Promise<any> = null;\n  private _resolveEnsureReady: (value?: any) => void = null;\n  private _rejectEnsureReady: (err: Error) => void  = null;\n  private channelsPromise: Promise<ChannelsEntity> = null;\n  private configurationPromise: Promise<ConfigurationResponse> | null = null;\n  private configuration: Configuration;\n  private channels: ChannelsEntity;\n  private readonly services: ClientServices;\n  private readonly _myself: User;\n\n  /**\n   * Current version of the Chat client.\n   */\n  public static readonly version = SDK_VERSION;\n\n  /**\n   * Current version of the Chat client.\n   */\n  public readonly version = SDK_VERSION;\n\n  private static readonly supportedPushChannels: NotificationsChannelType[] = ['fcm', 'apn'];\n  private static readonly supportedPushDataFields = {\n    'channel_sid': 'channelSid',\n    'message_sid': 'messageSid',\n    'message_index': 'messageIndex'\n  };\n\n  /**\n   * Returned client instance is not yet fully initialized. Calling any operations will block until it is.\n   * Use connection events to monitor when client becomes fully available (connectionStateChanged with state\n   * 'connected') or not available (connectionStateChange with state 'denied', event tokenExpired, event connectionError).\n   *\n   * @param fpaToken Access token\n   * @param options Options to customize the Client\n   * @returns A not yet fully-initialized client.\n   */\n  public constructor(\n    private fpaToken: string,\n    private readonly options: ClientOptions = {}\n  ) {\n    super();\n\n    this.options = this.options ?? {};\n\n    if (!this.options.disableDeepClone) {\n      let options = {\n        ...this.options,\n        transport: undefined,\n        twilsockClient: undefined\n      };\n\n      options = deepClone(options);\n      options.transport = this.options.transport;\n      options.twilsockClient = this.options.twilsockClient;\n\n      this.options = options;\n    }\n\n    this.options.logLevel = this.options.logLevel ?? 'silent';\n    log.setLevel(this.options.logLevel);\n\n    const productId = this.options.productId = 'ip_messaging';\n\n    // Fill ClientMetadata\n    this.options.clientMetadata = this.options.clientMetadata ?? {};\n\n    if (!this.options.clientMetadata.hasOwnProperty('type')) {\n      this.options.clientMetadata.type = 'chat';\n    }\n\n    if (!this.options.clientMetadata.hasOwnProperty('sdk')) {\n      this.options.clientMetadata.sdk = 'JS';\n      this.options.clientMetadata.sdkv = SDK_VERSION;\n    }\n\n    // Enable session local storage for Sync\n    this.options.Sync = this.options.Sync ?? {};\n\n    if (!this.options.Sync?.enableSessionStorage) {\n      this.options.Sync.enableSessionStorage = true;\n    }\n\n    if (this.options.region) {\n      this.options.Sync.region = this.options.region;\n    }\n\n    this.services = new ClientServices();\n\n    const startTwilsock = !this.options.twilsockClient;\n\n    // Create default init registrations if none were provided.\n    // Otherwise, the outside party have to list all the init registrations they need, including Sync ones.\n    if (!this.options.initRegistrations) {\n      const initRegistration = new InitRegistration(productId);\n      Client.populateInitRegistrations(initRegistration);\n      SyncClient.populateInitRegistrations(initRegistration);\n      this.options.initRegistrations = [initRegistration];\n    }\n\n    this.services.twilsockClient = (this.options.twilsockClient = this.options.twilsockClient\n      ?? new TwilsockClient(fpaToken, productId, this.options));\n\n    this.services.twilsockClient.on('tokenAboutToExpire', (ttl) => this.emit('tokenAboutToExpire', ttl));\n    this.services.twilsockClient.on('tokenExpired', () => this.emit('tokenExpired'));\n    this.services.twilsockClient.on('connectionError', (error) => this.emit('connectionError', error));\n    this.services.twilsockClient.on('stateChanged', (state: ConnectionState) => {\n      log.debug(`Handling stateChanged for ChatClient: new state ${state}`);\n      if (state !== this.connectionState) {\n        this.connectionState = state;\n        this.emit('connectionStateChanged', this.connectionState);\n      }\n    });\n\n    this.services.transport = (this.options.transport = (this.options.transport ?? this.options.twilsockClient) as Transport);\n    this.services.notificationClient = (this.options.notificationsClient = this.options.notificationsClient\n      ?? new NotificationClient(fpaToken, this.options));\n    this.services.syncClient = (this.options.syncClient = this.options.syncClient\n      ?? new SyncClient(fpaToken, this.options));\n\n    const configurationOptions = this.options?.Chat ?? this.options?.IPMessaging ?? this.options ?? {};\n    const region = configurationOptions.region ?? this.options.region;\n    const baseUrl = configurationOptions.apiUri\n      ?? configurationOptions.typingUri\n      ?? `https://aim.${region || 'us1'}.twilio.com`;\n\n    this.services.commandExecutor = new CommandExecutor(baseUrl, { transport: this.options.transport }, productId);\n\n    const emitFailed = (err): void => {\n      this._rejectEnsureReady(err);\n      this.emit('stateChanged', 'failed');\n    };\n\n    this.services.twilsockClient.once('connectionError', emitFailed);\n    this.services.twilsockClient.once('disconnected', emitFailed);\n\n    // ChatClient will be able to initialize only after twilsock is connected\n    this.services.twilsockClient.once('connected', async () => {\n      log.debug(`ChatClient started INITIALIZING`);\n      this.services.twilsockClient.off('connectionError', emitFailed);\n      this.services.twilsockClient.off('disconnected', emitFailed);\n      try {\n        await this._initialize();\n      } catch (err) {\n        // Fail ChatClient if initialization is incomplete\n        this._rejectEnsureReady(err);\n        this.emit('stateChanged', 'failed');\n      }\n    });\n\n    this._ensureReady = new Promise((resolve, reject) => {\n      this._resolveEnsureReady = resolve;\n      this._rejectEnsureReady = reject;\n    }).catch((err) => {}); // @todo How to process unhandled rejection here?\n\n    this._myself = new User(\n      '',\n      '',\n      null,\n      this.services\n    );\n\n    if (startTwilsock) {\n      this.services.twilsockClient.connect();\n    }\n  }\n\n  /**\n   * Fired when a channel becomes visible to the client. The event is also triggered when the client creates a new channel.\n   * Fired for all channels client has joined.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelAdded = 'channelAdded';\n\n  /**\n   * Fired when the client gets invited to a channel.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelInvited = 'channelInvited';\n\n  /**\n   * Fired when the client joins a channel.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelJoined = 'channelJoined';\n\n  /**\n   * Fired when the client leaves a channel.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelLeft = 'channelLeft';\n\n  /**\n   * Fired when a channel is no longer visible to the client.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelRemoved = 'channelRemoved';\n\n  /**\n   * Fired when the attributes or the metadata of a channel have been updated.\n   * During channel's {@link Client.constructor| creation and initialization}, this event might be fired multiple times\n   * for same joined or created channel as new data is arriving from different sources.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Channel} `channel` - the channel in question\n   *     * {@link ChannelUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  static readonly channelUpdated = 'channelUpdated';\n\n  /**\n   * Fired when a member has joined a channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly memberJoined = 'memberJoined';\n\n  /**\n   * Fired when a member has left a channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly memberLeft = 'memberLeft';\n\n  /**\n   * Fired when a member's fields have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Member} `member` - the member in question\n   *     * {@link MemberUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  static readonly memberUpdated = 'memberUpdated';\n\n  /**\n   * Fired when a new message has been added to the channel on the server.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - the message in question\n   * @event\n   */\n  static readonly messageAdded = 'messageAdded';\n\n  /**\n   * Fired when a message is removed from the message list of a channel.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - the message in question\n   * @event\n   */\n  static readonly messageRemoved = 'messageRemoved';\n\n  /**\n   * Fired when the fields of an existing message are updated with new values.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} `message` - the message in question\n   *     * {@link MessageUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  static readonly messageUpdated = 'messageUpdated';\n\n  /**\n   * Fired when the token is about to expire and needs to be updated.\n   *\n   * * Parameters:\n   * 1. number `ttl` - token's time to live\n   * @event\n   */\n  static readonly tokenAboutToExpire = 'tokenAboutToExpire';\n\n  /**\n   * Fired when the token has expired.\n   * @event\n   */\n  static readonly tokenExpired = 'tokenExpired';\n\n  /**\n   * Fired when a member has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly typingEnded = 'typingEnded';\n\n  /**\n   * Fired when a member has started typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly typingStarted = 'typingStarted';\n\n  /**\n   * Fired when the client has received (and parsed) a push notification via one of the push channels (apn or fcm).\n   *\n   * Parameters:\n   * 1. {@link PushNotification} `pushNotification` - the push notification in question\n   * @event\n   */\n  static readonly pushNotification = 'pushNotification';\n\n  /**\n   * Fired when the client has subscribed to a user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  static readonly userSubscribed = 'userSubscribed';\n\n  /**\n   * Fired when the client has unsubscribed from a user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  static readonly userUnsubscribed = 'userUnsubscribed';\n\n  /**\n   * Fired when the properties or the reachability status of a user have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link User} `user` - the user in question\n   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  static readonly userUpdated = 'userUpdated';\n\n  /**\n   * Fired when the connection is interrupted for an unexpected reason.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * boolean `terminal` - Twilsock will stop connection attempts if true\n   *     * string `message` - the error message of the root cause\n   *     * number? `httpStatusCode` - http status code if available\n   *     * number? `errorCode` - Twilio public error code if available\n   * @event\n   */\n  static readonly connectionError = 'connectionError';\n\n  /**\n   * Fired when the state of the client has been changed.\n   *\n   * Parameters:\n   * 1. {@link State} `state` - the new client state\n   * @event\n   */\n  static readonly stateChanged = 'stateChanged';\n\n  /**\n   * Fired when the connection state of the client has been changed.\n   *\n   * Parameters:\n   * 1. {@link ConnectionState} `connectionState` - the updated connection state\n   * @event\n   */\n  static readonly connectionStateChanged = 'connectionStateChanged';\n\n  /**\n   * @deprecated Call constructor directly.\n   *\n   * Factory method to create Chat client instance.\n   *\n   * The factory method will automatically trigger connection.\n   * Do not use it if you need finer-grained control.\n   *\n   * @param token Access token.\n   * @param options Options to customize the client.\n   * @returns Returns a fully initialized client.\n   */\n  public static async create(token: string, options?: ClientOptions): Promise<Client> {\n    // The logic is as follows:\n    // - If twilsock is not passed in, then the ChatClient constructor will call twilsock.connect() by itself\n    //   and we do not need to do it here.\n    // - If twilsock was passed in from the outside, but customer called ChatClient.create() then they are\n    //   using an obsolete workflow and the startup sequence will never complete.\n    if (options?.twilsockClient) {\n      throw new Error('Obsolete usage of ChatClient.create() factory method: if you pass twilsock from the outside then you must use ChatClient constructor and be prepared to work with uninitialized client.');\n    }\n\n    const client = new Client(token, options);\n    await client._ensureReady;\n\n    return client;\n  }\n\n  /**\n   * Information of the logged-in user. Before client initialization, returns an\n   * uninitialized user. Will trigger a {@link Client.userUpdated} event after\n   * initialization.\n   */\n  public get user(): User { return this._myself; }\n\n  /**\n   * Client reachability state. Throws if accessed before the client\n   * initialization was completed.\n   */\n  public get reachabilityEnabled(): boolean {\n    if (!this.configuration) {\n      throw new Error(\n        'Reachability information could not yet be accessed as the client ' +\n        \"has not yet been initialized. Subscribe to the 'stateChanged' event \" +\n        'to properly react to the client initialization.'\n      );\n    }\n\n    return this.configuration.reachabilityEnabled;\n  }\n\n  public get token(): string { return this.fpaToken; }\n\n  public static populateInitRegistrations(reg: InitRegistration) {\n    reg.populateInitRegistrations([NotificationTypes.TYPING_INDICATOR]);\n  }\n\n  private _subscribeToPushNotifications(channelType: NotificationsChannelType): void {\n    [NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CHANNEL,\n      NotificationTypes.INVITED_TO_CHANNEL,\n      NotificationTypes.REMOVED_FROM_CHANNEL,\n      NotificationTypes.CONSUMPTION_UPDATE] // Supported only on iOS\n      .forEach(messageType => {\n        this.services.notificationClient.subscribe(channelType, messageType);\n      });\n  }\n\n  private _unsubscribeFromPushNotifications(channelType: NotificationsChannelType): void {\n    [NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CHANNEL,\n      NotificationTypes.INVITED_TO_CHANNEL,\n      NotificationTypes.REMOVED_FROM_CHANNEL,\n      NotificationTypes.CONSUMPTION_UPDATE] // Supported only on iOS\n      .forEach(messageType => {\n        this.services.notificationClient.unsubscribe(channelType, messageType);\n      });\n  }\n\n  private async _initialize() {\n    const configurationResponse = await this.services.commandExecutor.fetchResource<void, ConfigurationResponse>(\n      'Client/v1/Configuration'\n    );\n\n    this.configuration = new Configuration(this.options, configurationResponse, log);\n\n    this._myself._resolveInitialization(\n      this.configuration,\n      this.configuration.userIdentity,\n      this.configuration.userInfo,\n      true\n    );\n\n    this.services.typingIndicator = new TypingIndicator(this.getChannelBySid.bind(this), this.configuration, this.services);\n    this.services.network = new Network(this.configuration, this.services);\n\n    this.services.users = new Users(this._myself, this.configuration, this.services);\n    this.services.users.on('userSubscribed', this.emit.bind(this, 'userSubscribed'));\n    this.services.users.on('userUpdated', (args: UserUpdatedEventArgs) => this.emit('userUpdated', args));\n    this.services.users.on('userUnsubscribed', this.emit.bind(this, 'userUnsubscribed'));\n\n    this.channels = new ChannelsEntity(this.configuration, this.services);\n    this.channels.on('channelAdded', this.emit.bind(this, 'channelAdded'));\n    this.channels.on('channelInvited', this.emit.bind(this, 'channelInvited'));\n    this.channels.on('channelRemoved', this.emit.bind(this, 'channelRemoved'));\n    this.channels.on('channelJoined', this.emit.bind(this, 'channelJoined'));\n    this.channels.on('channelLeft', this.emit.bind(this, 'channelLeft'));\n    this.channels.on('channelUpdated',\n      (args: ChannelUpdatedEventArgs) => this.emit('channelUpdated', args));\n\n    this.channels.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n    this.channels.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n    this.channels.on('memberUpdated',\n      (args: MemberUpdatedEventArgs) => this.emit('memberUpdated', args));\n\n    this.channels.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n    this.channels.on('messageUpdated',\n      (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n    this.channels.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n\n    this.channels.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n    this.channels.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n\n    this.channelsPromise = this.channels.fetchChannels()\n      .then(() => this.channels)\n      .catch((err) => { throw err; });\n\n    await this.services.users.myself._ensureFetched();\n\n    Client.supportedPushChannels.forEach(channelType => this._subscribeToPushNotifications(channelType));\n    this.services.typingIndicator.initialize();\n\n    this.services.publicChannels = new PublicChannels(this, this.services, this.configuration.links.conversations);\n    this.services.userChannels = new UserChannels(this, this.services, this.configuration.links.myConversations);\n\n    this.services.mcsClient = new McsClient(this.fpaToken, this.configuration.links.mediaService, null, {\n      ...this.options,\n      transport: null,\n    });\n\n    this._resolveEnsureReady();\n    this.emit('stateChanged', 'initialized');\n  }\n\n  /**\n   * Gracefully shut down the client.\n   */\n  public async shutdown(): Promise<void> {\n    await this._ensureReady;\n    await this.services.syncClient.shutdown(); // also disconnects twilsock\n  }\n\n  /**\n   * Update the token used by the client and re-register with the Programmable Chat services.\n   * @param token New access token.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async updateToken(token: string): Promise<Client> {\n    await this._ensureReady;\n    log.info('updateToken');\n\n    if (this.fpaToken === token) {\n      return this;\n    }\n\n    await this.services.twilsockClient.updateToken(token);\n    this.fpaToken = token;\n    this.services.mcsClient.updateToken(token);\n    await this.configurationPromise;\n\n    return this;\n  }\n\n  /**\n   * Get a known channel by its SID.\n   * @param channelSid Channel sid\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getChannelBySid(channelSid: string): Promise<Channel> {\n    await this._ensureReady;\n    await this.channels.myChannelsRead.promise;\n    let channel: Channel | ChannelDescriptor = await this.channels.getChannel(channelSid);\n    if (!channel) {\n      channel = await this.services.publicChannels.getChannelBySid(channelSid);\n    }\n    return await this.channels.pushChannel(channel);\n  }\n\n  /**\n   * Get a known channel by its unique identifier name.\n   * @param uniqueName The unique identifier name of the channel.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getChannelByUniqueName(uniqueName: string): Promise<Channel> {\n    await this._ensureReady;\n    await this.channels.myChannelsRead.promise;\n    const channel = await this.services.publicChannels.getChannelByUniqueName(uniqueName);\n    return await this.channels.pushChannel(channel);\n  }\n\n  /**\n   * Get the current list of all the subscribed channels.\n   */\n  public async getSubscribedChannels(args?): Promise<Paginator<Channel>> {\n    await this._ensureReady;\n    const channelsEntity = await this.channelsPromise;\n    return await channelsEntity.getChannels(args);\n  }\n\n  /**\n   * Get an array of channels that are locally known to the client in the provided sorting order.\n   * Locally known channels are the ones that are created and/or joined during the client runtime\n   * and all the subscribed channel of the currently-logged-in user.\n   * To ensure that the full list of the subscribed channels has fetched, call the\n   * {@link Client.getSubscribedChannels} method\n   * and fetch all the pages with the help of the {@link RestPaginator.nextPage} method.\n   * @param sortingOptions Sorting options.\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('sorting options', {\n      criteria: [literal('lastMessage', 'friendlyName', 'uniqueName'), 'undefined'],\n      order: [literal('ascending', 'descending'), 'undefined']\n    })\n  ])\n  public async getLocalChannels(sortingOptions?: ChannelSortingOptions): Promise<Array<Channel>> {\n    await this._ensureReady;\n    const channelsEntity = await this.channelsPromise;\n    let result: Channel[] = Array.from(channelsEntity.channels.values());\n    const sortingOrder = sortingOptions?.order || 'ascending';\n\n    if (sortingOptions?.criteria) {\n      if (sortingOptions.criteria === 'lastMessage') {\n        result.sort((a: Channel, b: Channel) =>\n          Client.compareChannelsByLastMessage(a, b, sortingOrder));\n      } else if (sortingOptions.criteria === 'uniqueName') {\n        result.sort((a: Channel, b: Channel) =>\n          Client.compareChannelsByStringProperty(a.uniqueName, b.uniqueName, sortingOrder));\n      } else if (sortingOptions.criteria === 'friendlyName') {\n        result.sort((a: Channel, b: Channel) =>\n          Client.compareChannelsByStringProperty(a.friendlyName, b.friendlyName, sortingOrder));\n      }\n    }\n\n    return result;\n  }\n\n  private static compareChannelsByLastMessage(a: Channel, b: Channel, order: ChannelSortingOrder) {\n    const lessThan = (a: Channel, b: Channel): number => {\n      if (a.lastMessage?.dateCreated?.getTime() > b.lastMessage?.dateCreated?.getTime()) {\n        // console.log('A time > B time');\n        return 1;\n      } else if (a.lastMessage?.dateCreated?.getTime() < b.lastMessage?.dateCreated?.getTime()) {\n        // console.log('A time < B time');\n        return -1;\n      }\n\n      if (b.lastMessage?.dateCreated) {\n        // console.log('B has time');\n        return 1;\n      } else if (a.lastMessage?.dateCreated) {\n        // console.log('A has time');\n        return -1;\n      }\n\n      if (b.lastMessage) {\n        // console.log('B has lastmessage');\n        return 1;\n      } else if (a.lastMessage) {\n        // console.log('A has lastmessage');\n        return -1;\n      }\n\n      return 0;\n    };\n    const result = lessThan(a, b);\n    console.log(`Sorted ${a.sid} and ${b.sid}: return ${result}`);\n    return (order === 'ascending') ? result : -result;\n  }\n\n  private static compareChannelsByStringProperty(str1: string, str2: string, order: ChannelSortingOrder) {\n    const lessThan = (a: string, b: string): number => {\n      if (a && b) {\n        return str1.localeCompare(str2);\n      } else if (b) {\n        return 1;\n      } else if (a) {\n        return -1;\n      }\n\n      return 0;\n    };\n    const result = lessThan(str1, str2);\n    return (order === 'ascending') ? result : -result;\n  }\n\n  /**\n   * Get the content of the public channels directory.\n   */\n  public async getPublicChannelDescriptors(): Promise<Paginator<ChannelDescriptor>> {\n    await this._ensureReady;\n    return await this.services.publicChannels.getChannels();\n  }\n\n  /**\n   * Get the content of the channels directory of the user (created by, joined or invited to).\n   */\n  public async getUserChannelDescriptors(): Promise<Paginator<ChannelDescriptor>> {\n    await this._ensureReady;\n    return await this.services.userChannels.getChannels();\n  }\n\n  /**\n   * Create a channel on the server and subscribe to its events.\n   * The default is a public channel with an empty friendly name.\n   * @param options Options for the channel.\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('channel options', {\n      friendlyName: ['string', 'undefined'],\n      isPrivate: ['boolean', 'undefined'],\n      uniqueName: ['string', 'undefined']\n    })\n  ])\n  public async createChannel(options?: CreateChannelOptions): Promise<Channel> {\n    await this._ensureReady;\n    options = options || {};\n    const channelsEntity = await this.channelsPromise;\n    return await channelsEntity.addChannel(options);\n  }\n\n  /**\n   * Register for push notifications.\n   * @param channelType Channel type.\n   * @param registrationId Push notification ID provided by the platform.\n   */\n  @validateTypesAsync(literal('fcm', 'apn'), 'string')\n  public async setPushRegistrationId(channelType: NotificationsChannelType, registrationId: string): Promise<void> {\n    await this._ensureReady;\n    this.services.notificationClient.setPushRegistrationId(channelType, registrationId);\n    await this.services.notificationClient.commitChanges(); // Committing before this point is useless because we have no push id\n  }\n\n  /**\n   * Unregister from push notifications.\n   * @param channelType Channel type.\n   */\n  @validateTypesAsync(literal('fcm', 'apn'))\n  public async unsetPushRegistrationId(channelType: NotificationsChannelType): Promise<void> {\n    await this._ensureReady;\n    // await this.services.notificationClient.removeRegistrations(..) // @todo\n    // old version:\n    this._unsubscribeFromPushNotifications(channelType);\n    await this.services.notificationClient.commitChanges();\n  }\n\n  private static parsePushNotificationChatData(data: Object): Object {\n    let result: Object = {};\n    for (let key in Client.supportedPushDataFields) {\n      if (typeof data[key] !== 'undefined' && data[key] !== null) {\n        if (key === 'message_index') {\n          if (parseToNumber(data[key]) !== null) {\n            result[Client.supportedPushDataFields[key]] = Number(data[key]);\n          }\n        } else {\n          result[Client.supportedPushDataFields[key]] = data[key];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Static method for push notification payload parsing. Returns parsed push as a {@link PushNotification} object.\n   * @param notificationPayload Push notification payload.\n   */\n  @validateTypes(pureObject)\n  public static parsePushNotification(notificationPayload): PushNotification {\n    log.debug('parsePushNotification, notificationPayload=', notificationPayload);\n\n    // APNS specifics\n    if (typeof notificationPayload.aps !== 'undefined') {\n      if (!notificationPayload.twi_message_type) {\n        throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n      }\n\n      let data = Client.parsePushNotificationChatData(notificationPayload);\n\n      let apsPayload = notificationPayload.aps;\n      let body: string = null;\n      let title: string = null;\n      if (typeof apsPayload.alert === 'string') {\n        body = apsPayload.alert || null;\n      } else {\n        body = apsPayload.alert.body || null;\n        title = apsPayload.alert.title || null;\n      }\n\n      return new PushNotification({\n        title: title,\n        body: body,\n        sound: apsPayload.sound || null,\n        badge: apsPayload.badge || null,\n        action: apsPayload.category || null,\n        type: notificationPayload.twi_message_type,\n        data: data\n      });\n    }\n\n    // FCM specifics\n    if (typeof notificationPayload.data !== 'undefined') {\n      let dataPayload = notificationPayload.data;\n      if (!dataPayload.twi_message_type) {\n        throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n      }\n\n      let data = Client.parsePushNotificationChatData(notificationPayload.data);\n      return new PushNotification({\n        title: dataPayload.twi_title || null,\n        body: dataPayload.twi_body || null,\n        sound: dataPayload.twi_sound || null,\n        badge: null,\n        action: dataPayload.twi_action || null,\n        type: dataPayload.twi_message_type,\n        data: data\n      });\n    }\n\n    throw new Error('Provided push notification payload is not Programmable Chat notification');\n  }\n\n  public parsePushNotification = Client.parsePushNotification;\n\n  /**\n   * Handle push notification payload parsing and emit the {@link Client.pushNotification} event on this {@link Client} instance.\n   * @param notificationPayload Push notification payload\n   */\n  @validateTypesAsync(pureObject)\n  public async handlePushNotification(notificationPayload): Promise<void> {\n    await this._ensureReady;\n    log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n    this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n  }\n\n  /**\n   * Gets a user with the given identity. If it's in the subscribed list, then return the user object from it;\n   * if not, then subscribe and add user to the subscribed list.\n   * @param identity Identity of the user.\n   * @returns A fully initialized user.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getUser(identity: string): Promise<User> {\n    await this._ensureReady;\n    return await this.services.users.getUser(identity);\n  }\n\n  /**\n   * Gets the user descriptor for given identity.\n   * @param identity Identity of the user.\n   * @returns The user descriptor.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getUserDescriptor(identity: string): Promise<UserDescriptor> {\n    await this._ensureReady;\n    return await this.services.users.getUserDescriptor(identity);\n  }\n\n  /**\n   * Get a list of subscribed user objects.\n   */\n  public async getSubscribedUsers(): Promise<Array<User>> {\n    await this._ensureReady;\n    return await this.services.users.getSubscribedUsers();\n  }\n}\n\nexport {\n  Client,\n  ConnectionState,\n  NotificationsChannelType,\n  LogLevel,\n  ClientOptions,\n  CreateChannelOptions,\n  ChannelSortingCriteria,\n  ChannelSortingOrder,\n  ChannelSortingOptions,\n  State\n};\n"],"names":["Logger","version","Client","ReplayEventEmitter","deepClone","InitRegistration","SyncClient","TwilsockClient","NotificationClient","CommandExecutor","User","NotificationTypes","Configuration","TypingIndicator","Network","Users","ChannelsEntity","PublicChannels","UserChannels","McsClient","parseToNumber","PushNotification","__decorate","validateTypesAsync","nonEmptyString","objectSchema","literal","pureObject","validateTypes","validateConstructorTypes"],"mappings":"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"}