/*
@license
Copyright (c) 2021 Twilio Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var type = require('./rules/type.js');

const runtimeTypeValidation = (rules, values) => {
    if (values.length > rules.length) {
        throw new Error(`Expected at most ${rules.length} argument(s), but got ${values.length}`);
    }
    while (values.length < rules.length) {
        values.push(undefined);
    }
    for (const [index, value] of values.entries()) {
        const [isValid, received, expected, delimeter] = validateValue(rules[index], value);
        if (isValid) {
            continue;
        }
        const argumentIndex = index + 1;
        throw new Error(`Argument ${argumentIndex} is expected to be ${expected}${delimeter} but got ${received}`);
    }
};
const stringifyReceivedType = (value) => {
    var _a, _b;
    let receivedType;
    const types = ["undefined", "boolean", "number", "bigint", "string"];
    if (types.includes(typeof value)) {
        receivedType = typeof value === "string" ? `"${value}"` : `${value}`;
    }
    if (typeof value === "object" && ((_a = value === null || value === void 0 ? void 0 : value.constructor) === null || _a === void 0 ? void 0 : _a.name) !== "Object") {
        receivedType =
            value === null ? "null" : `instance of ${(_b = value === null || value === void 0 ? void 0 : value.constructor) === null || _b === void 0 ? void 0 : _b.name}`;
    }
    if (!receivedType) {
        receivedType = typeof value;
    }
    return receivedType;
};
/* eslint-disable @typescript-eslint/no-explicit-any */
const validateConstructorTypes = (...args) => {
    const finalRuleSet = convertRuleArguments(args);
    return (ctor) => {
        return class extends ctor {
            constructor(...args) {
                runtimeTypeValidation(finalRuleSet, args);
                super(...args);
            }
        };
    };
};
/* eslint-enable @typescript-eslint/no-explicit-any */
const validateTypes = (...args) => {
    const finalRuleSet = convertRuleArguments(args);
    return (target, propertyKey, descriptor) => {
        if (typeof descriptor.value !== "function") {
            throw new Error("The validateTypes decorator can only be applied to methods");
        }
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            runtimeTypeValidation(finalRuleSet, args);
            return originalMethod.apply(this, args);
        };
    };
};
const validateTypesAsync = (...args) => {
    const finalRuleSet = convertRuleArguments(args);
    return (target, propertyKey, descriptor) => {
        if (typeof descriptor.value !== "function") {
            throw new Error("The validateTypesAsync decorator can only be applied to methods");
        }
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            try {
                runtimeTypeValidation(finalRuleSet, args);
            }
            catch (e) {
                return Promise.reject(e);
            }
            return originalMethod.apply(this, args);
        };
    };
};
const convertRuleArguments = (args) => {
    const finalRuleDefinitionSet = [];
    for (const arg of args) {
        finalRuleDefinitionSet.push(convertRuleArgument(arg));
    }
    return finalRuleDefinitionSet;
};
const convertRuleArgument = (arg) => {
    const finalArgumentRuleDefinitions = [];
    const declaredRules = Array.isArray(arg) ? arg : [arg];
    for (const rule of declaredRules) {
        if (typeof rule === "string" || typeof rule === "function") {
            finalArgumentRuleDefinitions.push(type.type(rule));
            continue;
        }
        finalArgumentRuleDefinitions.push(rule);
    }
    return finalArgumentRuleDefinitions;
};
const validateValue = (ruleDefinitions, value) => {
    let expectedTypes = [];
    let customReceivedType;
    let isValid = false;
    for (const definition of ruleDefinitions) {
        for (const check of definition.checks) {
            const [checkPassed, typeDescription, receivedType] = check(value);
            isValid = isValid || checkPassed;
            if (!customReceivedType && receivedType) {
                customReceivedType = receivedType;
            }
            if (typeDescription) {
                expectedTypes =
                    typeof typeDescription === "string"
                        ? [...expectedTypes, typeDescription]
                        : [...expectedTypes, ...typeDescription];
            }
        }
    }
    if (isValid) {
        return [true];
    }
    const receivedType = customReceivedType || stringifyReceivedType(value);
    const lastIndex = expectedTypes.length - 1;
    const expectedTypesString = lastIndex > 0
        ? `${expectedTypes.slice(0, lastIndex).join(", ")} or ${expectedTypes[lastIndex]}`
        : expectedTypes.join(", ");
    return [false, receivedType, expectedTypesString, lastIndex > 1 ? ";" : ","];
};

exports.convertRuleArgument = convertRuleArgument;
exports.convertRuleArguments = convertRuleArguments;
exports.runtimeTypeValidation = runtimeTypeValidation;
exports.stringifyReceivedType = stringifyReceivedType;
exports.validateConstructorTypes = validateConstructorTypes;
exports.validateTypes = validateTypes;
exports.validateTypesAsync = validateTypesAsync;
exports.validateValue = validateValue;
//# sourceMappingURL=type-validator.js.map
