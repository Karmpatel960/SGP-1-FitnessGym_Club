/*
@license
Copyright (c) 2018, Twilio, Inc.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

*/
'use strict';

var global =
  typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : typeof window !== "undefined"
    ? window
    : {};

Object.defineProperty(exports, '__esModule', { value: true });

var transporterror = require('./transporterror.js');

// eslint-disable-next-line
const XHR = global["XMLHttpRequest"] || {};
function parseResponseHeaders(headerString) {
    if (!headerString) {
        return {};
    }
    return headerString
        .split("\u000d\u000a")
        .map((el) => el.split("\u003a\u0020"))
        .filter((el) => el.length === 2 && el[1].length > 0)
        .reduce((prev, curr) => {
        prev[curr[0]] = curr[1];
        return prev;
    }, {});
}
function extractBody(xhr) {
    const contentType = xhr.getResponseHeader("Content-Type");
    if (!contentType ||
        contentType.indexOf("application/json") !== 0 ||
        xhr.responseText.length === 0) {
        return xhr.responseText;
    }
    try {
        return JSON.parse(xhr.responseText);
    }
    catch (e) {
        return xhr.responseText;
    }
}
/**
 * Provides generic network interface
 */
class Transport {
    static async request(method, url, headers, body) {
        return new Promise((resolve, reject) => {
            const xhr = new XHR();
            xhr.open(method, url, true);
            xhr.onreadystatechange = function onreadystatechange() {
                var _a;
                if (xhr.readyState !== 4) {
                    return;
                }
                const headers = parseResponseHeaders(xhr.getAllResponseHeaders());
                const body = extractBody(xhr);
                if (200 <= xhr.status && xhr.status < 300) {
                    resolve({ status: xhr.status, headers, body });
                }
                else {
                    const status = (_a = xhr.statusText) !== null && _a !== void 0 ? _a : "NONE";
                    let bodyRepresentation;
                    if (typeof body === "string") {
                        bodyRepresentation =
                            body && body.split("\n", 2).length === 1 ? body : "";
                    }
                    else {
                        bodyRepresentation = JSON.stringify(body);
                    }
                    const message = `${xhr.status}: [${status}] ${bodyRepresentation}`;
                    reject(new transporterror.TransportError(message, xhr.status, body, status, headers));
                }
            };
            for (const headerName in headers) {
                xhr.setRequestHeader(headerName, headers[headerName]);
                if (headerName === "Content-Type" &&
                    headers[headerName] === "application/json") {
                    body = JSON.stringify(body);
                }
            }
            xhr.send(body);
        });
    }
    /**
     * Make a GET request by given URL
     */
    async get(url, headers) {
        return Transport.request("GET", url, headers);
    }
    /**
     * Make a POST request by given URL
     */
    async post(url, headers, body) {
        return Transport.request("POST", url, headers, body);
    }
}

exports.Transport = Transport;
//# sourceMappingURL=transport.js.map
