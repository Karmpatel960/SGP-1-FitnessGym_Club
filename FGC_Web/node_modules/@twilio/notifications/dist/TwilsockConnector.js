/*
@license
The MIT License (MIT)

Copyright (c) 2016 Twilio Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var uuid = require('uuid');
var connector = require('./connector.js');
var logger = require('./logger.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var uuid__namespace = /*#__PURE__*/_interopNamespace(uuid);

/**
 * Registrar connector implementation for twilsock -- @todo Drop twilsock.connector COMPLETELY?!
 */
class TwilsockConnector extends connector.Connector {
    /**
     * Create twilsock registration connector.
     * @param productId product ID
     * @param platform platform ID string
     * @param twilsock {TwilsockClient} connection transport.
     */
    constructor(productId, platform, twilsock) {
        super("twilsock");
        this.productId = productId;
        this.platform = platform;
        this.twilsock = twilsock;
        this.contextId = uuid__namespace.v4();
    }
    async updateRegistration(registration, reasons) {
        if (!reasons.has("messageType")) {
            // No changed message types - it is fine, finish successfully.
            return registration;
        }
        const messageTypes = Array.from(registration.messageTypes);
        const context = {
            product_id: this.productId,
            notification_protocol_version: 4,
            endpoint_platform: this.platform,
            message_types: messageTypes,
        };
        try {
            await this.twilsock.setNotificationsContext(this.contextId, context);
        }
        catch (err) {
            logger.log.error(`Failed to update twilsock notification context: ${err}`);
            throw err;
        }
        return registration;
    }
    async removeRegistration() {
        try {
            await this.twilsock.removeNotificationsContext(this.contextId);
        }
        catch (err) {
            logger.log.error(`Failed to remove twilsock notification context: ${err}`);
            throw err;
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async sendDeviceRemoveRequest(registrationId) {
        // no need to do anything here, twilsock backend handles it on its own
    }
}

exports.TwilsockConnector = TwilsockConnector;
//# sourceMappingURL=TwilsockConnector.js.map
