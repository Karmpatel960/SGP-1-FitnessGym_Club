{"version":3,"file":"client.js","sources":["../src/client.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\nimport {\n  validateConstructorTypes,\n  nonEmptyString,\n  pureObject,\n  literal,\n} from \"@twilio/declarative-type-validator\";\n\nimport { log } from \"./logger\";\nimport { Configuration, RetryPolicyType } from \"./configuration\";\nimport { TwilsockChannel } from \"./twilsock\";\nimport type { Context, Headers } from \"./protocol/protocol\";\nimport { PacketInterface } from \"./packetinterface\";\nimport { WebSocketChannel } from \"./websocketchannel\";\nimport { Registrations } from \"./services/registrations\";\nimport { Upstream } from \"./services/upstream\";\nimport { Result, Transport } from \"./interfaces/transport\";\nimport { InitReply } from \"./protocol/messages/initReply\";\nimport { Deferred } from \"./deferred\";\nimport { TwilsockError } from \"./error/twilsockerror\";\nimport { OfflineProductStorage } from \"./offlinestorage\";\nimport { InitRegistration } from \"./protocol/initregistration\";\nimport TokenStorage from \"./tokenStorage\";\nimport {\n  EventSendingLimitation,\n  TelemetryEventDescription,\n  TelemetryPoint,\n  TelemetryTracker,\n} from \"./services/telemetrytracker\";\nimport { version } from \"../package.json\";\nimport { LogLevelDesc } from \"loglevel\";\n\nexport class TelemetryEvents {\n  public static readonly TWILSOCK_CONNECT = \"twilsock.sdk.connect\"; // establish WebSocket connection (with WebSocket handshake finished)\n  public static readonly TWILSOCK_INIT = \"twilsock.sdk.init\"; // send \"init\" message and receive reply\n}\n\n/**\n * Indicates current state of connection between the client and Sync service.\n * <p>Possible values are as follows:\n * <li>'connecting' - client is offline and connection attempt is in process.\n * <li>'connected' - client is online and ready.\n * <li>'disconnecting' - client is going offline as disconnection is in process.\n * <li>'disconnected' - client is offline and no connection attempt is in process.\n * <li>'denied' - client connection is denied because of invalid JWT access token. User must refresh token in order to proceed.\n * <li>'error' - client connection is in a permanent erroneous state. Client re-initialization is required.\n * @typedef {('unknown'|'connecting'|'connected'|'disconnecting'|'disconnected'|'denied'|'error')} TwilsockClient#ConnectionState\n */\nexport type ConnectionState =\n  | \"unknown\"\n  | \"disconnecting\"\n  | \"disconnected\"\n  | \"connecting\"\n  | \"connected\"\n  | \"denied\"\n  | \"error\";\n\nexport type ClientOptionsType = {\n  continuationToken?: string | null;\n  channel?: TwilsockChannel;\n  transport?: Transport;\n  registrations?: Registrations;\n  logLevel?: LogLevelDesc;\n  region?: string;\n  twilsock?: { uri?: string };\n  Twilsock?: { uri?: string };\n  retryPolicy?: RetryPolicyType;\n  initRegistrations?: InitRegistration[] | null;\n  tweaks: Record<string, unknown> | null;\n  clientMetadata: Record<string, unknown>;\n  productId?: string;\n  twilsockClient?: TwilsockClient;\n  notifications?: {\n    region?: string;\n    ersUrl?: string;\n  };\n};\n\n/**\n * @alias Twilsock\n * @classdesc Client library for the Twilsock service\n * It allows to recevie service-generated updates as well as bi-directional transport\n * @fires Twilsock#message\n * @fires Twilsock#connected\n * @fires Twilsock#disconnected\n * @fires Twilsock#tokenAboutToExpire\n * @fires Twilsock#tokenExpired\n * @fires Twilsock#stateChanged\n * @fires Twilsock#connectionError\n */\n@validateConstructorTypes(nonEmptyString, nonEmptyString, [\n  pureObject,\n  \"undefined\",\n  literal(null),\n])\nclass TwilsockClient extends EventEmitter {\n  private readonly config: Configuration;\n  private readonly channel: TwilsockChannel;\n\n  private readonly registrations: Registrations;\n  private readonly upstream: Upstream;\n  private readonly telemetryTracker: TelemetryTracker;\n  public readonly version = version;\n\n  private offlineStorageDeferred: Deferred<OfflineProductStorage> =\n    new Deferred();\n\n  /**\n   * @param {string} token Twilio access token\n   * @param {string} productId Product identifier. Should be the same as a grant name in token\n   * @param {object} options Twilsock configuration options\n   */\n  constructor(\n    token: string,\n    productId: string,\n    options: Partial<ClientOptionsType>\n  ) {\n    super();\n\n    options.continuationToken = options.continuationToken\n      ? options.continuationToken\n      : TokenStorage.getStoredToken(productId);\n\n    const config = (this.config = new Configuration(token, productId, options));\n\n    log.setLevel(config.logLevel);\n\n    const websocket = new WebSocketChannel(config.url);\n\n    const transport = new PacketInterface(websocket, config);\n    this.channel = new TwilsockChannel(websocket, transport, config);\n    this.registrations = new Registrations(transport);\n\n    this.upstream = new Upstream(transport, this.channel, config);\n\n    // Send telemetry only when connected and initialised\n    this.telemetryTracker = new TelemetryTracker(config, transport);\n    this.channel.on(\n      \"initialized\",\n      () => (this.telemetryTracker.canSendTelemetry = true)\n    );\n    websocket.on(\n      \"disconnected\",\n      () => (this.telemetryTracker.canSendTelemetry = false)\n    );\n\n    this.registrations.on(\"registered\", (id) => this.emit(\"registered\", id));\n\n    this.channel.on(\"message\", (type, message) =>\n      setTimeout(() => this.emit(\"message\", type, message), 0)\n    );\n\n    this.channel.on(\"stateChanged\", (state) =>\n      setTimeout(() => this.emit(\"stateChanged\", state), 0)\n    );\n\n    this.channel.on(\"connectionError\", (connectionError) =>\n      setTimeout(() => this.emit(\"connectionError\", connectionError), 0)\n    );\n\n    this.channel.on(\"tokenAboutToExpire\", () =>\n      setTimeout(() => this.emit(\"tokenAboutToExpire\"), 0)\n    );\n    this.channel.on(\"tokenExpired\", () =>\n      setTimeout(() => this.emit(\"tokenExpired\"), 0)\n    );\n\n    this.channel.on(\"connected\", () =>\n      this.registrations.updateRegistrations()\n    );\n    this.channel.on(\"connected\", () => this.upstream.sendPendingMessages());\n    this.channel.on(\"connected\", () =>\n      setTimeout(() => this.emit(\"connected\"), 0)\n    );\n\n    // Twilsock telemetry events\n    this.channel.on(\"beforeConnect\", () =>\n      this.telemetryTracker.addPartialEvent(\n        new TelemetryEventDescription(\n          \"Establish WebSocket connection\",\n          \"\",\n          new Date()\n        ),\n        TelemetryEvents.TWILSOCK_CONNECT,\n        TelemetryPoint.Start\n      )\n    );\n\n    this.channel.on(\"connected\", () =>\n      this.telemetryTracker.addPartialEvent(\n        new TelemetryEventDescription(\n          \"Establish WebSocket connection\",\n          \"\",\n          new Date(),\n          new Date()\n        ),\n        TelemetryEvents.TWILSOCK_CONNECT,\n        TelemetryPoint.End\n      )\n    );\n\n    this.channel.on(\"beforeSendInit\", () =>\n      this.telemetryTracker.addPartialEvent(\n        new TelemetryEventDescription(\"Send Twilsock init\", \"\", new Date()),\n        TelemetryEvents.TWILSOCK_INIT,\n        TelemetryPoint.Start\n      )\n    );\n\n    this.channel.on(\"initialized\", () =>\n      this.telemetryTracker.addPartialEvent(\n        new TelemetryEventDescription(\n          \"Send Twilsock init\",\n          \"Succeeded\",\n          new Date(),\n          new Date()\n        ),\n        TelemetryEvents.TWILSOCK_INIT,\n        TelemetryPoint.End\n      )\n    );\n\n    this.channel.on(\"sendInitFailed\", () =>\n      this.telemetryTracker.addPartialEvent(\n        new TelemetryEventDescription(\n          \"Send Twilsock init\",\n          \"Failed\",\n          new Date(),\n          new Date()\n        ),\n        TelemetryEvents.TWILSOCK_INIT,\n        TelemetryPoint.End\n      )\n    );\n\n    this.channel.on(\"initialized\", (initReply: InitReply) => {\n      this.handleStorageId(productId, initReply);\n      TokenStorage.storeToken(initReply.continuationToken, productId);\n      setTimeout(() => this.emit(\"initialized\", initReply), 0);\n    });\n\n    this.channel.on(\"disconnected\", () =>\n      setTimeout(() => this.emit(\"disconnected\"), 0)\n    );\n    this.channel.on(\"disconnected\", () =>\n      this.upstream.rejectPendingMessages()\n    );\n    this.channel.on(\"disconnected\", () =>\n      this.offlineStorageDeferred.fail(new TwilsockError(\"Client disconnected\"))\n    );\n\n    this.offlineStorageDeferred.promise.catch(() => void 0);\n  }\n\n  public emit(event: string | symbol, ...args: unknown[]): boolean {\n    log.debug(\n      `Emitting ${event.toString()}(${args\n        .map((a) => JSON.stringify(a))\n        .join(\", \")})`\n    );\n    return super.emit(event, ...args);\n  }\n\n  private handleStorageId(productId: string, initReply: InitReply) {\n    if (!initReply.offlineStorage) {\n      this.offlineStorageDeferred.fail(\n        new TwilsockError(\"No offline storage id\")\n      );\n    } else if (initReply.offlineStorage.hasOwnProperty(productId)) {\n      try {\n        this.offlineStorageDeferred.set(\n          OfflineProductStorage.create(initReply.offlineStorage[productId])\n        );\n        log.debug(\n          `Offline storage for '${productId}' product: ${JSON.stringify(\n            initReply.offlineStorage[productId]\n          )}.`\n        );\n      } catch (e) {\n        this.offlineStorageDeferred.fail(\n          new TwilsockError(\n            `Failed to parse offline storage for ${productId} ${JSON.stringify(\n              initReply.offlineStorage[productId]\n            )}. ${e}.`\n          )\n        );\n      }\n    } else {\n      this.offlineStorageDeferred.fail(\n        new TwilsockError(\n          `No offline storage id for '${productId}' product: ${JSON.stringify(\n            initReply.offlineStorage\n          )}`\n        )\n      );\n    }\n  }\n\n  /**\n   * Get offline storage ID\n   * @returns {Promise}\n   */\n  public storageId(): Promise<OfflineProductStorage> {\n    return this.offlineStorageDeferred.promise;\n  }\n\n  /**\n   * Indicates if twilsock is connected now\n   * @returns {Boolean}\n   */\n  public get isConnected(): boolean {\n    return this.channel.isConnected;\n  }\n\n  /**\n   * Current state\n   * @returns {ConnectionState}\n   */\n  public get state(): ConnectionState {\n    return this.channel.state;\n  }\n\n  /**\n   * Update token\n   * @param {String} token\n   * @returns {Promise}\n   */\n  public async updateToken(token: string): Promise<void> {\n    log.trace(`updating token '${token}'`);\n    if (this.config.token === token) {\n      return;\n    }\n\n    this.config.updateToken(token);\n    return await this.channel.updateToken(token);\n  }\n\n  /**\n   * Updates notification context.\n   * This method shouldn't be used anyone except twilio notifications library\n   * @param contextId id of notification context\n   * @param context value of notification context\n   * @private\n   */\n  public async setNotificationsContext(\n    contextId: string,\n    context: Context\n  ): Promise<void> {\n    await this.registrations.setNotificationsContext(contextId, context);\n  }\n\n  /**\n   * Remove notification context.\n   * This method shouldn't be used anyone except twilio notifications library\n   * @param contextId id of notification context\n   * @private\n   */\n  public async removeNotificationsContext(contextId: string): Promise<void> {\n    await this.registrations.removeNotificationsContext(contextId);\n  }\n\n  /**\n   * Connect to the server\n   * @fires Twilsock#connected\n   * @public\n   * @returns {void}\n   */\n  public connect(): void {\n    return this.channel.connect();\n  }\n\n  /**\n   * Disconnect from the server\n   * @fires Twilsock#disconnected\n   * @public\n   * @returns {Promise}\n   */\n  public async disconnect(): Promise<void> {\n    this.telemetryTracker.sendTelemetry(\n      EventSendingLimitation.AnyEventsIncludingUnfinished\n    );\n    return await this.channel.disconnect();\n  }\n\n  /**\n   * Get HTTP request to upstream service\n   * @param {string} url Upstream service url\n   * @param {headers} headers Set of custom headers\n   * @param {string} [grant] The product grant\n   * @returns {Promise}\n   */\n  public async get(\n    url: string,\n    headers: Headers,\n    grant?: string\n  ): Promise<Result<Context>> {\n    this.telemetryTracker.sendTelemetry(EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n    return await this.upstream.send(\"GET\", url, headers, undefined, grant);\n  }\n\n  /**\n   * Post HTTP request to upstream service\n   * @param {string} url Upstream service url\n   * @param {headers} headers Set of custom headers\n   * @param {body} body Body to send\n   * @param {string} [grant] The product grant\n   * @returns {Promise}\n   */\n  public async post<\n    T extends Record<string, unknown> = Record<string, unknown>\n  >(\n    url: string,\n    headers: Headers,\n    body: Context | string,\n    grant?: string\n  ): Promise<Result<Context<T>>> {\n    this.telemetryTracker.sendTelemetry(EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n    return (await this.upstream.send(\n      \"POST\",\n      url,\n      headers,\n      body,\n      grant\n    )) as Result<Context<T>>;\n  }\n\n  /**\n   * Put HTTP request to upstream service\n   * @param {string} url Upstream service url\n   * @param {headers} headers Set of custom headers\n   * @param {body} body Body to send\n   * @param {string} [grant] The product grant\n   * @returns {Promise}\n   */\n  public async put<T extends Record<string, unknown> = Record<string, unknown>>(\n    url: string,\n    headers: Headers,\n    body: Context | string,\n    grant?: string\n  ): Promise<Result<Context<T>>> {\n    this.telemetryTracker.sendTelemetry(EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n    return (await this.upstream.send(\n      \"PUT\",\n      url,\n      headers,\n      body,\n      grant\n    )) as Result<Context<T>>;\n  }\n\n  /**\n   * Delete HTTP request to upstream service\n   * @param {string} url Upstream service url\n   * @param {headers} headers Set of custom headers\n   * @param {body} body Body to send\n   * @param {string} [grant] The product grant\n   * @returns {Promise}\n   */\n  public async delete<\n    T extends Record<string, unknown> = Record<string, unknown>\n  >(\n    url: string,\n    headers: Headers,\n    body?: Context | string,\n    grant?: string\n  ): Promise<Result<Context<T>>> {\n    this.telemetryTracker.sendTelemetry(EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n    return (await this.upstream.send(\n      \"DELETE\",\n      url,\n      headers,\n      body,\n      grant\n    )) as Result<Context<T>>;\n  }\n\n  /**\n   * Submits internal telemetry event. Not to be used for any customer and/or sensitive data.\n   * @param {TelemetryEventDescription} event Event details.\n   * @returns {void}\n   */\n  public addTelemetryEvent(event: TelemetryEventDescription): void {\n    this.telemetryTracker.addTelemetryEvent(event);\n    this.telemetryTracker.sendTelemetryIfMinimalPortionCollected(); // send telemetry if need\n  }\n\n  /**\n   * Submits internal telemetry event. Not to be used for any customer and/or sensitive data.\n   * @param {TelemetryEventDescription} event Event details.\n   * @param {string} eventKey Unique event key.\n   * @param {TelemetryPoint} point Is this partial event for start or end of measurement.\n   * @returns {void}\n   */\n  public addPartialTelemetryEvent(\n    event: TelemetryEventDescription,\n    eventKey: string,\n    point: TelemetryPoint\n  ): void {\n    this.telemetryTracker.addPartialEvent(event, eventKey, point);\n    if (point === TelemetryPoint.End) {\n      // this telemetry event is complete, so minimal portion could become ready to send\n      this.telemetryTracker.sendTelemetryIfMinimalPortionCollected(); // send telemetry if need\n    }\n  }\n}\n\nexport { Context, Result, TwilsockClient, TwilsockClient as Twilsock };\n\n/**\n * Twilsock destination address descriptor\n * @typedef {Object} Twilsock#Address\n * @property {String} method - HTTP method. (POST, PUT, etc)\n * @property {String} host - host name without path. (e.g. my.company.com)\n * @property {String} path - path on the host (e.g. /my/app/to/call.php)\n */\n\n/**\n * Twilsock upstream message\n * @typedef {Object} Twilsock#Message\n * @property {Twilsock#Address} to - destination address\n * @property {Object} headers - HTTP headers\n * @property {Object} body - Body\n */\n\n/**\n * Fired when new message received\n * @param {Twilsock#Message} message\n * @event Twilsock#message\n */\n\n/**\n * Fired when socket connected\n * @param {String} URI of endpoint\n * @event Twilsock#connected\n */\n\n/**\n * Fired when socket disconnected\n * @event Twilsock#disconnected\n */\n\n/**\n * Fired when token is about to expire and should be updated\n * @event Twilsock#tokenAboutToExpire\n */\n\n/**\n * Fired when token has expired and connection is aborted\n * @event Twilsock#tokenExpired\n */\n\n/**\n * Fired when socket connected\n * @param ConnectionState state - general twilsock state\n * @event Twilsock#stateChanged\n */\n\n/**\n * Fired when connection is interrupted by unexpected reason\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n * @event Twilsock#connectionError\n */\n"],"names":["TwilsockClient","EventEmitter","version","Deferred","TokenStorage","Configuration","log","WebSocketChannel","PacketInterface","TwilsockChannel","Registrations","Upstream","TelemetryTracker","TelemetryEventDescription","TelemetryPoint","TwilsockError","OfflineProductStorage","EventSendingLimitation","validateConstructorTypes","nonEmptyString","pureObject","literal"],"mappings":"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"}