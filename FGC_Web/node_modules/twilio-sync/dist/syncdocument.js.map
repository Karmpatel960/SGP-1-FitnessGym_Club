{"version":3,"file":"syncdocument.js","sources":["../src/syncdocument.ts"],"sourcesContent":["import { SyncError } from './utils/syncerror';\nimport { deepClone } from './utils/sanitize';\nimport log from './utils/logger';\n\nimport { SyncEntity, EntityServices, RemovalHandler } from './entity';\nimport { Mutator } from './interfaces/mutator';\nimport { MergingQueue } from './mergingqueue';\nimport Closeable from './closeable';\nimport { nonNegativeInteger, objectSchema, pureObject, validateTypesAsync } from '@twilio/declarative-type-validator';\n\ninterface DocumentServices extends EntityServices {\n}\n\ninterface DocumentDescriptor {\n  url: string;\n  sid: string;\n  revision: string;\n  last_event_id: number;\n  unique_name: string;\n  data: Object;\n  date_updated: Date;\n  date_expires: string;\n}\n\ninterface DocumentUpdateRequest {\n  data?: Object;\n  ttl?: number;\n  revision?: string;\n}\n\ninterface DocumentUpdateResult {\n  revision: string;\n  data: Object;\n  last_event_id: number;\n  date_updated: Date;\n  date_expires: string | null;\n}\n\n/**\n * Document metadata.\n */\ninterface SyncDocumentMetadata {\n  /**\n   * Specifies the time-to-live in seconds after which the document is subject to automatic deletion.\n   * The value 0 means infinity.\n   */\n  ttl?: number;\n}\n\nclass SyncDocumentImpl extends SyncEntity {\n\n  private readonly updateMergingQueue: MergingQueue<SyncDocumentMetadata, Object>;\n  private readonly descriptor: DocumentDescriptor;\n  private isDeleted: boolean = false;\n\n  /**\n   * @internal\n   */\n  constructor(services: DocumentServices, descriptor: DocumentDescriptor, removalHandler: RemovalHandler) {\n    super(services, removalHandler);\n\n    const updateRequestReducer = (acc, input) => (typeof input.ttl === 'number') ? {ttl: input.ttl}\n      : acc;\n    this.updateMergingQueue = new MergingQueue<SyncDocumentMetadata, Object>(updateRequestReducer);\n    this.descriptor = descriptor;\n    this.descriptor.data = this.descriptor.data || {};\n    this.descriptor.date_updated = new Date(this.descriptor.date_updated);\n  }\n\n  // private props\n  get uri(): string {\n    return this.descriptor.url;\n  }\n\n  get revision(): string {\n    return this.descriptor.revision;\n  }\n\n  get lastEventId(): number {\n    return this.descriptor.last_event_id;\n  }\n\n  get dateExpires(): string {\n    return this.descriptor.date_expires;\n  }\n\n  static get type() {\n    return 'document';\n  }\n\n  get type() {\n    return 'document';\n  }\n\n  // below properties are specific to Insights only\n  get indexName(): string {\n    return undefined;\n  }\n\n  get queryString(): string {\n    return undefined;\n  }\n\n  // public props, documented along with class description\n  get sid(): string {\n    return this.descriptor.sid;\n  }\n\n  get data(): Object {\n    return this.descriptor.data;\n  }\n\n  get dateUpdated(): Date {\n    return this.descriptor.date_updated;\n  }\n\n  get uniqueName(): string {\n    return this.descriptor.unique_name || null;\n  }\n\n  /**\n   * Update data entity with new data\n   * @private\n   */\n  _update(update): void {\n    update.date_created = new Date(update.date_created);\n    switch (update.type) {\n      case 'document_updated':\n        if (update.id <= this.lastEventId) {\n          log.trace('Document update skipped, current:', this.lastEventId, ', remote:', update.id);\n          break;\n        }\n\n        const previousData = this.descriptor.data !== undefined ? deepClone(this.descriptor.data) : null;\n\n        this.descriptor.last_event_id = update.id;\n        this.descriptor.revision = update.document_revision;\n        this.descriptor.date_updated = update.date_created;\n        this.descriptor.data = update.document_data;\n\n        this.broadcastEventToListeners('updated', {data: update.document_data, isLocal: false, previousData});\n        this.services.storage.update(this.type, this.sid, this.uniqueName,\n          {\n            last_event_id: update.id,\n            revision: update.document_revision,\n            date_updated: update.date_created,\n            data: update.document_data\n          });\n        break;\n      case 'document_removed':\n        this.onRemoved(false);\n        break;\n    }\n  }\n\n  public async set(value: Object, metadataUpdates?: SyncDocumentMetadata): Promise<Object> {\n    const input: SyncDocumentMetadata = metadataUpdates || {};\n    return this.updateMergingQueue.squashAndAdd(input, input => this._setUnconditionally(value, input.ttl));\n  }\n\n  public async mutate(mutator: Mutator, metadataUpdates?: SyncDocumentMetadata): Promise<Object> {\n    const input: SyncDocumentMetadata = metadataUpdates || {};\n    return this.updateMergingQueue.add(input, input => this._setWithIfMatch(mutator, input.ttl));\n  }\n\n  public async update(obj: Object, metadataUpdates?: SyncDocumentMetadata): Promise<Object> {\n    return this.mutate(remote => Object.assign(remote, obj), metadataUpdates);\n  }\n\n  public async setTtl(ttl: number): Promise<void> {\n    const response = await this._postUpdateToServer({ttl});\n    this.descriptor.date_expires = response.date_expires;\n  }\n\n  /**\n   * @private\n   */\n  private async _setUnconditionally(value: Object, ttl?: number): Promise<Object> {\n    let result = await this._postUpdateToServer({data: value, revision: undefined, ttl});\n    this._handleSuccessfulUpdateResult(result);\n    return this.descriptor.data;\n  }\n\n  /**\n   * @private\n   */\n  private async _setWithIfMatch(mutatorFunction: Mutator, ttl?: number): Promise<Object> {\n    let data = mutatorFunction(deepClone(this.descriptor.data));\n    if (data) {\n      let revision = this.revision;\n      try {\n        let result = await this._postUpdateToServer({data, revision, ttl});\n        this._handleSuccessfulUpdateResult(result);\n        return this.descriptor.data;\n      } catch (error) {\n        if (error.status === 412) {\n          await this._softSync();\n          return this._setWithIfMatch(mutatorFunction);\n        } else {\n          throw error;\n        }\n      }\n    } else {\n      return this.descriptor.data;\n    }\n  }\n\n  /**\n   * @private\n   */\n  private _handleSuccessfulUpdateResult(result: DocumentUpdateResult) {\n    // Ignore returned value if we already got a newer one\n    if (result.last_event_id <= this.descriptor.last_event_id) {\n      return;\n    }\n\n    const previousData = this.descriptor.data !== undefined ? deepClone(this.descriptor.data) : null;\n\n    this.descriptor.revision = result.revision;\n    this.descriptor.data = result.data;\n    this.descriptor.last_event_id = result.last_event_id;\n    this.descriptor.date_expires = result.date_expires;\n    this.descriptor.date_updated = new Date(result.date_updated);\n\n    this.services.storage.update(this.type, this.sid, this.uniqueName,\n      {\n        last_event_id: result.last_event_id,\n        revision: result.revision,\n        date_updated: result.date_updated,\n        data: result.data\n      });\n    this.broadcastEventToListeners('updated', {data: this.descriptor.data, isLocal: true, previousData});\n  }\n\n  /**\n   * @private\n   */\n  private async _postUpdateToServer(request: DocumentUpdateRequest): Promise<DocumentUpdateResult> {\n    if (!this.isDeleted) {\n      const requestBody: any = {\n        data: request.data\n      };\n\n      if (request.ttl !== undefined) {\n        requestBody.ttl = request.ttl;\n      }\n\n      const ifMatch = request.revision;\n      try {\n        const response = await this.services.network.post(this.uri, requestBody, ifMatch);\n        return {\n          revision: response.body.revision,\n          data: request.data,\n          last_event_id: response.body.last_event_id,\n          date_updated: response.body.date_updated,\n          date_expires: response.body.date_expires\n        };\n      } catch (error) {\n        if (error.status === 404) {\n          this.onRemoved(false);\n        }\n        throw error;\n      }\n    } else {\n      return Promise.reject(new SyncError('The Document has been removed', 404, 54100));\n    }\n  }\n\n  /**\n   * Get new data from server\n   * @private\n   */\n  private async _softSync() {\n    return this.services.network.get(this.uri)\n      .then(response => {\n        const event = {\n          type: 'document_updated',\n          id: response.body.last_event_id,\n          document_revision: response.body.revision,\n          document_data: response.body.data,\n          date_created: response.body.date_updated\n        };\n        this._update(event);\n        return this;\n      })\n      .catch(err => {\n        if (err.status === 404) {\n          this.onRemoved(false);\n        } else {\n          log.error(`Can't get updates for ${this.sid}:`, err);\n        }\n      });\n  }\n\n  protected onRemoved(locally: boolean) {\n    if (this.isDeleted) {\n      return;\n    }\n\n    const previousData = this.descriptor.data !== undefined ? deepClone(this.descriptor.data) : null;\n\n    this.isDeleted = true;\n    this._unsubscribe();\n    this.removalHandler(this.type, this.sid, this.uniqueName);\n    this.broadcastEventToListeners('removed', {isLocal: locally, previousData});\n  }\n\n  public async removeDocument() {\n    if (!this.isDeleted) {\n      await this.services.network.delete(this.uri);\n      this.onRemoved(true);\n    } else {\n      return Promise.reject(new SyncError('The Document has been removed', 404, 54100));\n    }\n  }\n\n}\n\n/**\n * Represents a Sync document, the contents of which is a single JSON object.\n * Use the {@link SyncClient.document} method to obtain a reference to a Sync document.\n * Information about rate limits can be found [here](https://www.twilio.com/docs/sync/limits).\n */\nclass SyncDocument extends Closeable {\n\n  private readonly syncDocumentImpl: SyncDocumentImpl;\n\n  // private props\n  get uri(): string {\n    return this.syncDocumentImpl.uri;\n  }\n\n  get revision(): string {\n    return this.syncDocumentImpl.revision;\n  }\n\n  get lastEventId(): number {\n    return this.syncDocumentImpl.lastEventId;\n  }\n\n  get dateExpires(): string {\n    return this.syncDocumentImpl.dateExpires;\n  }\n\n  static get type() {\n    return SyncDocumentImpl.type;\n  }\n\n  get type() {\n    return SyncDocumentImpl.type;\n  }\n\n  /**\n   * The immutable identifier of this document, assigned by the system.\n   */\n  get sid(): string {\n    return this.syncDocumentImpl.sid;\n  }\n\n  /**\n   * The contents of this document.\n   */\n  get data(): Object {\n    return this.syncDocumentImpl.data;\n  }\n\n  /**\n   * Date when the document was last updated.\n   */\n  get dateUpdated(): Date {\n    return this.syncDocumentImpl.dateUpdated;\n  }\n\n  /**\n   * An optional immutable identifier that may be assigned by the programmer\n   * to this document during creation. Globally unique among other documents.\n   */\n  get uniqueName(): string {\n    return this.syncDocumentImpl.uniqueName;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(syncDocumentImpl: SyncDocumentImpl) {\n    super();\n    this.syncDocumentImpl = syncDocumentImpl;\n    this.syncDocumentImpl.attach(this);\n  }\n\n  /**\n   * Fired when the document is removed, regardless of whether the remover was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has following properties:\n   *     * boolean `isLocal` - is true if document was removed by a local actor, false otherwise\n   *     * object `previousData` - contains a snapshot of the document data before removal\n   * @example\n   * ```typescript\n   * document.on('removed', (args) => {\n   *   console.log(`Document ${document.sid} was removed`);\n   *   console.log('args.isLocal:', args.isLocal);\n   *   console.log('args.previousData:', args.previousData);\n   * });\n   * ```\n   * @event\n   */\n  static readonly removed = 'removed';\n\n  /**\n   * Fired when the document's contents have changed, regardless of whether the updater was local or remote.\n   *\n   * Parameters:\n   * 1. object `args` - info object provided with the event. It has the following properties:\n   *     * boolean `isLocal` - is true if document was updated by a local actor, false otherwise\n   *     * object `data` - a snapshot of the document's new contents\n   *     * object `previousData` - contains a snapshot of the document data before the update\n   * @example\n   * ```typescript\n   * document.on('updated', (args) => {\n   *   console.log(`Document ${document.sid} was updated`);\n   *   console.log('args.data:', args.data);\n   *   console.log('args.isLocal:', args.isLocal);\n   *   console.log('args.previousData:', args.previousData);\n   * });\n   * ```\n   * @event\n   */\n  static readonly updated = 'updated';\n\n  /**\n   * Assign new contents to this document. The current data will be overwritten.\n   * @param data The new contents to assign.\n   * @param metadataUpdates New document metadata.\n   * @return A promise resolving to the new data of the document.\n   * @example\n   * ```typescript\n   * // Say, the Document data is `{ name: 'John Smith', age: 34 }`\n   * document.set({ name: 'Barbara Oaks' }, { ttl: 86400 })\n   *   .then((newValue) => {\n   *     // Now the Document data is `{ name: 'Barbara Oaks' }`\n   *     console.log('Document set() successful, new data:', newValue);\n   *   })\n   *   .catch((error) => {\n   *     console.error('Document set() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    pureObject,\n    [\n      'undefined',\n      objectSchema('document metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async set(data: Object, metadataUpdates?: SyncDocumentMetadata): Promise<Object> {\n    this.ensureNotClosed();\n    return this.syncDocumentImpl.set(data, metadataUpdates);\n  }\n\n  /**\n   * Schedules a modification to this document that will apply a mutation function.\n   * @param mutator A function that outputs new data based on the existing data.\n   * May be called multiple times, particularly if this document is modified concurrently by remote code.\n   * If the mutation ultimately succeeds, the document will have made the particular transition described\n   * by this function.\n   * @param metadataUpdates New document metadata.\n   * @return Resolves with the most recent Document state, whether the output of a\n   * successful mutation or a state that prompted graceful cancellation (mutator returned `null`).\n   * @example\n   * ```typescript\n   * const mutatorFunction = (currentValue) => {\n   *     currentValue.viewCount = (currentValue.viewCount ?? 0) + 1;\n   *     return currentValue;\n   * };\n   * document.mutate(mutatorFunction, { ttl: 86400 }))\n   *   .then((newValue) => {\n   *     console.log('Document mutate() successful, new data:', newValue);\n   *   })\n   *   .catch((error) => {\n   *     console.error('Document mutate() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    'function',\n    [\n      'undefined',\n      objectSchema('document metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async mutate(mutator: Mutator, metadataUpdates?: SyncDocumentMetadata): Promise<Object> {\n    this.ensureNotClosed();\n    return this.syncDocumentImpl.mutate(mutator, metadataUpdates);\n  }\n\n  /**\n   * Modify a document by appending new fields (or by overwriting existing ones) with the values from the provided Object.\n   * This is equivalent to:\n   * ```typescript\n   * document.mutate((currentValue) => Object.assign(currentValue, obj));\n   * ```\n   * @param obj Specifies the particular (top-level) attributes that will receive new values.\n   * @param metadataUpdates New document metadata.\n   * @return A promise resolving to the new data of the document.\n   * @example\n   * ```typescript\n   * // Say, the Document data is `{ name: 'John Smith' }`\n   * document.update({ age: 34 }, { ttl: 86400 })\n   *   .then((newValue) => {\n   *     // Now the Document data is `{ name: 'John Smith', age: 34 }`\n   *     console.log('Document update() successful, new data:', newValue);\n   *   })\n   *   .catch((error) => {\n   *     console.error('Document update() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(\n    pureObject,\n    [\n      'undefined',\n      objectSchema('document metadata', {\n        ttl: [nonNegativeInteger, 'undefined']\n      })\n    ]\n  )\n  public async update(obj: Object, metadataUpdates?: SyncDocumentMetadata): Promise<Object> {\n    this.ensureNotClosed();\n    return this.syncDocumentImpl.update(obj, metadataUpdates);\n  }\n\n  /**\n   * Update the time-to-live of the document.\n   * @param ttl Specifies the time-to-live in seconds after which the document is subject to automatic deletion. The value 0 means infinity.\n   * @return A promise that resolves after the TTL update was successful.\n   * @example\n   * ```typescript\n   * document.setTtl(3600)\n   *   .then(() => {\n   *     console.log('Document setTtl() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Document setTtl() failed', error);\n   *   });\n   * ```\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async setTtl(ttl: number): Promise<void> {\n    this.ensureNotClosed();\n    return this.syncDocumentImpl.setTtl(ttl);\n  }\n\n  /**\n   * Delete a document.\n   * @return A promise which resolves if (and only if) the document is ultimately deleted.\n   * @example\n   * ```typescript\n   * document.removeDocument()\n   *   .then(() => {\n   *     console.log('Document removeDocument() successful');\n   *   })\n   *   .catch((error) => {\n   *     console.error('Document removeDocument() failed', error);\n   *   });\n   * ```\n   */\n  public async removeDocument() {\n    this.ensureNotClosed();\n    return this.syncDocumentImpl.removeDocument();\n  }\n\n  /**\n   * Conclude work with the document instance and remove all event listeners attached to it.\n   * Any subsequent operation on this object will be rejected with error.\n   * Other local copies of this document will continue operating and receiving events normally.\n   * @example\n   * ```typescript\n   * document.close();\n   * ```\n   */\n  public close(): void {\n    super.close();\n    this.syncDocumentImpl.detach(this.listenerUuid);\n  }\n\n}\n\nexport { SyncDocumentMetadata, DocumentServices, DocumentDescriptor, Mutator, SyncDocument, SyncDocumentImpl };\nexport default SyncDocument;\n"],"names":["SyncEntity","MergingQueue","log","deepClone","SyncError","Closeable","__decorate","validateTypesAsync","pureObject","objectSchema","nonNegativeInteger"],"mappings":"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"}