/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2016, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes javascript-state-machine under the following license.

    Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.


*/
'use strict';

var global =
  typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : typeof window !== "undefined"
    ? window
    : {};

Object.defineProperty(exports, '__esModule', { value: true });

var telemetry = require('../protocol/messages/telemetry.js');
var logger = require('../logger.js');

class TelemetryEventDescription {
    constructor(title, details, start, end, type, id) {
        this.title = title;
        this.details = details;
        this.start = start;
        this.type = type;
        this.id = id;
        this.end = end;
    }
    // Prepare telemetry event right before sending it.
    // Convert times to relative.
    toTelemetryEvent() {
        // Fix dates
        const now = new Date();
        let actualStart = this.start;
        let actualEnd = this.end ? this.end : now;
        if (actualEnd < actualStart) {
            const tmp = actualEnd;
            actualEnd = actualStart;
            actualStart = tmp;
        }
        // Converting dates to relative offset from current moment in ms
        const startOffset = actualStart.getTime() - now.getTime();
        const endOffset = actualEnd.getTime() - now.getTime();
        const result = new telemetry.TelemetryEvent(startOffset, endOffset, this.title, this.details, this.id, this.type);
        return result;
    }
}
exports.TelemetryPoint = void 0;
(function (TelemetryPoint) {
    TelemetryPoint[TelemetryPoint["Start"] = 0] = "Start";
    TelemetryPoint[TelemetryPoint["End"] = 1] = "End";
})(exports.TelemetryPoint || (exports.TelemetryPoint = {}));
exports.EventSendingLimitation = void 0;
(function (EventSendingLimitation) {
    EventSendingLimitation[EventSendingLimitation["MinEventsPortion"] = 0] = "MinEventsPortion";
    EventSendingLimitation[EventSendingLimitation["AnyEvents"] = 1] = "AnyEvents";
    EventSendingLimitation[EventSendingLimitation["AnyEventsIncludingUnfinished"] = 2] = "AnyEventsIncludingUnfinished";
})(exports.EventSendingLimitation || (exports.EventSendingLimitation = {}));
class TelemetryTracker {
    constructor(config, packetInterface) {
        // accumulated events count that is big enough to be sent out of schedule (not on timer but on new event registration)
        this.minEventsPortionToSend = 50;
        // max events batch size to be sent in a single Telemetry message
        this.maxEventsPortionToSend = 100;
        this.pendingEvents = new Map(); // started events: have TelemetryEvent::startTime only
        this.readyEvents = []; // events ready to send
        this.hasInitializationFinished = false;
        this._canSendTelemetry = false;
        this.config = config;
        this.packetInterface = packetInterface;
    }
    // Keeping this private prevents the type declaration from being generated properly.
    // Ideally, this should be private.
    get isTelemetryEnabled() {
        return this.config.confirmedCapabilities.has("telemetry.v1");
    }
    get canSendTelemetry() {
        return this._canSendTelemetry && this.isTelemetryEnabled;
    }
    set canSendTelemetry(enable) {
        logger.log.debug(`TelemetryTracker.canSendTelemetry: ${enable} TelemetryTracker.isTelemetryEnabled: ${this.isTelemetryEnabled}`);
        // We want to keep telemetry events added in advance but
        // we need to purge events from previous connection when being disconnected
        if (this._canSendTelemetry && !enable) {
            this.pendingEvents.clear();
            this.readyEvents = [];
        }
        this._canSendTelemetry = enable;
        if (enable) {
            this.sendTelemetry(exports.EventSendingLimitation.AnyEvents);
        }
        if (enable && !this.hasInitializationFinished) {
            this.hasInitializationFinished = true;
        }
    }
    // Add complete event
    addTelemetryEvent(event) {
        // Allow adding events before initialization.
        if (!this.canSendTelemetry && this.hasInitializationFinished) {
            return;
        }
        this.readyEvents.push(event);
    }
    // Add incomplete event (with either starting or ending time point)
    addPartialEvent(incompleteEvent, eventKey, point) {
        logger.log.debug(`Adding ${point === exports.TelemetryPoint.Start ? "starting" : "ending"} timepoint for '${eventKey}' event`);
        const exists = this.pendingEvents.has(eventKey);
        if (point === exports.TelemetryPoint.Start) {
            if (exists) {
                logger.log.debug(`Overwriting starting point for '${eventKey}' event`);
            }
            this.pendingEvents.set(eventKey, incompleteEvent);
        }
        else {
            if (!exists) {
                logger.log.info(`Could not find started event for '${eventKey}' event`);
                return;
            }
            this.addTelemetryEvent(this.merge(this.pendingEvents.get(eventKey), incompleteEvent));
            this.pendingEvents.delete(eventKey);
        }
    }
    getTelemetryToSend(sendingLimit) {
        if (!this.canSendTelemetry || this.readyEvents.length == 0) {
            return []; // Events are collected but not sent until telemetry is enabled
        }
        if (sendingLimit == exports.EventSendingLimitation.MinEventsPortion &&
            this.readyEvents.length < this.minEventsPortionToSend) {
            return [];
        }
        return this.getTelemetryPortion(sendingLimit == exports.EventSendingLimitation.AnyEventsIncludingUnfinished);
    }
    getTelemetryPortion(includeUnfinished) {
        const eventsPortionToSend = Math.min(this.readyEvents.length, this.maxEventsPortionToSend);
        const res = this.readyEvents.splice(0, eventsPortionToSend);
        if (includeUnfinished && res.length < this.maxEventsPortionToSend) {
            this.pendingEvents.forEach((value, key) => {
                if (res.length >= this.maxEventsPortionToSend) {
                    return; // @fixme does not end the loop early
                }
                const event = this.pendingEvents.get(key);
                this.pendingEvents.delete(key);
                res.push(new TelemetryEventDescription(`[UNFINISHED] ${event.title}`, // add prefix title to mark unfinished events for CleanSock
                event.details, event.start, null, // Not ended, on sending will be replaced with now
                event.type, event.id));
            });
        }
        return res;
    }
    // Merging 2 partial events:
    //   use start.startTime & end.endTime.
    // For other fields,
    //   if there are values in end, use them,
    //   else use values from start.
    merge(start, end) {
        return new TelemetryEventDescription(end.title ? end.title : start.title, end.details ? end.details : start.details, start.start, end.end, end.type ? end.type : start.type, end.id ? end.id : start.id);
    }
    sendTelemetryIfMinimalPortionCollected() {
        this.sendTelemetry(exports.EventSendingLimitation.MinEventsPortion);
    }
    // NB: getTelemetryToSend will return non-empty array only if we have already received initReply
    // and telemetry.v1 capability is enabled there.
    sendTelemetry(limit) {
        const events = this.getTelemetryToSend(limit);
        if (events.length === 0) {
            return; // not enough telemetry data collected
        }
        try {
            this.packetInterface.send(new telemetry.Telemetry(events.map((e) => e.toTelemetryEvent())));
        }
        catch (err) {
            logger.log.debug(`Error while sending ${events.length} telemetry events due to ${err}; they will be resubmitted`);
            this.readyEvents = this.readyEvents.concat(events);
        }
    }
}

exports.TelemetryEventDescription = TelemetryEventDescription;
exports.TelemetryTracker = TelemetryTracker;
//# sourceMappingURL=telemetrytracker.js.map
