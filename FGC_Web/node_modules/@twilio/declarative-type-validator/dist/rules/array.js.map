{"version":3,"file":"array.js","sources":["../../src/rules/array.ts"],"sourcesContent":["import {\n  convertRuleArgument,\n  RuleArgument,\n  RuleDefinition,\n  validateValue,\n} from \"../type-validator\";\nimport { custom } from \"./custom\";\n\nexport const array = (name: string, rules: RuleArgument): RuleDefinition =>\n  custom((value) => {\n    if (!Array.isArray(value)) {\n      return [false, `an array of ${name}`];\n    }\n\n    for (const [key, valueOfKey] of value.entries()) {\n      const [isValid, received, expected] = validateValue(\n        convertRuleArgument(rules),\n        valueOfKey\n      );\n\n      if (!isValid) {\n        return [\n          false,\n          `a valid array of ${name} (index ${key} should be ${expected})`,\n          `malformed array of ${name} (index ${key} is ${received})`,\n        ];\n      }\n    }\n\n    return [true];\n  });\n"],"names":["custom","validateValue","convertRuleArgument"],"mappings":";;;;;;;;;;;;;;;;;;;MAQa,KAAK,GAAG,CAAC,IAAY,EAAE,KAAmB,KACrDA,aAAM,CAAC,CAAC,KAAK;IACX,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACzB,OAAO,CAAC,KAAK,EAAE,eAAe,IAAI,EAAE,CAAC,CAAC;KACvC;IAED,KAAK,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;QAC/C,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,GAAGC,2BAAa,CACjDC,iCAAmB,CAAC,KAAK,CAAC,EAC1B,UAAU,CACX,CAAC;QAEF,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;gBACL,KAAK;gBACL,oBAAoB,IAAI,WAAW,GAAG,cAAc,QAAQ,GAAG;gBAC/D,sBAAsB,IAAI,WAAW,GAAG,OAAO,QAAQ,GAAG;aAC3D,CAAC;SACH;KACF;IAED,OAAO,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC;;;;"}