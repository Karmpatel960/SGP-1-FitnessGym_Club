/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2016, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

This software includes Backoff library under the following license

    Copyright (C) 2012 Mathieu Turcotte

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

This software includes Event-to-Promise library under the following license

    Copyright (c) 2014, Julien Fontanet <julien.fontanet@isonoe.net>.

    Permission to use, copy, modify, and/or distribute this software for any purpose
    with or without fee is hereby granted, provided that the above copyright notice
    and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
    OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
    TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
    THIS SOFTWARE.

*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('./node_modules/tslib/tslib.es6.js');
var uri = require('./utils/uri.js');
var syncerror = require('./utils/syncerror.js');
var logger = require('./utils/logger.js');
var entity = require('./entity.js');
var closeable = require('./closeable.js');
var cache = require('./cache.js');
var declarativeTypeValidator = require('@twilio/declarative-type-validator');
var replayEventEmitter = require('@twilio/replay-event-emitter');

/**
 * An individual result from a LiveQuery or InstantQuery result set.
 */
class InsightsItem {
    /**
     * @internal
     */
    constructor() { }
}
class LiveQueryImpl extends entity.SyncEntity {
    constructor(descriptor, services, removalHandler, items) {
        super(services, removalHandler);
        this.descriptor = descriptor;
        this.cache = new cache.Cache();
        if (items) {
            items.forEach(item => {
                this.cache.store(item.key, { key: item.key, value: item.data }, item.revision);
            });
        }
    }
    // public
    get sid() {
        return this.descriptor.sid;
    }
    // private extension of SyncEntity
    get uniqueName() {
        return null;
    }
    get type() {
        return LiveQueryImpl.type;
    }
    static get type() {
        return 'live_query';
    }
    get lastEventId() {
        return this.descriptor.last_event_id;
    }
    get indexName() {
        return this.descriptor.indexName;
    }
    get queryString() {
        return this.descriptor.queryExpression;
    }
    // custom private props
    get queryUri() {
        return this.descriptor.queryUri;
    }
    get liveQueryDescriptor() {
        return this.descriptor;
    }
    // dummy stub from iface
    onRemoved() {
    }
    getItems() {
        const dataByKey = {};
        this.cache.forEach((key, item) => {
            dataByKey[key] = item.value;
        });
        return dataByKey;
    }
    /**
     * @internal
     */
    _update(message, isStrictlyOrdered) {
        switch (message.type) {
            case 'live_query_item_updated':
                this.handleItemMutated(message.item_key, message.item_data, message.item_revision);
                break;
            case 'live_query_item_removed':
                this.handleItemRemoved(message.item_key, message.item_revision);
                break;
            case 'live_query_updated':
                this.handleBatchUpdate(message.items);
                break;
        }
        if (isStrictlyOrdered) {
            this._advanceLastEventId(message.last_event_id);
        }
    }
    handleItemMutated(key, value, revision) {
        if (this.shouldIgnoreEvent(key, revision)) {
            logger["default"].trace(`Item ${key} update skipped, revision: ${revision}`);
        }
        else {
            const newItem = { key, value };
            this.cache.store(key, newItem, revision);
            this.broadcastEventToListeners('itemUpdated', newItem);
        }
    }
    handleItemRemoved(key, revision) {
        const force = (revision === null);
        if (this.shouldIgnoreEvent(key, revision)) {
            logger["default"].trace(`Item ${key} delete skipped, revision: ${revision}`);
        }
        else {
            this.cache.delete(key, revision, force);
            this.broadcastEventToListeners('itemRemoved', { key });
        }
    }
    handleBatchUpdate(items) {
        // preprocess item set for easy key-based access (it's a one-time constant time operation)
        let newItems = {};
        if (items != null) {
            items.forEach(item => {
                newItems[item.key] = {
                    data: item.data,
                    revision: item.revision
                };
            });
        }
        // go through existing items and generate update/remove events for them
        this.cache.forEach((key, item) => {
            const newItem = newItems[key];
            if (newItem != null) {
                this.handleItemMutated(key, newItem.data, newItem.revision);
            }
            else {
                this.handleItemRemoved(key, null); // force deletion w/o revision
            }
            // once item is handled, remove it from incoming array
            delete newItems[key];
        });
        // once we handled all the known items, handle remaining pack
        for (let key in newItems) {
            this.handleItemMutated(key, newItems[key].data, newItems[key].revision);
        }
    }
    shouldIgnoreEvent(key, eventId) {
        return key != null && eventId != null && this.cache.isKnown(key, eventId);
    }
    /**
     * @internal
     */
    _advanceLastEventId(eventId, revision) {
        // LiveQuery is not revisioned in any way, so simply ignore second param and act upon lastEventId only
        if (this.lastEventId < eventId) {
            this.descriptor.last_event_id = eventId;
        }
    }
}
async function queryItems(params) {
    let { network, queryString, uri, type } = params;
    if (queryString == null) { // should not be null or undefined
        throw new syncerror.SyncError(`Invalid query`, 400, 54507);
    }
    const liveQueryRequestBody = {
        query_string: queryString // raw query string (like `key == "value" AND key2 != "value2"`)
    };
    if (type === LiveQuery.type) {
        liveQueryRequestBody.type = type;
    }
    let response = await network.post(uri, liveQueryRequestBody, undefined, true);
    return response.body;
}
/**
 * Represents a long-running query against Flex data wherein the returned result set
 * subsequently receives pushed updates whenever new (or updated) records would match the
 * given expression. Updated results are presented row-by-row until this query is explicitly
 * closed.
 *
 * Use the {@link SyncClient.liveQuery} method to create a live query.
 */
class LiveQuery extends closeable.Closeable {
    /**
     * @internal
     */
    constructor(liveQueryImpl) {
        super();
        this.liveQueryImpl = liveQueryImpl;
        this.liveQueryImpl.attach(this);
    }
    // private props
    static get type() {
        return LiveQueryImpl.type;
    }
    get type() {
        return LiveQueryImpl.type;
    }
    get lastEventId() {
        return this.liveQueryImpl.lastEventId;
    }
    /**
     * The immutable identifier of this query object, assigned by the system.
     */
    get sid() {
        return this.liveQueryImpl.sid;
    }
    /**
     * Closes this query instance and unsubscribes from further service events.
     * This will eventually stop the physical inflow of updates over the network, when all other instances of this query are closed as well.
     */
    close() {
        super.close();
        this.liveQueryImpl.detach(this.listenerUuid);
    }
    /**
     * @return A snapshot of items matching the current query expression.
     */
    getItems() {
        this.ensureNotClosed();
        return this.liveQueryImpl.getItems();
    }
}
/**
 * Fired when an item has been added or updated.
 *
 * Parameters:
 * 1. {@link InsightsItem} `item` - updated item
 * @example
 * ```typescript
 * liveQuery.on('itemUpdated', (item) => {
 *   console.log(`Item ${item.key} was updated`'`);
 *   console.log('Item value:', item.value);
 * });
 * ```
 * @event
 */
LiveQuery.itemUpdated = 'itemUpdated';
/**
 * Fired when an existing item has been removed.
 *
 * Parameters:
 * 1. object `args` - info object provided with the event. It has the following properties:
 *     * object `key` - the key of the removed item
 * @example
 * ```typescript
 * liveQuery.on('itemRemoved', (args) => {
 *   console.log(`Item ${args.key} was removed`);
 * });
 * ```
 * @event
 */
LiveQuery.itemRemoved = 'itemRemoved';
/**
 * Allows repetitive quick searches against a specific Flex data. Unlike a
 * LiveQuery, this result set does not subscribe to any updates and therefore receives no events
 * beyond the initial result set.
 *
 * Use the {@link SyncClient.instantQuery} method to create an Instant Query.
 */
class InstantQuery extends replayEventEmitter.ReplayEventEmitter {
    /**
     * @internal
     */
    constructor(params) {
        super();
        this.queryExpression = null;
        this.items = {};
        Object.assign(this, params);
        this.updateIndexName(params.indexName);
    }
    // private props
    static get type() {
        return 'instant_query';
    }
    get type() {
        return InstantQuery.type;
    }
    /**
     * Spawns a new search request. The result will be provided asynchronously via the {@link InstantQuery.searchResult}
     * event.
     * @param queryExpression A query expression to be executed against the given data index. For more information
     * on the syntax read {@link SyncClient.liveQuery}.
     * @return A promise that resolves when query result has been received.
     */
    async search(queryExpression) {
        this.items = {};
        return queryItems({
            network: this.network,
            uri: this.queryUri,
            queryString: queryExpression,
        })
            .then((response) => {
            this.queryExpression = queryExpression;
            if (response.items) {
                response.items.forEach((item) => {
                    this.items[item.key] = item.data;
                });
            }
            this.emit('searchResult', this.getItems());
        })
            .catch((err) => {
            logger["default"].error(`Error '${err.message}' while executing query '${queryExpression}'`);
            this.queryExpression = null;
            throw err;
        });
    }
    /**
     * Instantiates a LiveQuery object based on the last known query expression that was passed to the
     * {@link InstantQuery.search} method. This LiveQuery will start receiving updates with new results,
     * while current object can be still used to execute repetitive searches.
     * @return A promise which resolves when the LiveQuery object is ready.
     */
    async subscribe() {
        if (this.queryExpression == null) { // should not be null or undefined
            return Promise.reject(new syncerror.SyncError(`Invalid query`, 400, 54507));
        }
        return this.liveQueryCreator(this.indexName, this.queryExpression);
    }
    /**
     * @return A snapshot of items matching current query expression.
     */
    getItems() {
        return this.items;
    }
    /**
     * Set new index name
     * @param indexName New index name to set
     */
    updateIndexName(indexName) {
        this.indexName = indexName;
        this.queryUri = this.generateQueryUri(this.indexName);
    }
    generateQueryUri(indexName) {
        return new uri.UriBuilder(this.insightsUri)
            .pathSegment(indexName)
            .pathSegment('Items')
            .build();
    }
}
/**
 * Fired when a search result is ready.
 *
 * Parameters:
 * 1. {@link ItemsSnapshot} `items` - a snapshot of items matching current query expression.
 * @example
 * ```typescript
 * instantQuery.on('searchResult', (items) => {
 *    Object.entries(items).forEach(([key, value]) => {
 *      console.log('Search result item key:', key);
 *      console.log('Search result item value:', value);
 *    });
 * });
 * ```
 * @event
 */
InstantQuery.searchResult = 'searchResult';
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync('string'),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [String]),
    tslib_es6.__metadata("design:returntype", Promise)
], InstantQuery.prototype, "search", null);
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypes(declarativeTypeValidator.nonEmptyString),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [String]),
    tslib_es6.__metadata("design:returntype", void 0)
], InstantQuery.prototype, "updateIndexName", null);

exports.InsightsItem = InsightsItem;
exports.InstantQuery = InstantQuery;
exports.LiveQuery = LiveQuery;
exports.LiveQueryImpl = LiveQueryImpl;
exports["default"] = LiveQuery;
exports.queryItems = queryItems;
//# sourceMappingURL=livequery.js.map
