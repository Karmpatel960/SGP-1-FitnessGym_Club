/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2016, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes javascript-state-machine under the following license.

    Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.


*/
'use strict';

var global =
  typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : typeof window !== "undefined"
    ? window
    : {};

Object.defineProperty(exports, '__esModule', { value: true });

var _polyfillNode_events = require('./_virtual/_polyfill-node_events.js');
var StateMachine = require('javascript-state-machine');
var logger = require('./logger.js');
require('uuid');
var update = require('./protocol/messages/update.js');
var reply = require('./protocol/messages/reply.js');
var parser = require('./parser.js');
var twilsockreplyerror = require('./error/twilsockreplyerror.js');
var backoffretrier = require('./backoffretrier.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var StateMachine__namespace = /*#__PURE__*/_interopNamespace(StateMachine);

const DISCONNECTING_TIMEOUT = 3000;
// Wraps asynchronous rescheduling
// Just makes it simpler to find these hacks over the code
// Currently there's exactly one instance of this in closeSocket()
function trampoline(f) {
    setTimeout(f, 0);
}
/**
 * Twilsock channel level protocol implementation
 */
class TwilsockChannel extends _polyfillNode_events['default'] {
    constructor(websocket, transport, config) {
        super();
        this.disconnectingTimer = null;
        this.disconnectedPromiseResolve = null;
        this.terminalStates = ["disconnected", "rejected"];
        this.tokenExpiredSasCode = 20104;
        this.terminationReason = "Connection is not initialized";
        this.websocket = websocket;
        this.websocket.on("connected", () => this.fsm.socketConnected());
        this.websocket.on("disconnected", () => this.fsm.socketClosed());
        this.websocket.on("message", (message) => this.onIncomingMessage(message));
        this.websocket.on("socketError", (e) => this.emit("connectionError", {
            terminal: false,
            message: `Socket error: ${e.message}`,
            httpStatusCode: null,
            errorCode: null,
        }));
        this.transport = transport;
        this.config = config;
        this.retrier = new backoffretrier.BackoffRetrier(config.retryPolicy);
        this.retrier.on("attempt", () => this.retry());
        this.retrier.on("failed", (err) => {
            logger.log.warn(`Retrying failed: ${err.message}`);
            this.disconnect();
        });
        if (typeof window !== "undefined" &&
            typeof window.addEventListener !== "undefined") {
            window.addEventListener("online", () => {
                logger.log.debug("Browser reported connectivity state: online");
                this.resetBackoff();
                this.fsm.systemOnline();
            });
            window.addEventListener("offline", () => {
                logger.log.debug("Browser reported connectivity state: offline");
                this.websocket.close();
                this.fsm.socketClosed();
            });
        }
        // We have to use a factory function in here because using the default
        // StateMachine constructor would cause an error for the consumers of the
        // rollup bundles. This is a quirk unique to the javascript-state-machine
        // library.
        const TwilsockStateMachine = StateMachine__namespace.factory({
            init: "disconnected",
            transitions: [
                {
                    name: "userConnect",
                    from: ["disconnected", "rejected"],
                    to: "connecting",
                },
                { name: "userConnect", from: ["connecting", "connected"] },
                {
                    name: "userDisconnect",
                    from: [
                        "connecting",
                        "initialising",
                        "connected",
                        "updating",
                        "retrying",
                        "rejected",
                        "waitSocketClosed",
                        "waitOffloadSocketClosed",
                    ],
                    to: "disconnecting",
                },
                { name: "userRetry", from: ["retrying"], to: "connecting" },
                { name: "socketConnected", from: ["connecting"], to: "initialising" },
                {
                    name: "socketClosed",
                    from: [
                        "connecting",
                        "initialising",
                        "connected",
                        "updating",
                        "error",
                        "waitOffloadSocketClosed",
                    ],
                    to: "retrying",
                },
                { name: "socketClosed", from: ["disconnecting"], to: "disconnected" },
                {
                    name: "socketClosed",
                    from: ["waitSocketClosed"],
                    to: "disconnected",
                },
                { name: "socketClosed", from: ["rejected"], to: "rejected" },
                { name: "initSuccess", from: ["initialising"], to: "connected" },
                { name: "initError", from: ["initialising"], to: "error" },
                {
                    name: "tokenRejected",
                    from: ["initialising", "updating"],
                    to: "rejected",
                },
                {
                    name: "protocolError",
                    from: ["initialising", "connected", "updating"],
                    to: "error",
                },
                {
                    name: "receiveClose",
                    from: ["initialising", "connected", "updating"],
                    to: "waitSocketClosed",
                },
                {
                    name: "receiveOffload",
                    from: ["initialising", "connected", "updating"],
                    to: "waitOffloadSocketClosed",
                },
                {
                    name: "unsupportedProtocol",
                    from: ["initialising", "connected", "updating"],
                    to: "unsupported",
                },
                {
                    name: "receiveFatalClose",
                    from: ["initialising", "connected", "updating"],
                    to: "unsupported",
                },
                {
                    name: "userUpdateToken",
                    from: ["disconnected", "rejected", "connecting", "retrying"],
                    to: "connecting",
                },
                { name: "userUpdateToken", from: ["connected"], to: "updating" },
                { name: "updateSuccess", from: ["updating"], to: "connected" },
                { name: "updateError", from: ["updating"], to: "error" },
                { name: "userSend", from: ["connected"], to: "connected" },
                { name: "systemOnline", from: ["retrying"], to: "connecting" },
            ],
            methods: {
                onConnecting: () => {
                    this.setupSocket();
                    this.emit("connecting");
                },
                onEnterInitialising: () => {
                    this.sendInit();
                },
                onLeaveInitialising: () => {
                    this.cancelInit();
                },
                onEnterUpdating: () => {
                    this.sendUpdate();
                },
                onLeaveUpdating: () => {
                    this.cancelUpdate();
                },
                onEnterRetrying: () => {
                    this.initRetry();
                    this.emit("connecting");
                },
                onEnterConnected: () => {
                    this.resetBackoff();
                    this.onConnected();
                },
                onUserUpdateToken: () => {
                    this.resetBackoff();
                },
                onTokenRejected: () => {
                    this.resetBackoff();
                    this.closeSocket(true);
                    this.finalizeSocket();
                },
                onUserDisconnect: () => {
                    this.closeSocket(true);
                },
                onEnterDisconnecting: () => {
                    this.startDisconnectTimer();
                },
                onLeaveDisconnecting: () => {
                    this.cancelDisconnectTimer();
                },
                onEnterWaitSocketClosed: () => {
                    this.startDisconnectTimer();
                },
                onLeaveWaitSocketClosed: () => {
                    this.cancelDisconnectTimer();
                },
                onEnterWaitOffloadSocketClosed: () => {
                    this.startDisconnectTimer();
                },
                onLeaveWaitOffloadSocketClosed: () => {
                    this.cancelDisconnectTimer();
                },
                onDisconnected: () => {
                    this.resetBackoff();
                    this.finalizeSocket();
                },
                onReceiveClose: () => {
                    this.onCloseReceived();
                },
                onReceiveOffload: (event, args) => {
                    logger.log.debug("onreceiveoffload: ", args);
                    this.modifyBackoff(args.body);
                    this.onCloseReceived();
                },
                onUnsupported: () => {
                    this.closeSocket(true);
                    this.finalizeSocket();
                },
                onError: (lifecycle, graceful) => {
                    this.closeSocket(graceful);
                    this.finalizeSocket();
                },
                onEnterState: (event) => {
                    if (event.from !== "none") {
                        this.changeState(event);
                    }
                },
                onInvalidTransition: (transition, from, to) => {
                    logger.log.warn("FSM: unexpected transition", from, to);
                },
            },
        });
        this.fsm = new TwilsockStateMachine();
    }
    changeState(event) {
        logger.log.debug(`FSM: ${event.transition}: ${event.from} --> ${event.to}`);
        if (this.lastEmittedState !== this.state) {
            this.lastEmittedState = this.state;
            this.emit("stateChanged", this.state);
        }
    }
    resetBackoff() {
        logger.log.trace("resetBackoff");
        this.retrier.stop();
    }
    modifyBackoff(body) {
        logger.log.trace("modifyBackoff", body);
        const backoffPolicy = body ? body.backoff_policy : null;
        if (backoffPolicy && typeof backoffPolicy.reconnect_min_ms === "number") {
            this.retrier.modifyBackoff(backoffPolicy.reconnect_min_ms);
        }
    }
    startDisconnectTimer() {
        logger.log.trace("startDisconnectTimer");
        if (this.disconnectingTimer) {
            clearTimeout(this.disconnectingTimer);
            this.disconnectingTimer = null;
        }
        this.disconnectingTimer = setTimeout(() => {
            logger.log.debug("disconnecting is timed out");
            this.closeSocket(true);
        }, DISCONNECTING_TIMEOUT);
    }
    cancelDisconnectTimer() {
        logger.log.trace("cancelDisconnectTimer");
        if (this.disconnectingTimer) {
            clearTimeout(this.disconnectingTimer);
            this.disconnectingTimer = null;
        }
    }
    get isConnected() {
        return this.state === "connected" && this.websocket.isConnected;
    }
    get state() {
        switch (this.fsm.state) {
            case "connecting":
            case "initialising":
            case "retrying":
            case "error":
                return "connecting";
            case "updating":
            case "connected":
                return "connected";
            case "rejected":
                return "denied";
            case "disconnecting":
            case "waitSocketClosed":
            case "waitOffloadSocketClosed":
                return "disconnecting";
            case "disconnected":
            default:
                return "disconnected";
        }
    }
    initRetry() {
        logger.log.debug("initRetry");
        if (this.retrier.inProgress) {
            this.retrier.attemptFailed();
        }
        else {
            this.retrier.start();
        }
    }
    retry() {
        if (this.fsm.state != "connecting") {
            logger.log.trace("retry");
            this.websocket.close();
            this.fsm.userRetry();
        }
        else {
            logger.log.trace("can\t retry as already connecting");
        }
    }
    onConnected() {
        this.emit("connected");
    }
    finalizeSocket() {
        logger.log.trace("finalizeSocket");
        this.websocket.close();
        this.emit("disconnected");
        if (this.disconnectedPromiseResolve) {
            this.disconnectedPromiseResolve();
            this.disconnectedPromiseResolve = null;
        }
    }
    setupSocket() {
        logger.log.trace("setupSocket:", this.config.token);
        this.emit("beforeConnect"); // This is used by client to record startup telemetry event
        this.websocket.connect();
    }
    onIncomingMessage(message) {
        const parsedMessage = parser.Parser.parse(message);
        if (!parsedMessage) {
            return;
        }
        const { method, header, payload } = parsedMessage;
        if (method !== "reply") {
            this.confirmReceiving(header);
        }
        if (method === "notification") {
            this.emit("message", header.message_type, payload);
        }
        else if (header.method === "reply") {
            this.transport.processReply({
                id: header.id,
                status: header.status,
                header: header,
                body: payload,
            });
        }
        else if (header.method === "client_update") {
            if (header.client_update_type === "token_about_to_expire") {
                this.emit("tokenAboutToExpire");
            }
        }
        else if (header.method === "close") {
            if (header.status.code === 308) {
                logger.log.debug("Connection has been offloaded");
                this.fsm.receiveOffload({
                    status: header.status.status,
                    body: payload,
                });
            }
            else if (header.status.code === 406) {
                // Not acceptable message
                const message = `Server closed connection because can't parse protocol: ${JSON.stringify(header.status)}`;
                this.emitReplyConnectionError(message, header, true);
                logger.log.error(message);
                this.fsm.receiveFatalClose();
            }
            else if (header.status.code === 417) {
                // Protocol error
                logger.log.error(`Server closed connection because can't parse client reply: ${JSON.stringify(header.status)}`);
                this.fsm.receiveFatalClose(header.status.status);
            }
            else if (header.status.code === 410) {
                // Expired token
                logger.log.warn(`Server closed connection: ${JSON.stringify(header.status)}`);
                this.fsm.receiveClose(header.status.status);
                this.emit("tokenExpired");
            }
            else if (header.status.code === 401) {
                // Authentication fail
                logger.log.error(`Server closed connection: ${JSON.stringify(header.status)}`);
                this.fsm.receiveClose(header.status.status);
            }
            else {
                logger.log.warn("unexpected message: ", header.status);
                // Try to reconnect
                this.fsm.receiveOffload({ status: header.status.status, body: null });
            }
        }
    }
    async sendInit() {
        logger.log.trace("sendInit");
        try {
            this.emit("beforeSendInit"); // This is used by client to record startup telemetry event
            const reply = await this.transport.sendInit();
            this.config.updateContinuationToken(reply.continuationToken);
            this.config.confirmedCapabilities = reply.confirmedCapabilities;
            this.fsm.initSuccess(reply);
            this.emit("initialized", reply);
            this.emit("tokenUpdated");
        }
        catch (ex) {
            if (ex instanceof twilsockreplyerror.TwilsockReplyError) {
                let isTerminalError = false;
                logger.log.warn(`Init rejected by server: ${JSON.stringify(ex.reply.status)}`);
                this.emit("sendInitFailed"); // This is used by client to record startup telemetry event
                // @todo emit telemetry from inside "if" below for more granularity...
                if (ex.reply.status.code === 401 || ex.reply.status.code === 403) {
                    isTerminalError = true;
                    this.fsm.tokenRejected(ex.reply.status);
                    if (ex.reply.status.errorCode === this.tokenExpiredSasCode) {
                        this.emit("tokenExpired");
                    }
                }
                else if (ex.reply.status.code === 429) {
                    this.modifyBackoff(ex.reply.body);
                    this.fsm.initError(true);
                }
                else if (ex.reply.status.code === 500) {
                    this.fsm.initError(false);
                }
                else {
                    this.fsm.initError(true);
                }
                this.emitReplyConnectionError(ex.message, ex.reply, isTerminalError);
            }
            else {
                this.terminationReason = ex.message;
                this.emit("connectionError", {
                    terminal: true,
                    message: `Unknown error during connection initialisation: ${ex.message}\n${JSON.stringify(ex, null, 2)}`,
                    httpStatusCode: null,
                    errorCode: null,
                });
                this.fsm.initError(true);
            }
            this.emit("tokenUpdated", ex);
        }
    }
    async sendUpdate() {
        logger.log.trace("sendUpdate");
        const message = new update.Update(this.config.token);
        try {
            const reply = await this.transport.sendWithReply(message);
            this.fsm.updateSuccess(reply.body);
            this.emit("tokenUpdated");
        }
        catch (ex) {
            if (ex instanceof twilsockreplyerror.TwilsockReplyError) {
                let isTerminalError = false;
                logger.log.warn(`Token update rejected by server: ${JSON.stringify(ex.reply.status)}`);
                if (ex.reply.status.code === 401 || ex.reply.status.code === 403) {
                    isTerminalError = true;
                    this.fsm.tokenRejected(ex.reply.status);
                    if (ex.reply.status.errorCode === this.tokenExpiredSasCode) {
                        this.emit("tokenExpired");
                    }
                }
                else if (ex.reply.status.code === 429) {
                    this.modifyBackoff(ex.reply.body);
                    this.fsm.updateError(ex.reply.status);
                }
                else {
                    this.fsm.updateError(ex.reply.status);
                }
                this.emitReplyConnectionError(ex.message, ex.reply, isTerminalError);
            }
            else {
                this.emit("error", false, ex.message, null, null);
                this.fsm.updateError(ex);
            }
            this.emit("tokenUpdated", ex);
        }
    }
    emitReplyConnectionError(message, header, terminal) {
        const description = header.status && header.status.description
            ? header.status.description
            : message;
        const httpStatusCode = header.status.code;
        const errorCode = header.status && header.status.errorCode ? header.status.errorCode : null;
        if (terminal) {
            this.terminationReason = description;
        }
        this.emit("connectionError", {
            terminal: terminal,
            message: `Connection error: ${description}`,
            httpStatusCode: httpStatusCode,
            errorCode: errorCode,
        });
    }
    cancelInit() {
        logger.log.trace("cancelInit");
        // TODO: implement
    }
    cancelUpdate() {
        logger.log.trace("cancelUpdate");
        // TODO: implement
    }
    /**
     * Should be called for each message to confirm it received
     */
    confirmReceiving(messageHeader) {
        logger.log.trace("confirmReceiving");
        try {
            //@todo send telemetry events AnyEvents
            this.transport.send(new reply.Reply(messageHeader.id));
        }
        catch (e) {
            logger.log.debug("failed to confirm packet receiving", e);
        }
    }
    /**
     * Shutdown connection
     */
    closeSocket(graceful) {
        logger.log.trace(`closeSocket (graceful: ${graceful})`);
        if (graceful && this.transport.isConnected) {
            this.transport.sendClose();
        }
        this.websocket.close();
        trampoline(() => this.fsm.socketClosed());
    }
    /**
     * Initiate the twilsock connection
     * If already connected, it does nothing
     */
    connect() {
        logger.log.trace("connect");
        this.fsm.userConnect();
    }
    /**
     * Close twilsock connection
     * If already disconnected, it does nothing
     */
    disconnect() {
        logger.log.trace("disconnect");
        if (this.fsm.is("disconnected")) {
            return Promise.resolve();
        }
        return new Promise((resolve) => {
            this.disconnectedPromiseResolve = resolve;
            this.fsm.userDisconnect();
        });
    }
    /**
     * Update fpa token for twilsock connection
     */
    updateToken(token) {
        logger.log.trace("updateToken:", token);
        return new Promise((resolve, reject) => {
            this.once("tokenUpdated", (e) => {
                if (e) {
                    reject(e);
                }
                else {
                    resolve();
                }
            });
            this.fsm.userUpdateToken();
        });
    }
    get isTerminalState() {
        return this.terminalStates.indexOf(this.fsm.state) !== -1;
    }
    get getTerminationReason() {
        return this.terminationReason;
    }
    onCloseReceived() {
        this.websocket.close();
    }
}

exports.TwilsockChannel = TwilsockChannel;
//# sourceMappingURL=twilsock.js.map
