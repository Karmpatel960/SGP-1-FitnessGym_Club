/// <reference types="node" />
/* eslint-disable @typescript-eslint/no-explicit-any */
import { EventEmitter } from "events";
declare class ReplayEventEmitter<Events extends Record<string | symbol, (...args: any[]) => void>> extends EventEmitter {
    private eventHistory;
    constructor();
    on<E extends Extract<keyof Events, string>>(event: E, listener: Events[E]): this;
    once<E extends Extract<keyof Events, string>>(event: E, listener: Events[E]): this;
    off<E extends Extract<keyof Events, string>>(event: E, listener: Events[E]): this;
    emit<E extends Extract<keyof Events, string>>(event: E, ...args: Parameters<Events[E]>): boolean;
    addListener<E extends Extract<keyof Events, string>>(event: E, listener: Events[E]): this;
    removeListener<E extends Extract<keyof Events, string>>(event: E, listener: Events[E]): this;
    addListenerWithReplay<E extends Extract<keyof Events, string>>(event: E, listener: Events[E]): this;
    onWithReplay<E extends Extract<keyof Events, string>>(event: E, listener: Events[E]): this;
    onceWithReplay<E extends Extract<keyof Events, string>>(event: E, listener: Events[E]): this;
}
export { ReplayEventEmitter };
