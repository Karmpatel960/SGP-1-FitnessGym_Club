{"version":3,"file":"member.js","sources":["../src/member.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { UserDescriptor } from './userdescriptor';\nimport { Users } from './data/users';\nimport { User } from './user';\nimport { parseTime, parseAttributes } from './util';\nimport { Logger } from './logger';\nimport { validateTypesAsync, literal } from '@twilio/declarative-type-validator';\nimport { Channel } from './channel';\nimport { CommandExecutor } from './commandexecutor';\nimport { EditMemberRequest, EditMemberResponse } from './interfaces/commands/editmember';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype MemberEvents = {\n  typingEnded: (member: Member) => void;\n  typingStarted: (member: Member) => void;\n  updated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope('Member');\n\ninterface MemberDescriptor {\n  attributes?: Object;\n  dateCreated: any;\n  dateUpdated: any;\n  identity: string;\n  roleSid?: string;\n  lastConsumedMessageIndex: number;\n  lastConsumptionTimestamp: number;\n  type?: MemberType;\n  userInfo: string;\n}\n\ninterface MemberState {\n  attributes: any;\n  dateCreated: Date;\n  dateUpdated: Date;\n  identity: string;\n  isTyping: boolean;\n  lastConsumedMessageIndex: number | null;\n  lastConsumptionTimestamp: Date;\n  roleSid: string;\n  sid: string;\n  type: MemberType;\n  typingTimeout: any;\n  userInfo: string;\n}\n\ninterface MemberServices {\n  users: Users;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MemberLinks {\n  self: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a member.\n */\ntype MemberUpdateReason =\n  | 'attributes'\n  | 'dateCreated'\n  | 'dateUpdated'\n  | 'roleSid'\n  | 'lastConsumedMessageIndex'\n  | 'lastConsumptionTimestamp';\n\n/**\n * Push notification type of a member.\n */\ntype MemberType = 'chat' | 'sms' | 'whatsapp';\n\ninterface MemberUpdatedEventArgs {\n  member: Member;\n  updateReasons: MemberUpdateReason[];\n}\n\n/**\n * A member represents a remote client in a channel.\n */\nclass Member extends ReplayEventEmitter<MemberEvents> {\n\n  private state: MemberState;\n\n  /**\n   * Channel that the remote client is a member of.\n   */\n  public readonly channel: Channel;\n\n  private readonly links: MemberLinks;\n  private readonly services: MemberServices;\n\n  /**\n   * @internal\n   */\n  constructor(\n    data: MemberDescriptor,\n    sid: string,\n    channel: Channel,\n    links: MemberLinks,\n    services: MemberServices\n  ) {\n    super();\n\n    this.channel = channel;\n    this.links = links;\n    this.services = services;\n\n    this.state = {\n      attributes: parseAttributes(data.attributes,\n        'Retrieved malformed attributes from the server for member: ' + sid,\n        log),\n      dateCreated: data.dateCreated ? parseTime(data.dateCreated) : null,\n      dateUpdated: data.dateCreated ? parseTime(data.dateUpdated) : null,\n      sid: sid,\n      typingTimeout: null,\n      isTyping: false,\n      identity: data.identity || null,\n      roleSid: data.roleSid || null,\n      lastConsumedMessageIndex: Number.isInteger(data.lastConsumedMessageIndex) ? data.lastConsumedMessageIndex : null,\n      lastConsumptionTimestamp: data.lastConsumptionTimestamp ? parseTime(data.lastConsumptionTimestamp) : null,\n      type: data.type || 'chat',\n      userInfo: data.userInfo\n    };\n\n    if (!data.identity && !data.type) {\n      throw new Error('Received invalid Member object from server: Missing identity or type of Member.');\n    }\n  }\n\n  /**\n   * Fired when the member has started typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly typingStarted = 'typingStarted';\n\n  /**\n   * Fired when the member has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly typingEnded = 'typingEnded';\n\n  /**\n   * Fired when the fields of the member have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Member} member - the member in question\n   *     * {@link MemberUpdateReason}[] updateReasons - array of reasons for the update\n   * @event\n   */\n  static readonly updated = 'updated';\n\n  /**\n   * The server-assigned unique identifier for the member.\n   */\n  public get sid(): string { return this.state.sid; }\n\n  /**\n   * Custom attributes of the member.\n   */\n  public get attributes(): Object { return this.state.attributes; }\n\n  /**\n   * Date this member was created on.\n   */\n  public get dateCreated(): Date { return this.state.dateCreated; }\n\n  /**\n   * Date this member was last updated on.\n   */\n  public get dateUpdated(): Date { return this.state.dateUpdated; }\n\n  /**\n   * Identity of the member.\n   */\n  public get identity(): string { return this.state.identity; }\n\n  /**\n   * Indicates whether the member is currently typing.\n   */\n  public get isTyping(): boolean { return this.state.isTyping; }\n\n  /**\n   * The index of the last consumed message by the member.\n   * Note that retrieving messages on a client endpoint does not mean that messages are read,\n   * please consider reading about the [Read Horizon feature](https://www.twilio.com/docs/api/chat/guides/consumption-horizon)\n   * to find out about the proper way to mark messages as read.\n   */\n  public get lastConsumedMessageIndex(): number | null { return this.state.lastConsumedMessageIndex; }\n\n  /**\n   * Date of the most recent consumption horizon update.\n   */\n  public get lastConsumptionTimestamp(): Date { return this.state.lastConsumptionTimestamp; }\n\n  public get roleSid(): string { return this.state.roleSid; }\n\n  /**\n   * Message type of the member.\n   */\n  public get type(): MemberType { return this.state.type; }\n\n  /**\n   * Internal method used to start or reset the typing indicator timeout (with event emitting).\n   * @internal\n   */\n  _startTyping(timeout) {\n    clearTimeout(this.state.typingTimeout);\n\n    this.state.isTyping = true;\n    this.emit('typingStarted', this);\n    this.channel.emit('typingStarted', this);\n\n    this.state.typingTimeout = setTimeout(() => this._endTyping(), timeout);\n    return this;\n  }\n\n  /**\n   * Internal method function used to stop typing indicator timeout (with event emitting).\n   * @internal\n   */\n  _endTyping() {\n    if (!this.state.typingTimeout) { return; }\n\n    this.state.isTyping = false;\n    this.emit('typingEnded', this);\n    this.channel.emit('typingEnded', this);\n\n    clearInterval(this.state.typingTimeout);\n    this.state.typingTimeout = null;\n  }\n\n  /**\n   * Internal method function used update local object's property roleSid with a new value.\n   * @internal\n   */\n  _update(data) {\n    let updateReasons: MemberUpdateReason[] = [];\n\n    const updateAttributes =\n      parseAttributes(\n        data.attributes,\n        'Retrieved malformed attributes from the server for member: ' + this.state.sid,\n        log);\n\n    if (data.attributes && !isEqual(this.state.attributes, updateAttributes)) {\n      this.state.attributes = updateAttributes;\n      updateReasons.push('attributes');\n    }\n\n    const updatedDateUpdated = parseTime(data.dateUpdated);\n    if (data.dateUpdated && (updatedDateUpdated?.getTime() !== this.state.dateUpdated?.getTime())) {\n      this.state.dateUpdated = updatedDateUpdated;\n      updateReasons.push('dateUpdated');\n    }\n\n    const updatedDateCreated = parseTime(data.dateCreated);\n    if (data.dateCreated && (updatedDateCreated?.getTime() !== this.state.dateCreated?.getTime())) {\n      this.state.dateCreated = updatedDateCreated;\n      updateReasons.push('dateCreated');\n    }\n\n    if (data.roleSid && this.state.roleSid !== data.roleSid) {\n      this.state.roleSid = data.roleSid;\n      updateReasons.push('roleSid');\n    }\n\n    const indexIsValid = Number.isInteger(data.lastConsumedMessageIndex) || data.lastConsumedMessageIndex === null;\n    if (indexIsValid && (this.state.lastConsumedMessageIndex !== data.lastConsumedMessageIndex)) {\n      this.state.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n      updateReasons.push('lastConsumedMessageIndex');\n    }\n\n    const updatedTimestamp = parseTime(data.lastConsumptionTimestamp);\n    if (data.lastConsumptionTimestamp && (updatedTimestamp?.getTime() !== this.state.lastConsumptionTimestamp?.getTime())) {\n      this.state.lastConsumptionTimestamp = updatedTimestamp;\n      updateReasons.push('lastConsumptionTimestamp');\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit('updated', { member: this, updateReasons: updateReasons });\n    }\n\n    return this;\n  }\n\n  /**\n   * Get the user descriptor for this member. Supported only for members of type `chat`.\n   */\n  public async getUserDescriptor(): Promise<UserDescriptor> {\n    if (this.type != 'chat') {\n      throw new Error('Getting User Descriptor is not supported for this Member type: ' + this.type);\n    }\n\n    return this.services.users.getUserDescriptor(this.state.identity);\n  }\n\n  /**\n   * Get the user for this member and subscribes to it. Supported only for members of type `chat`.\n   */\n  public async getUser(): Promise<User> {\n    if (this.type != 'chat') {\n      throw new Error('Getting User is not supported for this Member type: ' + this.type);\n    }\n\n    return this.services.users.getUser(this.state.identity, this.state.userInfo);\n  }\n\n  /**\n   * Remove the member from the channel.\n   */\n  public async remove(): Promise<void> {\n    return this.channel.removeMember(this);\n  }\n\n  /**\n   * Update the attributes of the member.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<Member> {\n    await this.services.commandExecutor.mutateResource<EditMemberRequest, EditMemberResponse>(\n      'post',\n      this.links.self,\n      {\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n      }\n    );\n\n    return this;\n  }\n}\n\nexport {\n  MemberDescriptor,\n  MemberServices,\n  Member,\n  MemberUpdateReason,\n  MemberType,\n  MemberUpdatedEventArgs\n};\n"],"names":["Logger","ReplayEventEmitter","parseAttributes","parseTime","isEqual","__decorate","validateTypesAsync","literal"],"mappings":"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"}