{"version":3,"file":"lib.js","sources":["../../../node_modules/tslib/tslib.es6.js","../src/logger.ts","../src/configuration.ts","../src/util/index.ts","../src/user.ts","../src/restpaginator.ts","../src/channeldescriptor.ts","../src/data/publicchannels.ts","../src/services/network.ts","../src/interfaces/notificationtypes.ts","../src/member.ts","../src/data/members.ts","../src/media.ts","../src/message.ts","../src/data/messages.ts","../src/channel.ts","../src/util/deferred.ts","../src/data/channels.ts","../src/userdescriptor.ts","../src/data/userdescriptors.ts","../src/data/users.ts","../src/services/typingindicator.ts","../src/data/userchannels.ts","../src/pushnotification.ts","../src/commandexecutor.ts","../src/client.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import * as loglevelLog from 'loglevel';\n\nfunction prepareLine(prefix, args) {\n  return [`${new Date().toISOString()} Chat ${prefix}:`].concat(Array.from(args));\n}\n\nconst log: loglevelLog.Logger = loglevelLog.getLogger('twilio-chat'); // twilio-chat is used by Flex SDK. Please DO NOT change\n\nclass Logger {\n  private prefix: string = '';\n\n  private constructor(prefix: string) {\n    this.prefix = prefix !== null && prefix !== undefined && prefix.length > 0\n      ? prefix + ' '\n      : '';\n  }\n\n  static scope(prefix: string): Logger {\n    return new Logger(prefix);\n  }\n\n  setLevel(level: any) {\n    log.setLevel(level);\n  }\n\n  static setLevel(level: any) {\n    log.setLevel(level);\n  }\n\n  trace(...args) { log.trace.apply(null, prepareLine(this.prefix + 'T', args)); }\n\n  debug(...args) { log.debug.apply(null, prepareLine(this.prefix + 'D', args)); }\n\n  info(...args) { log.info.apply(null, prepareLine(this.prefix + 'I', args)); }\n\n  warn(...args) { log.warn.apply(null, prepareLine(this.prefix + 'W', args)); }\n\n  error(...args) { log.error.apply(null, prepareLine(this.prefix + 'E', args)); }\n\n  static trace(...args) { log.trace.apply(null, prepareLine('T', args)); }\n\n  static debug(...args) { log.debug.apply(null, prepareLine('D', args)); }\n\n  static info(...args) { log.info.apply(null, prepareLine('I', args)); }\n\n  static warn(...args) { log.warn.apply(null, prepareLine('W', args)); }\n\n  static error(...args) { log.error.apply(null, prepareLine('E', args)); }\n\n}\n\nexport { Logger };\n","import { CommandExecutor } from './commandexecutor';\nimport { ConfigurationResponse } from './interfaces/commands/configuration';\nimport { parse as parseDuration, toSeconds } from 'iso8601-duration';\nimport { Logger } from './logger';\n\nconst TYPING_TIMEOUT = 5;\nconst HTTP_CACHE_LIFETIME = 'PT5S';\nconst CONSUMPTION_HORIZON_SENDING_INTERVAL = 'PT5S';\nconst USER_INFOS_TO_SUBSCRIBE = 100;\n\nconst MINIMUM_RETRY_DELAY = 1000;\nconst MAXIMUM_RETRY_DELAY = 4000;\nconst MAXIMUM_ATTEMPTS_COUNT = 3;\nconst RETRY_WHEN_THROTTLED = true;\n\ninterface BackoffConfiguration {\n  min: number;\n  max: number;\n  maxAttemptsCount: number;\n}\n\ninterface ConfigurationServices {\n  commandExecutor: CommandExecutor;\n}\n\nclass Configuration {\n  public readonly links: {\n    myConversations: string;\n    conversations: string;\n    users: string;\n    currentUser: string;\n    typing: string;\n    mediaService: string;\n    messagesReceipts: string;\n  };\n\n  public readonly productId?: string;\n\n  public readonly typingIndicatorTimeoutOverride?: number;\n  public readonly typingIndicatorTimeoutDefault: number = TYPING_TIMEOUT * 1000;\n  public readonly backoffConfiguration: BackoffConfiguration;\n  public readonly retryWhenThrottled: boolean;\n\n  public readonly consumptionReportInterval: number;\n  public readonly userInfosToSubscribe: number;\n  public readonly httpCacheInterval: number;\n  public readonly reachabilityEnabled: boolean;\n\n  public readonly userIdentity: string;\n  public readonly userInfo: string;\n  public readonly myConversations: string;\n\n  constructor(\n    options: Record<string, any> = {},\n    configurationResponse: ConfigurationResponse,\n    logger: Logger\n  ) {\n    const constructorOptions = options.Chat || options.IPMessaging || options || {};\n\n    this.productId = constructorOptions.productId;\n\n    this.links = {\n      myConversations: configurationResponse.links.my_conversations,\n      conversations: configurationResponse.links.conversations,\n      users: configurationResponse.links.users,\n      currentUser: configurationResponse.links.current_user,\n      typing: configurationResponse.links.typing,\n      mediaService: configurationResponse.links.media_service,\n      messagesReceipts: configurationResponse.links.messages_receipts\n    };\n\n    this.typingIndicatorTimeoutOverride = constructorOptions.typingIndicatorTimeoutOverride;\n    this.backoffConfiguration = {\n      min: MINIMUM_RETRY_DELAY,\n      max: MAXIMUM_RETRY_DELAY,\n      maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT,\n      ...constructorOptions.backoffConfigOverride\n    };\n    this.retryWhenThrottled = constructorOptions.retryWhenThrottledOverride !== undefined\n      ? constructorOptions.retryWhenThrottledOverride\n      : RETRY_WHEN_THROTTLED;\n    this.userInfosToSubscribe = constructorOptions.userInfosToSubscribeOverride\n      || configurationResponse.options.user_infos_to_subscribe\n      || USER_INFOS_TO_SUBSCRIBE;\n    this.reachabilityEnabled = configurationResponse.options.reachability_enabled;\n    this.userIdentity = configurationResponse.identity;\n    this.userInfo = configurationResponse.sync_objects.my_user_info;\n    this.myConversations = configurationResponse.sync_objects.my_conversations;\n\n    const httpCacheInterval = constructorOptions.httpCacheIntervalOverride\n      || configurationResponse.options.http_cache_interval\n      || HTTP_CACHE_LIFETIME;\n\n    try {\n      this.httpCacheInterval = toSeconds(parseDuration(httpCacheInterval));\n    } catch {\n      logger.error(`Failed to parse http cache interval ${httpCacheInterval}, using default value ${HTTP_CACHE_LIFETIME}`);\n      this.httpCacheInterval = toSeconds(parseDuration(HTTP_CACHE_LIFETIME));\n    }\n\n    const consumptionReportInterval = constructorOptions.consumptionReportIntervalOverride\n      || configurationResponse.options.consumption_report_interval\n      || CONSUMPTION_HORIZON_SENDING_INTERVAL;\n\n    try {\n      this.consumptionReportInterval = toSeconds(parseDuration(consumptionReportInterval));\n    } catch {\n      logger.error(\n        `Failed to parse consumption report interval ${consumptionReportInterval}, using default value ${CONSUMPTION_HORIZON_SENDING_INTERVAL}`\n      );\n      this.consumptionReportInterval = toSeconds(parseDuration(CONSUMPTION_HORIZON_SENDING_INTERVAL));\n    }\n  }\n}\n\nexport { Configuration };","import { Logger } from '../logger';\n\n/**\n * Deep-clone an object. Note that this does not work on object containing\n * functions.\n * @param {object} obj - the object to deep-clone\n * @returns {object}\n */\nfunction deepClone<T>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj)) as T;\n}\n\nfunction parseToNumber(value) {\n  if (typeof value !== 'undefined' && !isNaN(Number(value))) {\n    return Number(value);\n  }\n  return null;\n}\n\n// timeString cannot be typed `string` because in member.ts\n// call to parseTime(data.lastConsumptionTimestamp) uses number not a string for timestamp.\nfunction parseTime(timeString): Date {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction parseAttributes(rawAttributes, warningMessage: string, log: Logger): Object {\n  let attributes = {};\n  if (rawAttributes) {\n    try {\n      attributes = JSON.parse(rawAttributes);\n    } catch (e) {\n      log.warn(warningMessage, e);\n    }\n  }\n\n  return attributes;\n}\n\n/**\n * Construct URI with query parameters\n */\nclass UriBuilder {\n  private base: string;\n  private args: string[];\n  private paths: string[];\n\n  constructor(base: string) {\n    this.base = base.replace(/\\/$/, '');\n    this.args = [];\n    this.paths = [];\n  }\n\n  public arg(name: string, value: any): UriBuilder {\n    if (typeof value !== 'undefined') {\n      this.args.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));\n    }\n    return this;\n  }\n\n  public path(name: string): UriBuilder {\n    this.paths.push(encodeURIComponent(name));\n    return this;\n  }\n\n  public build(): string {\n    let result = this.base;\n    if (this.paths.length) {\n      result += '/' + this.paths.join('/');\n    }\n\n    if (this.args.length) {\n      result += '?' + this.args.join('&');\n    }\n    return result;\n  }\n}\n\nexport { deepClone, UriBuilder, parseToNumber, parseTime, parseAttributes };\n","import { Logger } from './logger';\nimport { SyncClient } from 'twilio-sync';\nimport { parseAttributes } from './util';\nimport { validateTypesAsync, literal } from '@twilio/declarative-type-validator';\nimport { Configuration } from './configuration';\nimport { CommandExecutor } from './commandexecutor';\nimport { EditUserRequest, EditUserResponse } from './interfaces/commands/edituser';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype UserEvents = {\n  updated: (data: {\n    user: User,\n    updateReasons: UserUpdateReason[]\n  }) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n};\n\nconst log = Logger.scope('User');\n\ninterface UserState {\n  identity: string;\n  entityName: string;\n  friendlyName: string;\n  attributes: any;\n  online: boolean;\n  notifiable: boolean;\n}\n\ninterface UserServices {\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface UserLinks {\n  self: string;\n}\n\ntype SubscriptionState =\n  | 'initializing'\n  | 'subscribed'\n  | 'unsubscribed';\n\n/**\n * The reason for the `updated` event being emitted by a user.\n */\ntype UserUpdateReason =\n  | 'friendlyName'\n  | 'attributes'\n  | 'online'\n  | 'notifiable';\n\ninterface UserUpdatedEventArgs {\n  user: User;\n  updateReasons: UserUpdateReason[];\n}\n\n/**\n * Extended user information.\n * Note that `isOnline` and `isNotifiable` properties are eligible\n * for use only if the reachability function is enabled.\n * You may check if it is enabled by reading the value of {@link Client.reachabilityEnabled}.\n */\nclass User extends ReplayEventEmitter<UserEvents> {\n\n  private entity: any;\n  private state: UserState;\n  private promiseToFetch: Promise<User> | null = null;\n  private subscribed: SubscriptionState;\n\n  private links: UserLinks;\n  private configuration: Configuration;\n  private readonly services: UserServices;\n\n  private _initializationPromise: Promise<void>;\n  private _resolveInitializationPromise: any;\n\n  /**\n   * @internal\n   */\n  constructor(\n    identity: string,\n    entityName: string,\n    configuration: Configuration | null,\n    services: UserServices\n  ) {\n    super();\n\n    this.services = services;\n\n    this.subscribed = 'initializing';\n    this.setMaxListeners(0);\n\n    this.state = {\n      identity,\n      entityName,\n      friendlyName: null,\n      attributes: {},\n      online: null,\n      notifiable: null\n    };\n\n    this._initializationPromise = new Promise((resolve) => {\n      this._resolveInitializationPromise = resolve;\n    });\n\n    if (configuration !== null) {\n      this._resolveInitialization(\n        configuration,\n        identity,\n        entityName,\n        false\n      );\n    }\n  }\n\n  /**\n   * Fired when the properties or the reachability status of the message have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link User} `user` - the user in question\n   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  public readonly updated = 'updated';\n\n  /**\n   * Fired when the client has subscribed to the user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public readonly userSubscribed = 'userSubscribed';\n\n  /**\n   * Fired when the client has unsubscribed from the user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public readonly userUnsubscribed = 'userUnsubscribed';\n\n  /**\n   * User identity.\n   */\n  public get identity(): string { return this.state.identity; }\n\n  public set identity(identity: string) { this.state.identity = identity; }\n\n  public set entityName(name: string) { this.state.entityName = name; }\n\n  /**\n   * Custom attributes of the user.\n   */\n  public get attributes() { return this.state.attributes; }\n\n  /**\n   * Friendly name of the user, null if not set.\n   */\n  public get friendlyName(): string { return this.state.friendlyName; }\n\n  /**\n   * Status of the real-time conversation connection of the user.\n   */\n  public get online(): boolean { return this.state.online; }\n\n  /**\n   * User push notification registration status.\n   */\n  public get notifiable(): boolean { return this.state.notifiable; }\n\n  /**\n   * True if this user is receiving real-time status updates.\n   */\n  public get isSubscribed(): boolean { return this.subscribed == 'subscribed'; }\n\n  // Handles service updates\n  private async _update(key: string, value: any) {\n    await this._initializationPromise;\n\n    let updateReasons: UserUpdateReason[] = [];\n    log.debug('User for', this.state.identity, 'updated:', key, value);\n    switch (key) {\n      case 'friendlyName':\n        if (this.state.friendlyName !== value.value) {\n          updateReasons.push('friendlyName');\n          this.state.friendlyName = value.value;\n        }\n        break;\n      case 'attributes':\n        const updateAttributes = parseAttributes(value.value, `Retrieved malformed attributes from the server for user: ${this.state.identity}`, log);\n        if (!isEqual(this.state.attributes, updateAttributes)) {\n          this.state.attributes = updateAttributes;\n          updateReasons.push('attributes');\n        }\n        break;\n      case 'reachability':\n        if (this.state.online !== value.online) {\n          this.state.online = value.online;\n          updateReasons.push('online');\n        }\n        if (this.state.notifiable !== value.notifiable) {\n          this.state.notifiable = value.notifiable;\n          updateReasons.push('notifiable');\n        }\n        break;\n      default:\n        return;\n    }\n    if (updateReasons.length > 0) {\n      this.emit('updated', { user: this, updateReasons: updateReasons });\n    }\n  }\n\n  // Fetch reachability info\n  private async _updateReachabilityInfo(map, update): Promise<void> {\n    await this._initializationPromise;\n\n    if (!this.configuration.reachabilityEnabled) {\n      return;\n    }\n\n    return map.get('reachability')\n      .then(update)\n      .catch(err => { log.warn('Failed to get reachability info for ', this.state.identity, err); });\n  }\n\n  // Fetch user\n  private async _fetch(): Promise<User> {\n    await this._initializationPromise;\n\n    if (!this.state.entityName) {\n      return this;\n    }\n\n    this.promiseToFetch = this.services.syncClient.map({ id: this.state.entityName, mode: 'open_existing', includeItems: true })\n                              .then(map => {\n                                this.entity = map;\n                                map.on('itemUpdated', args => {\n                                  log.debug(`${this.state.entityName} (${this.state.identity}) itemUpdated: ${args.item.key}`);\n                                  return this._update(args.item.key, args.item.data);\n                                });\n                                return Promise.all([\n                                  map.get('friendlyName')\n                                     .then(item => this._update(item.key, item.data)),\n                                  map.get('attributes')\n                                     .then(item => this._update(item.key, item.data)),\n                                  this._updateReachabilityInfo(map,\n                                    item => this._update(item.key, item.data))\n                                ]);\n                              })\n                              .then(() => {\n                                log.debug('Fetched for', this.identity);\n                                this.subscribed = 'subscribed';\n                                this.emit('userSubscribed', this);\n                                return this;\n                              })\n                              .catch(err => {\n                                this.promiseToFetch = null;\n                                throw err;\n                              });\n    return this.promiseToFetch;\n  }\n\n  // Not private because it is accessed from Client constructor.\n  async _ensureFetched(): Promise<User> {\n    await this._initializationPromise;\n    return this.promiseToFetch || this._fetch();\n  }\n\n  /**\n   * Edit user attributes.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<User> {\n    await this._initializationPromise;\n    if (this.subscribed == 'unsubscribed') {\n      throw new Error('Can\\'t modify unsubscribed object');\n    }\n\n    await this.services.commandExecutor.mutateResource<EditUserRequest, EditUserResponse>(\n      'post',\n      this.links.self,\n      {\n        attributes: JSON.stringify(attributes)\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Update the friendly name of the user.\n   * @param friendlyName New friendly name.\n   */\n  @validateTypesAsync('string')\n  public async updateFriendlyName(friendlyName): Promise<User> {\n    await this._initializationPromise;\n\n    if (this.subscribed == 'unsubscribed') {\n      throw new Error('Can\\'t modify unsubscribed object');\n    }\n\n    await this.services.commandExecutor.mutateResource<EditUserRequest, EditUserResponse>(\n      'post',\n      this.links.self,\n      {\n        friendly_name: friendlyName\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Remove the user from the subscription list.\n   * @return A promise of completion.\n   */\n  public async unsubscribe(): Promise<void> {\n    await this._initializationPromise;\n\n    if (this.promiseToFetch) {\n      await this.promiseToFetch;\n      this.entity.close();\n      this.promiseToFetch = null;\n      this.subscribed = 'unsubscribed';\n      this.emit('userUnsubscribed', this);\n    }\n  }\n\n  public _resolveInitialization(\n    configuration: Configuration,\n    identity: string,\n    entityName: string,\n    emitUpdated: boolean\n  ): void {\n    this.configuration = configuration;\n    this.identity = identity;\n    this.entityName = entityName;\n    this.links = {\n      self: `${this.configuration.links.users}/${this.identity}`\n    };\n    this._resolveInitializationPromise();\n\n    if (emitUpdated) {\n      this.emit('updated', {\n        user: this,\n        updateReasons: [\n          'friendlyName',\n          'attributes',\n          'online',\n          'notifiable'\n        ]\n      });\n    }\n  }\n}\n\nexport {\n  User,\n  UserServices,\n  SubscriptionState,\n  UserUpdateReason,\n  UserUpdatedEventArgs\n};\n","import { Paginator } from './interfaces/paginator';\n\ninterface PaginatorState {\n  source: any;\n  nextToken: any;\n  prevToken: any;\n  items: any;\n}\n\n/**\n * Pagination helper class.\n */\nclass RestPaginator<T> implements Paginator<T> {\n  private state: PaginatorState;\n\n  /**\n   * Indicates the existence of the next page.\n   */\n  public get hasNextPage(): boolean { return !!this.state.nextToken; }\n\n  /**\n   * Indicates the existence of the previous page\n   */\n  public get hasPrevPage(): boolean { return !!this.state.prevToken; }\n\n  /**\n   * Array of elements on the current page.\n   */\n  public get items(): Array<T> { return this.state.items; }\n\n  /**\n   * @internal\n   */\n  constructor(items, source, prevToken, nextToken) {\n    this.state = {\n      prevToken,\n      nextToken,\n      source,\n      items\n    };\n  }\n\n  /**\n   * Request the next page. Does not modify the existing object.\n   */\n  public async nextPage(): Promise<RestPaginator<T>> {\n    return this.hasNextPage ? this.state.source(this.state.nextToken) : Promise.reject(new Error('No next page'));\n  }\n\n  /**\n   * Request the previous page. Does not modify the existing object.\n   */\n  public async prevPage(): Promise<RestPaginator<T>> {\n    return this.hasPrevPage ? this.state.source(this.state.prevToken) : Promise.reject(new Error('No previous page'));\n  }\n}\n\nexport { RestPaginator };\n","import { Logger } from './logger';\nimport { Channel, NotificationLevel, ChannelStatus, ChannelType } from './channel';\nimport { Client } from './client';\nimport { parseAttributes, parseTime } from './util';\n\nconst log = Logger.scope('ChannelDescriptor');\n\n/**\n * Contains channel information.\n * Unlike {@link Channel}, this information won't be updated in realtime.\n * To have fresh data, user should query for channel descriptors again.\n */\nclass ChannelDescriptor {\n  public client: Client;\n  public descriptor: any;\n\n  /**\n   * Unique system identifier of the channel.\n   */\n  public readonly sid: string;\n\n  /**\n   * Custom attributes of the channel.\n   */\n  public readonly channel: string;\n\n  /**\n   * Unique name of the channel.\n   */\n  public readonly uniqueName: string;\n\n  /**\n   * Name of the channel.\n   */\n  public readonly friendlyName: string;\n\n  /**\n   * Custom attributes of the channel.\n   */\n  public readonly attributes: any;\n\n  /**\n   * Identity of the user that created this channel.\n   */\n  public readonly createdBy: string;\n\n  /**\n   * Date this channel was created on.\n   */\n  public readonly dateCreated: Date;\n\n  /**\n   * Date this channel was last updated on.\n   */\n  public readonly dateUpdated: Date;\n\n  /**\n   * Amount of messages in the channel.\n   */\n  public readonly messagesCount: number;\n\n  /**\n   * Amount of members in the channel.\n   */\n  public readonly membersCount: number;\n\n  /**\n   * Index of the last message the user has read in this channel.\n   */\n  public readonly lastConsumedMessageIndex: number;\n\n  /**\n   * Delivery status of the channel.\n   */\n  public readonly status: ChannelStatus;\n\n  /**\n   * MemberType of the channel.\n   */\n  public readonly type: ChannelType;\n\n  /**\n   * Signifies whether the channel is private.\n   */\n  public readonly isPrivate: boolean;\n\n  /**\n   * User notification level for this channel.\n   */\n  public readonly notificationLevel: NotificationLevel;\n\n  /**\n   * @internal\n   */\n  constructor(client: Client, descriptor: any) {\n    this.client = client;\n    this.descriptor = descriptor;\n\n    this.sid = descriptor.sid || descriptor.conversation_sid;\n    this.channel = `${this.sid}.channel`;\n    this.uniqueName = descriptor.unique_name;\n    this.friendlyName = descriptor.friendly_name;\n    this.attributes = parseAttributes(descriptor.attributes, 'Failed to parse channel attributes', log);\n    this.createdBy = descriptor.created_by;\n    this.dateCreated = parseTime(descriptor.date_created);\n    this.dateUpdated = parseTime(descriptor.date_updated);\n    this.messagesCount = descriptor.messages_count;\n    this.membersCount = descriptor.participants_count;\n    this.type = descriptor.type;\n    this.isPrivate = descriptor.type === 'private';\n    this.lastConsumedMessageIndex = descriptor.last_consumed_message_index;\n    this.notificationLevel = descriptor.notification_level || undefined;\n    this.status = descriptor.status || 'unknown';\n  }\n\n  /**\n   * Get the channel object from the descriptor.\n   */\n  getChannel(): Promise<Channel> {\n    return this.client.getChannelBySid(this.sid);\n  }\n}\n\nexport { ChannelDescriptor };\n","import { UriBuilder } from '../util/index';\nimport { RestPaginator } from '../restpaginator';\nimport { ChannelDescriptor } from '../channeldescriptor';\nimport { Network } from '../services/network';\nimport { Client } from '../client';\n\nexport interface PublicChannelServices {\n  network: Network;\n}\n\n/**\n * Public channels collection\n * It's a cassandra-backed pull-based collection\n */\nclass PublicChannels {\n  private client: Client;\n  private services: PublicChannelServices;\n  private url: string;\n\n  constructor(client: Client, services: PublicChannelServices, url: string) {\n    this.client = client;\n    this.services = services;\n    this.url = url;\n  }\n\n  public async getChannels(args: any = {}): Promise<RestPaginator<ChannelDescriptor>> {\n    const url = new UriBuilder(this.url).arg('PageToken', args.pageToken).build();\n    let response = await this.services.network.get(url);\n    return new RestPaginator<ChannelDescriptor>(response.body.conversations.map(x => new ChannelDescriptor(this.client, x))\n      , pageToken => this.getChannels({ pageToken })\n      , response.body.meta.previous_token\n      , response.body.meta.next_token);\n  }\n\n  public async getChannelBySid(sid: string): Promise<ChannelDescriptor> {\n    const url = new UriBuilder(this.url).path(sid).build();\n    let response = await this.services.network.get(url);\n    return new ChannelDescriptor(this.client, response.body);\n  }\n\n  public async getChannelByUniqueName(uniqueName: string): Promise<ChannelDescriptor> {\n    const url = new UriBuilder(this.url).path(uniqueName).build();\n    let response = await this.services.network.get(url);\n    return new ChannelDescriptor(this.client, response.body);\n  }\n}\n\nexport { PublicChannels };\n","import { Retrier } from '@twilio/operation-retrier';\nimport { Transport } from 'twilsock';\nimport { Configuration } from '../configuration';\n\ninterface CacheEntry {\n  response: Object;\n  timestamp: number;\n}\n\nexport interface NetworkServices {\n  transport: Transport;\n}\n\nclass Network {\n  private readonly cacheLifetime: number;\n  private readonly cache: Map<string, CacheEntry>;\n  private timer: any;\n\n  constructor(\n    private readonly configuration: Configuration,\n    private readonly services: NetworkServices,\n  ) {\n    this.cache = new Map<string, CacheEntry>();\n    this.cacheLifetime = this.configuration.httpCacheInterval * 100;\n    this.cleanupCache();\n  }\n\n  private isExpired(timestamp: number): boolean {\n    return !this.cacheLifetime || (Date.now() - timestamp) > this.cacheLifetime;\n  }\n\n  private cleanupCache() {\n    for (let [k, v] of this.cache) {\n      if (this.isExpired(v.timestamp)) {\n        this.cache.delete(k);\n      }\n    }\n\n    if (this.cache.size === 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  pokeTimer() {\n    this.timer = this.timer || setInterval(() => this.cleanupCache(), this.cacheLifetime * 2);\n  }\n\n  private async executeWithRetry(request, retryWhenThrottled = false): Promise<any> {\n    return new Promise((resolve, reject) => {\n      let codesToRetryOn = [502, 503, 504];\n      if (retryWhenThrottled) {\n        codesToRetryOn.push(429);\n      }\n\n      let retrier = new Retrier(this.configuration.backoffConfiguration);\n      retrier.on('attempt', () => {\n        request()\n          .then(result => retrier.succeeded(result))\n          .catch(err => {\n            if (codesToRetryOn.indexOf(err.status) > -1) {\n              retrier.failed(err);\n            } else if (err.message === 'Twilsock disconnected') {\n              // Ugly hack. We must make a proper exceptions for twilsock\n              retrier.failed(err);\n            } else {\n              // Fatal error\n              retrier.removeAllListeners();\n              retrier.cancel();\n              reject(err);\n            }\n          });\n      });\n\n      retrier.on('succeeded', result => { resolve(result); });\n      retrier.on('cancelled', err => reject(err));\n      retrier.on('failed', err => reject(err));\n\n      retrier.start();\n    });\n  }\n\n  public async get(url: string) {\n    let cacheEntry = this.cache.get(url);\n    if (cacheEntry && !this.isExpired(cacheEntry.timestamp)) {\n      return cacheEntry.response;\n    }\n\n    const headers = {};\n    let response = await this.executeWithRetry(\n      () => this.services.transport.get(url, headers, this.configuration.productId), this.configuration.retryWhenThrottled);\n    this.cache.set(url, { response, timestamp: Date.now() });\n    this.pokeTimer();\n    return response;\n  }\n}\n\nexport { Network };\n","class NotificationTypes {\n  static readonly TYPING_INDICATOR = 'twilio.ipmsg.typing_indicator';\n  static readonly NEW_MESSAGE = 'twilio.channel.new_message';\n  static readonly ADDED_TO_CHANNEL = 'twilio.channel.added_to_channel';\n  static readonly INVITED_TO_CHANNEL = 'twilio.channel.invited_to_channel';\n  static readonly REMOVED_FROM_CHANNEL = 'twilio.channel.removed_from_channel';\n  static readonly CONSUMPTION_UPDATE = 'twilio.channel.consumption_update';\n}\n\nexport { NotificationTypes };","import { EventEmitter } from 'events';\nimport { UserDescriptor } from './userdescriptor';\nimport { Users } from './data/users';\nimport { User } from './user';\nimport { parseTime, parseAttributes } from './util';\nimport { Logger } from './logger';\nimport { validateTypesAsync, literal } from '@twilio/declarative-type-validator';\nimport { Channel } from './channel';\nimport { CommandExecutor } from './commandexecutor';\nimport { EditMemberRequest, EditMemberResponse } from './interfaces/commands/editmember';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype MemberEvents = {\n  typingEnded: (member: Member) => void;\n  typingStarted: (member: Member) => void;\n  updated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope('Member');\n\ninterface MemberDescriptor {\n  attributes?: Object;\n  dateCreated: any;\n  dateUpdated: any;\n  identity: string;\n  roleSid?: string;\n  lastConsumedMessageIndex: number;\n  lastConsumptionTimestamp: number;\n  type?: MemberType;\n  userInfo: string;\n}\n\ninterface MemberState {\n  attributes: any;\n  dateCreated: Date;\n  dateUpdated: Date;\n  identity: string;\n  isTyping: boolean;\n  lastConsumedMessageIndex: number | null;\n  lastConsumptionTimestamp: Date;\n  roleSid: string;\n  sid: string;\n  type: MemberType;\n  typingTimeout: any;\n  userInfo: string;\n}\n\ninterface MemberServices {\n  users: Users;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MemberLinks {\n  self: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a member.\n */\ntype MemberUpdateReason =\n  | 'attributes'\n  | 'dateCreated'\n  | 'dateUpdated'\n  | 'roleSid'\n  | 'lastConsumedMessageIndex'\n  | 'lastConsumptionTimestamp';\n\n/**\n * Push notification type of a member.\n */\ntype MemberType = 'chat' | 'sms' | 'whatsapp';\n\ninterface MemberUpdatedEventArgs {\n  member: Member;\n  updateReasons: MemberUpdateReason[];\n}\n\n/**\n * A member represents a remote client in a channel.\n */\nclass Member extends ReplayEventEmitter<MemberEvents> {\n\n  private state: MemberState;\n\n  /**\n   * Channel that the remote client is a member of.\n   */\n  public readonly channel: Channel;\n\n  private readonly links: MemberLinks;\n  private readonly services: MemberServices;\n\n  /**\n   * @internal\n   */\n  constructor(\n    data: MemberDescriptor,\n    sid: string,\n    channel: Channel,\n    links: MemberLinks,\n    services: MemberServices\n  ) {\n    super();\n\n    this.channel = channel;\n    this.links = links;\n    this.services = services;\n\n    this.state = {\n      attributes: parseAttributes(data.attributes,\n        'Retrieved malformed attributes from the server for member: ' + sid,\n        log),\n      dateCreated: data.dateCreated ? parseTime(data.dateCreated) : null,\n      dateUpdated: data.dateCreated ? parseTime(data.dateUpdated) : null,\n      sid: sid,\n      typingTimeout: null,\n      isTyping: false,\n      identity: data.identity || null,\n      roleSid: data.roleSid || null,\n      lastConsumedMessageIndex: Number.isInteger(data.lastConsumedMessageIndex) ? data.lastConsumedMessageIndex : null,\n      lastConsumptionTimestamp: data.lastConsumptionTimestamp ? parseTime(data.lastConsumptionTimestamp) : null,\n      type: data.type || 'chat',\n      userInfo: data.userInfo\n    };\n\n    if (!data.identity && !data.type) {\n      throw new Error('Received invalid Member object from server: Missing identity or type of Member.');\n    }\n  }\n\n  /**\n   * Fired when the member has started typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly typingStarted = 'typingStarted';\n\n  /**\n   * Fired when the member has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly typingEnded = 'typingEnded';\n\n  /**\n   * Fired when the fields of the member have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Member} member - the member in question\n   *     * {@link MemberUpdateReason}[] updateReasons - array of reasons for the update\n   * @event\n   */\n  static readonly updated = 'updated';\n\n  /**\n   * The server-assigned unique identifier for the member.\n   */\n  public get sid(): string { return this.state.sid; }\n\n  /**\n   * Custom attributes of the member.\n   */\n  public get attributes(): Object { return this.state.attributes; }\n\n  /**\n   * Date this member was created on.\n   */\n  public get dateCreated(): Date { return this.state.dateCreated; }\n\n  /**\n   * Date this member was last updated on.\n   */\n  public get dateUpdated(): Date { return this.state.dateUpdated; }\n\n  /**\n   * Identity of the member.\n   */\n  public get identity(): string { return this.state.identity; }\n\n  /**\n   * Indicates whether the member is currently typing.\n   */\n  public get isTyping(): boolean { return this.state.isTyping; }\n\n  /**\n   * The index of the last consumed message by the member.\n   * Note that retrieving messages on a client endpoint does not mean that messages are read,\n   * please consider reading about the [Read Horizon feature](https://www.twilio.com/docs/api/chat/guides/consumption-horizon)\n   * to find out about the proper way to mark messages as read.\n   */\n  public get lastConsumedMessageIndex(): number | null { return this.state.lastConsumedMessageIndex; }\n\n  /**\n   * Date of the most recent consumption horizon update.\n   */\n  public get lastConsumptionTimestamp(): Date { return this.state.lastConsumptionTimestamp; }\n\n  public get roleSid(): string { return this.state.roleSid; }\n\n  /**\n   * Message type of the member.\n   */\n  public get type(): MemberType { return this.state.type; }\n\n  /**\n   * Internal method used to start or reset the typing indicator timeout (with event emitting).\n   * @internal\n   */\n  _startTyping(timeout) {\n    clearTimeout(this.state.typingTimeout);\n\n    this.state.isTyping = true;\n    this.emit('typingStarted', this);\n    this.channel.emit('typingStarted', this);\n\n    this.state.typingTimeout = setTimeout(() => this._endTyping(), timeout);\n    return this;\n  }\n\n  /**\n   * Internal method function used to stop typing indicator timeout (with event emitting).\n   * @internal\n   */\n  _endTyping() {\n    if (!this.state.typingTimeout) { return; }\n\n    this.state.isTyping = false;\n    this.emit('typingEnded', this);\n    this.channel.emit('typingEnded', this);\n\n    clearInterval(this.state.typingTimeout);\n    this.state.typingTimeout = null;\n  }\n\n  /**\n   * Internal method function used update local object's property roleSid with a new value.\n   * @internal\n   */\n  _update(data) {\n    let updateReasons: MemberUpdateReason[] = [];\n\n    const updateAttributes =\n      parseAttributes(\n        data.attributes,\n        'Retrieved malformed attributes from the server for member: ' + this.state.sid,\n        log);\n\n    if (data.attributes && !isEqual(this.state.attributes, updateAttributes)) {\n      this.state.attributes = updateAttributes;\n      updateReasons.push('attributes');\n    }\n\n    const updatedDateUpdated = parseTime(data.dateUpdated);\n    if (data.dateUpdated && (updatedDateUpdated?.getTime() !== this.state.dateUpdated?.getTime())) {\n      this.state.dateUpdated = updatedDateUpdated;\n      updateReasons.push('dateUpdated');\n    }\n\n    const updatedDateCreated = parseTime(data.dateCreated);\n    if (data.dateCreated && (updatedDateCreated?.getTime() !== this.state.dateCreated?.getTime())) {\n      this.state.dateCreated = updatedDateCreated;\n      updateReasons.push('dateCreated');\n    }\n\n    if (data.roleSid && this.state.roleSid !== data.roleSid) {\n      this.state.roleSid = data.roleSid;\n      updateReasons.push('roleSid');\n    }\n\n    const indexIsValid = Number.isInteger(data.lastConsumedMessageIndex) || data.lastConsumedMessageIndex === null;\n    if (indexIsValid && (this.state.lastConsumedMessageIndex !== data.lastConsumedMessageIndex)) {\n      this.state.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n      updateReasons.push('lastConsumedMessageIndex');\n    }\n\n    const updatedTimestamp = parseTime(data.lastConsumptionTimestamp);\n    if (data.lastConsumptionTimestamp && (updatedTimestamp?.getTime() !== this.state.lastConsumptionTimestamp?.getTime())) {\n      this.state.lastConsumptionTimestamp = updatedTimestamp;\n      updateReasons.push('lastConsumptionTimestamp');\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit('updated', { member: this, updateReasons: updateReasons });\n    }\n\n    return this;\n  }\n\n  /**\n   * Get the user descriptor for this member. Supported only for members of type `chat`.\n   */\n  public async getUserDescriptor(): Promise<UserDescriptor> {\n    if (this.type != 'chat') {\n      throw new Error('Getting User Descriptor is not supported for this Member type: ' + this.type);\n    }\n\n    return this.services.users.getUserDescriptor(this.state.identity);\n  }\n\n  /**\n   * Get the user for this member and subscribes to it. Supported only for members of type `chat`.\n   */\n  public async getUser(): Promise<User> {\n    if (this.type != 'chat') {\n      throw new Error('Getting User is not supported for this Member type: ' + this.type);\n    }\n\n    return this.services.users.getUser(this.state.identity, this.state.userInfo);\n  }\n\n  /**\n   * Remove the member from the channel.\n   */\n  public async remove(): Promise<void> {\n    return this.channel.removeMember(this);\n  }\n\n  /**\n   * Update the attributes of the member.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<Member> {\n    await this.services.commandExecutor.mutateResource<EditMemberRequest, EditMemberResponse>(\n      'post',\n      this.links.self,\n      {\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n      }\n    );\n\n    return this;\n  }\n}\n\nexport {\n  MemberDescriptor,\n  MemberServices,\n  Member,\n  MemberUpdateReason,\n  MemberType,\n  MemberUpdatedEventArgs\n};\n","import {\n  MemberDescriptor,\n  Member,\n  MemberUpdatedEventArgs,\n  MemberUpdateReason\n} from '../member';\nimport { Logger } from '../logger';\n\nimport { Channel } from '../channel';\n\nimport { SyncMap, SyncClient } from 'twilio-sync';\nimport { Users } from './users';\nimport { CommandExecutor } from '../commandexecutor';\nimport { JoinChannelRequest, JoinChannelResponse } from '../interfaces/commands/joinchannel';\nimport { Configuration } from '../configuration';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype MembersEvents = {\n  memberJoined: (member: Member) => void;\n  memberLeft: (member: Member) => void;\n  memberUpdated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope('Members');\n\nexport interface MembersServices {\n  syncClient: SyncClient;\n  users: Users;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MembersLinks {\n  participants: string;\n}\n\n/**\n * @classdesc Represents the collection of members for the channel\n * @fires Members#memberJoined\n * @fires Members#memberLeft\n * @fires Members#memberUpdated\n */\nclass Members extends ReplayEventEmitter<MembersEvents> {\n\n  rosterEntityPromise: Promise<SyncMap>;\n\n  constructor(\n    public readonly channel: Channel,\n    public readonly members: Map<string, Member>,\n    private readonly links: MembersLinks,\n    private readonly configuration: Configuration,\n    private readonly services: MembersServices\n  ) {\n    super();\n  }\n\n  public async unsubscribe(): Promise<void> {\n    if (this.rosterEntityPromise) {\n      let entity = await this.rosterEntityPromise;\n      entity.close();\n      this.rosterEntityPromise = null;\n    }\n  }\n\n  public async subscribe(rosterObjectName: string) {\n    return this.rosterEntityPromise = this.rosterEntityPromise\n      || this.services.syncClient.map({ id: rosterObjectName, mode: 'open_existing' })\n             .then(rosterMap => {\n               rosterMap.on('itemAdded', args => {\n                 log.debug(this.channel.sid + ' itemAdded: ' + args.item.key);\n                 this.upsertMember(args.item.key, args.item.data)\n                     .then(member => {\n                       this.emit('memberJoined', member);\n                     });\n               });\n\n               rosterMap.on('itemRemoved', args => {\n                 log.debug(this.channel.sid + ' itemRemoved: ' + args.key);\n                 let memberSid = args.key;\n                 if (!this.members.has(memberSid)) {\n                   return;\n                 }\n                 let leftMember = this.members.get(memberSid);\n                 this.members.delete(memberSid);\n                 this.emit('memberLeft', leftMember);\n               });\n\n               rosterMap.on('itemUpdated', args => {\n                 log.debug(this.channel.sid + ' itemUpdated: ' + args.item.key);\n                 this.upsertMember(args.item.key, args.item.data);\n               });\n\n               let membersPromises = [];\n               let that = this;\n               const rosterMapHandler = function(paginator) {\n                 paginator.items.forEach(item => { membersPromises.push(that.upsertMember(item.key, item.data)); });\n                 return paginator.hasNextPage ? paginator.nextPage().then(rosterMapHandler) : null;\n               };\n\n               return rosterMap\n                 .getItems()\n                 .then(rosterMapHandler)\n                 .then(() => Promise.all(membersPromises))\n                 .then(() => rosterMap);\n             })\n             .catch(err => {\n               this.rosterEntityPromise = null;\n               if (this.services.syncClient.connectionState != 'disconnected') {\n                 log.error('Failed to get roster object for channel', this.channel.sid, err);\n               }\n               log.debug('ERROR: Failed to get roster object for channel', this.channel.sid, err);\n               throw err;\n             });\n  }\n\n  public async upsertMember(memberSid: string, data: MemberDescriptor): Promise<Member> {\n    let member = this.members.get(memberSid);\n    if (member) {\n      return member._update(data);\n    }\n\n    const links = {\n      self: `${this.links.participants}/${memberSid}`\n    };\n\n    member = new Member(data, memberSid, this.channel, links, this.services);\n    this.members.set(memberSid, member);\n    member.on('updated', (args: MemberUpdatedEventArgs) => this.emit('memberUpdated', args));\n    return member;\n  }\n\n  /**\n   * @returns {Promise<Array<Member>>} returns list of members {@see Member}\n   */\n  public async getMembers(): Promise<Array<Member>> {\n    return this.rosterEntityPromise.then(() => {\n      let members = [];\n      this.members.forEach((member) => members.push(member));\n      return members;\n    });\n  }\n\n  /**\n   * Get member by SID from channel\n   * @returns {Promise<Member>}\n   */\n  public async getMemberBySid(memberSid: string): Promise<Member> {\n    return this.rosterEntityPromise.then(() => {\n      let member = this.members.get(memberSid);\n      if (!member) {\n        throw new Error('Member with SID ' + memberSid + ' was not found');\n      }\n      return member;\n    });\n  }\n\n  /**\n   * Get member by identity from channel\n   * @returns {Promise<Member>}\n   */\n  public async getMemberByIdentity(identity: string): Promise<Member> {\n    let foundMember = null;\n    return this.rosterEntityPromise.then(() => {\n      this.members.forEach((member) => {\n        if (member.identity === identity) {\n          foundMember = member;\n        }\n      });\n      if (!foundMember) {\n        throw new Error('Member with identity ' + identity + ' was not found');\n      }\n      return foundMember;\n    });\n  }\n\n  /**\n   * Add user to the channel\n   * @returns {Promise<any>}\n   */\n  public async add(identity: string): Promise<JoinChannelResponse> {\n    return await this.services.commandExecutor.mutateResource<JoinChannelRequest, JoinChannelResponse>(\n      'post',\n      this.links.participants,\n      {\n        identity\n      }\n    );\n  }\n\n  /**\n   * Invites user to the channel\n   * User can choose either to join or not\n   * @returns {Promise<any>}\n   */\n  public async invite(identity: string): Promise<any> {\n    return await this.services.commandExecutor.mutateResource(\n      'post',\n      this.channel.links.invites,\n      {\n        identity\n      }\n    );\n  }\n\n  /**\n   * Remove member from channel\n   * @returns {Promise<any>}\n   */\n  public async remove(identity: string): Promise<void> {\n    return await this.services.commandExecutor.mutateResource(\n      'delete',\n      `${this.links.participants}/${identity}`,\n    );\n  }\n}\n\nexport { Members };\n\n/**\n * Fired when member joined channel\n * @event Members#memberJoined\n * @type {Member}\n */\n\n/**\n * Fired when member left channel\n * @event Members#memberLeft\n * @type {Member}\n */\n\n/**\n * Fired when member updated\n * @event Members#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n","import { McsClient, McsMedia } from '@twilio/mcs-client';\n\nexport interface MediaState {\n  sid: string;\n  filename?: string;\n  contentType: string;\n  size: number;\n}\n\nexport interface MediaServices {\n  mcsClient: McsClient;\n}\n\n/**\n * Represents media information for a message in a channel.\n */\nclass Media {\n\n  private state: MediaState;\n  private services: MediaServices;\n  private mcsMedia: McsMedia = null;\n\n  /**\n   * @internal\n   */\n  constructor(data: MediaState, services: MediaServices) {\n\n    this.services = services;\n\n    this.state = {\n      sid: data.sid,\n      filename: data.filename,\n      contentType: data.contentType,\n      size: data.size\n    };\n  }\n\n  /**\n   * Server-assigned unique identifier for the media.\n   */\n  public get sid(): string { return this.state.sid; }\n\n  /**\n   * File name. Null if absent.\n   */\n  public get filename(): string {return this.state.filename; }\n\n  /**\n   * Content type of the media.\n   */\n  public get contentType(): string { return this.state.contentType; }\n\n  /**\n   * Size of the media in bytes.\n   */\n  public get size(): number {return this.state.size; }\n\n  /**\n   * Returns the direct content URL for the media.\n   *\n   * This URL is impermanent, it will expire in several minutes and cannot be cached.\n   * If the URL becomes expired, you need to request a new one.\n   * Each call to this function produces a new temporary URL.\n   */\n  public async getContentTemporaryUrl() {\n    if (!this.mcsMedia) {\n      if (this.services.mcsClient) {\n        this.mcsMedia = await this.services.mcsClient.get(this.state.sid);\n      } else {\n        throw new Error('Media Content Service is unavailable');\n      }\n    }\n    return this.mcsMedia.getContentUrl();\n  }\n}\n\nexport { Media };\n","import { parseAttributes } from './util';\nimport { Logger } from './logger';\n\nimport { Channel } from './channel';\nimport { McsClient } from '@twilio/mcs-client';\nimport { Media } from './media';\nimport { Member } from './member';\nimport { validateTypesAsync, literal } from '@twilio/declarative-type-validator';\nimport { Configuration } from './configuration';\nimport { CommandExecutor } from './commandexecutor';\nimport { EditMessageRequest } from './interfaces/commands/editmessage';\nimport { MessageResponse } from './interfaces/commands/messageresponse';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype MessageEvents = {\n  updated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[]\n  }) => void;\n};\n\nconst log = Logger.scope('Message');\n\ninterface MessageState {\n  sid: string;\n  index: number;\n  author?: string;\n  body: string;\n  dateUpdated: Date;\n  lastUpdatedBy: string;\n  attributes: Object;\n  timestamp: Date;\n  type: MessageType;\n  media?: Media;\n  memberSid?: string;\n}\n\ninterface MessageServices {\n  mcsClient: McsClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MessageLinks {\n  self: string;\n  conversation: string;\n  messages_receipts: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a message.\n */\ntype MessageUpdateReason =\n  | 'body'\n  | 'lastUpdatedBy'\n  | 'dateCreated'\n  | 'dateUpdated'\n  | 'attributes'\n  | 'author';\n\n/**\n * Push notification type of a message.\n */\ntype MessageType = 'text' | 'media';\n\ninterface MessageUpdatedEventArgs {\n  message: Message;\n  updateReasons: MessageUpdateReason[];\n}\n\n/**\n * A message in a channel.\n */\nclass Message extends ReplayEventEmitter<MessageEvents> {\n  private state: MessageState;\n\n  /**\n   * Channel that the message is in.\n   */\n  public readonly channel: Channel;\n  private readonly links: MessageLinks;\n  private readonly configuration: Configuration;\n  private readonly services: MessageServices;\n\n  /**\n   * @internal\n   */\n  constructor(\n    index: number,\n    data: any,\n    channel: Channel,\n    links: MessageLinks,\n    configuration: Configuration,\n    services: MessageServices\n  ) {\n    super();\n\n    this.channel = channel;\n    this.links = links;\n    this.configuration = configuration;\n    this.services = services;\n\n    this.state = {\n      sid: data.sid,\n      index: index,\n      author: data.author == null ? null : data.author,\n      body: data.text,\n      timestamp: data.timestamp ? new Date(data.timestamp) : null,\n      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,\n      lastUpdatedBy: data.lastUpdatedBy ? data.lastUpdatedBy : null,\n      attributes: parseAttributes(data.attributes, `Got malformed attributes for the message ${data.sid}`, log),\n      type: data.type ? data.type : 'text',\n      media: (data.type && data.type === 'media' && data.media)\n        ? new Media(data.media, this.services) : null,\n      memberSid: data.memberSid == null ? null : data.memberSid\n    };\n  }\n\n  /**\n   * Fired when the properties or the body of the message have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} message - the message in question\n   *     * {@link MessageUpdateReason}[] updateReasons - array of reasons for the update\n   */\n  static readonly updated = 'updated';\n\n  /**\n   * The server-assigned unique identifier for the message.\n   */\n  public get sid(): string { return this.state.sid; }\n\n  /**\n   * Name of the user that sent the message.\n   */\n  public get author(): string { return this.state.author; }\n\n  /**\n   * Body of the message. Null if the message is a media message.\n   */\n  public get body(): string {\n    if (this.type === 'media') {\n      return null;\n    }\n\n    return this.state.body;\n  }\n\n  /**\n   * Date this message was last updated on.\n   */\n  public get dateUpdated(): Date { return this.state.dateUpdated; }\n\n  /**\n   * Index of the message in the channel's messages list.\n   * By design of the Programmable Chat system, the message indices may have arbitrary gaps between them,\n   * that does not necessarily mean they were deleted or otherwise modified - just that\n   * messages may have some non-contiguous indices even if they are being sent immediately one after another.\n   *\n   * Trying to use indices for some calculations is going to be unreliable.\n   *\n   * To calculate the number of unread messages it is better to use the read horizon API.\n   * See {@link Channel.getUnconsumedMessagesCount} for details.\n   */\n  public get index(): number { return this.state.index; }\n\n  /**\n   * Identity of the last user that updated the message.\n   */\n  public get lastUpdatedBy(): string { return this.state.lastUpdatedBy; }\n\n  /**\n   * Date this message was created on.\n   */\n  public get dateCreated(): Date { return this.state.timestamp; }\n\n  /**\n   * Custom attributes of the message.\n   */\n  public get attributes(): Object { return this.state.attributes; }\n\n  /**\n   * Push notification type of the message.\n   */\n  public get type(): MessageType { return this.state.type; }\n\n  /**\n   * Media information (if present).\n   */\n  public get media(): Media { return this.state.media; }\n\n  /**\n   * The server-assigned unique identifier of the authoring member.\n   */\n  public get memberSid(): string { return this.state.memberSid; }\n\n  _update(data) {\n    let updateReasons: MessageUpdateReason[] = [];\n\n    if ((data.text || ((typeof data.text) === 'string')) && data.text !== this.state.body) {\n      this.state.body = data.text;\n      updateReasons.push('body');\n    }\n\n    if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {\n      this.state.lastUpdatedBy = data.lastUpdatedBy;\n      updateReasons.push('lastUpdatedBy');\n    }\n\n    if (data.author && data.author !== this.state.author) {\n      this.state.author = data.author;\n      updateReasons.push('author');\n    }\n\n    if (data.dateUpdated &&\n      new Date(data.dateUpdated).getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {\n      this.state.dateUpdated = new Date(data.dateUpdated);\n      updateReasons.push('dateUpdated');\n    }\n\n    if (data.timestamp &&\n      new Date(data.timestamp).getTime() !== (this.state.timestamp && this.state.timestamp.getTime())) {\n      this.state.timestamp = new Date(data.timestamp);\n      updateReasons.push('dateCreated');\n    }\n\n    let updatedAttributes = parseAttributes(data.attributes, `Got malformed attributes for the message ${this.sid}`, log);\n    if (!isEqual(this.state.attributes, updatedAttributes)) {\n      this.state.attributes = updatedAttributes;\n      updateReasons.push('attributes');\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit('updated', { message: this, updateReasons: updateReasons });\n    }\n  }\n\n  /**\n   * Get the member who is the author of the message.\n   */\n  public async getMember(): Promise<Member> {\n    let member: Member = null;\n    if (this.state.memberSid) {\n      member = await this.channel.getMemberBySid(this.memberSid)\n                         .catch(() => {\n                           log.debug('Member with sid \"' + this.memberSid + '\" not found for message ' + this.sid);\n                           return null;\n                         });\n    }\n    if (!member && this.state.author) {\n      member = await this.channel.getMemberByIdentity(this.state.author)\n                         .catch(() => {\n                           log.debug('Member with identity \"' + this.author + '\" not found for message ' + this.sid);\n                           return null;\n                         });\n    }\n    if (member) {\n      return member;\n    }\n    let errorMesage = 'Member with ';\n    if (this.state.memberSid) {\n      errorMesage += 'SID \\'' + this.state.memberSid + '\\' ';\n    }\n    if (this.state.author) {\n      if (this.state.memberSid) {\n        errorMesage += 'or ';\n      }\n      errorMesage += 'identity \\'' + this.state.author + '\\' ';\n    }\n    if (errorMesage === 'Member with ') {\n      errorMesage = 'Member ';\n    }\n    errorMesage += 'was not found';\n    throw new Error(errorMesage);\n  }\n\n  /**\n   * Remove the message.\n   */\n  public async remove(): Promise<Message> {\n    await this.services.commandExecutor.mutateResource(\n      'delete',\n      this.links.self,\n    );\n\n    return this;\n  }\n\n  /**\n   * Edit the message body.\n   * @param body New body of the message.\n   */\n  @validateTypesAsync('string')\n  public async updateBody(body: string): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<EditMessageRequest, MessageResponse>(\n      'post',\n      this.links.self,\n      {\n        body\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Edit the message attributes.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<EditMessageRequest, MessageResponse>(\n      'post',\n      this.links.self,\n      {\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n      }\n    );\n\n    return this;\n  }\n}\n\nexport {\n  Message,\n  MessageServices,\n  MessageType,\n  MessageUpdateReason,\n  MessageUpdatedEventArgs\n};\n","import { Logger } from '../logger';\n\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason\n} from '../message';\nimport { Channel, SendMediaOptions } from '../channel';\n\nimport { SyncList, SyncClient } from 'twilio-sync';\nimport { SyncPaginator } from '../syncpaginator';\n\nimport { McsClient, McsMedia } from '@twilio/mcs-client';\nimport { Configuration } from '../configuration';\nimport { CommandExecutor } from '../commandexecutor';\nimport { SendMessageRequest } from '../interfaces/commands/sendmessage';\nimport { MessageResponse } from '../interfaces/commands/messageresponse';\nimport { SendMediaMessageRequest } from '../interfaces/commands/sendmediamessage';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype MessagesEvents = {\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope('Messages');\n\nexport interface MessagesServices {\n  mcsClient: McsClient;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\n/**\n * Represents the collection of messages in a channel\n */\nclass Messages extends ReplayEventEmitter<MessagesEvents> {\n  private readonly messagesByIndex: Map<number, Message>;\n  private messagesListPromise: Promise<SyncList>;\n\n  constructor(\n    public readonly channel: Channel,\n    private readonly configuration: Configuration,\n    private readonly services: MessagesServices\n  ) {\n    super();\n\n    this.messagesByIndex = new Map();\n    this.messagesListPromise = null;\n  }\n\n  /**\n   * Subscribe to the Messages Event Stream\n   * @param {String} name - The name of Sync object for the Messages resource.\n   * @returns {Promise}\n   */\n  public async subscribe(name: string) {\n    return this.messagesListPromise =\n      this.messagesListPromise ||\n      this.services.syncClient.list({ id: name, mode: 'open_existing' })\n          .then(list => {\n\n            list.on('itemAdded', args => {\n              log.debug(this.channel.sid + ' itemAdded: ' + args.item.index);\n              const links = {\n                self: `${this.channel.links.messages}/${args.item.data.sid}`,\n                conversation: this.channel.links.self,\n                messages_receipts: `${this.channel.links.messages}/${args.item.data.sid}/Receipts`,\n              };\n              const message = new Message(args.item.index, args.item.data, this.channel, links, this.configuration, this.services);\n              if (this.messagesByIndex.has(message.index)) {\n                log.debug('Message arrived, but already known and ignored', this.channel.sid, message.index);\n                return;\n              }\n\n              this.messagesByIndex.set(message.index, message);\n              message.on('updated',\n                (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n              this.emit('messageAdded', message);\n            });\n\n            list.on('itemRemoved', args => {\n              log.debug(this.channel.sid + ' itemRemoved: ' + args.index);\n              let index = args.index;\n              if (this.messagesByIndex.has(index)) {\n                let message = this.messagesByIndex.get(index);\n                this.messagesByIndex.delete(message.index);\n                message.removeAllListeners('updated');\n                this.emit('messageRemoved', message);\n              }\n            });\n\n            list.on('itemUpdated', args => {\n              log.debug(this.channel.sid + ' itemUpdated: ' + args.item.index);\n              let message = this.messagesByIndex.get(args.item.index);\n              if (message) {\n                message._update(args.item.data);\n              }\n            });\n\n            return list;\n          })\n          .catch(err => {\n            this.messagesListPromise = null;\n            if (this.services.syncClient.connectionState != 'disconnected') {\n              log.error('Failed to get messages object for channel', this.channel.sid, err);\n            }\n            log.debug('ERROR: Failed to get messages object for channel', this.channel.sid, err);\n            throw err;\n          });\n  }\n\n  public async unsubscribe() {\n    if (this.messagesListPromise) {\n      let entity = await this.messagesListPromise;\n      entity.close();\n      this.messagesListPromise = null;\n    }\n  }\n\n  /**\n   * Send Message to the channel\n   * @param {String} message - Message to post\n   * @param {any} attributes Message attributes\n   * @returns Returns promise which can fail\n   */\n  public async send(message: string | null, attributes: any = {}): Promise<MessageResponse> {\n    log.debug('Sending text message', message, attributes);\n\n    return await this.services.commandExecutor.mutateResource<SendMessageRequest, MessageResponse>(\n      'post',\n      this.channel.links.messages,\n      {\n        body: message || '',\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined,\n      }\n    );\n  }\n\n  /**\n   * Send Media Message to the channel\n   * @param {FormData | Channel#SendMediaOptions} mediaContent - Media content to post\n   * @param {any} attributes Message attributes\n   * @returns Returns promise which can fail\n   */\n  public async sendMedia(mediaContent: FormData | SendMediaOptions, attributes: any = {}) {\n    log.debug('Sending media message', mediaContent, attributes);\n\n    let media: McsMedia;\n    if (typeof FormData !== 'undefined'  && (mediaContent instanceof FormData)) {\n      log.debug('Sending media message as FormData', mediaContent, attributes);\n      media = await this.services.mcsClient.postFormData(mediaContent);\n    } else {\n      log.debug('Sending media message as SendMediaOptions', mediaContent, attributes);\n      let mediaOptions = mediaContent as SendMediaOptions;\n      if (!mediaOptions.contentType || !mediaOptions.media) {\n        throw new Error('Media content <Channel#SendMediaOptions> must contain non-empty contentType and media');\n      }\n      media = await this.services.mcsClient.post(mediaOptions.contentType, mediaOptions.media, null);\n    }\n\n    return await this.services.commandExecutor.mutateResource<SendMediaMessageRequest, MessageResponse>(\n      'post',\n      this.channel.links.messages,\n      {\n        media_sid: media.sid,\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n      }\n    );\n  }\n\n  /**\n   * Returns messages from channel using paginator interface\n   * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n   * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n   * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n   * @returns {Promise<Paginator<Message>>} last page of messages by default\n   */\n  public async getMessages(pageSize, anchor, direction) {\n    anchor = (typeof anchor !== 'undefined') ? anchor : 'end';\n    direction = direction || 'backwards';\n    return this._getMessages(pageSize, anchor, direction);\n  }\n\n  private async wrapPaginator(order, page, op) {\n    // We should swap next and prev page here, because of misfit of Sync and Chat paging conceptions\n    let shouldReverse = order === 'desc';\n\n    let np = () => page.nextPage().then(x => this.wrapPaginator(order, x, op));\n    let pp = () => page.prevPage().then(x => this.wrapPaginator(order, x, op));\n\n    return op(page.items).then(items => ({\n      items: items.sort((x, y) => { return x.index - y.index; }),\n      hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,\n      hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,\n      prevPage: shouldReverse ? np : pp,\n      nextPage: shouldReverse ? pp : np\n    }));\n  }\n\n  private _upsertMessage(index: number, value: any) {\n    const cachedMessage = this.messagesByIndex.get(index);\n    if (cachedMessage) {\n      return cachedMessage;\n    }\n\n    const links = {\n      self: `${this.channel.links.messages}/${value.sid}`,\n      conversation: this.channel.links.self,\n      messages_receipts: `${this.channel.links.messages}/${value.sid}/Receipts`,\n    };\n    const message = new Message(index, value, this.channel, links, this.configuration, this.services);\n    this.messagesByIndex.set(message.index, message);\n    message.on('updated',\n      (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n    return message;\n  }\n\n  /**\n   * Returns last messages from channel\n   * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n   * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n   * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n   * @returns {Promise<SyncPaginator<Message>>} last page of messages by default\n   * @private\n   */\n  private async _getMessages(pageSize, anchor, direction): Promise<SyncPaginator<Message>> {\n    anchor = (typeof anchor !== 'undefined') ? anchor : 'end';\n    pageSize = pageSize || 30;\n    const order = direction === 'backwards' ? 'desc' : 'asc';\n\n    return this.messagesListPromise\n               .then(messagesList => messagesList.getItems({\n                 from: anchor !== 'end' ? anchor : void (0),\n                 pageSize,\n                 order,\n                 limit: pageSize // @todo Limit equals pageSize by default in Sync. This is probably not ideal.\n               }))\n               .then(page => this.wrapPaginator(order, page\n                 , items => Promise.all(items.map(item => this._upsertMessage(item.index, item.data))))\n               );\n  }\n}\n\nexport { Messages };\n","import { Logger } from './logger';\n\nimport { Members } from './data/members';\nimport { Member, MemberUpdatedEventArgs, MemberUpdateReason } from './member';\nimport { Messages } from './data/messages';\nimport { Message, MessageUpdatedEventArgs, MessageUpdateReason } from './message';\n\nimport { UriBuilder, parseToNumber } from './util';\nimport { UserDescriptor } from './userdescriptor';\nimport { Users } from './data/users';\nimport { Paginator } from './interfaces/paginator';\nimport { Channels } from './data/channels';\nimport { McsClient } from '@twilio/mcs-client';\n\nimport { SyncClient } from 'twilio-sync';\nimport { TypingIndicator } from './services/typingindicator';\nimport { Network } from './services/network';\nimport { validateTypesAsync, custom, literal, nonEmptyString, nonNegativeInteger, objectSchema } from '@twilio/declarative-type-validator';\nimport { Configuration } from './configuration';\nimport { CommandExecutor } from './commandexecutor';\nimport { JoinChannelRequest, JoinChannelResponse } from './interfaces/commands/joinchannel';\nimport { EditChannelRequest } from './interfaces/commands/editchannel';\nimport { ChannelResponse } from './interfaces/commands/channel';\nimport { EditNotificationLevelRequest } from './interfaces/commands/editnotificationlevel';\nimport { EditLastConsumedMessageIndexRequest, EditLastConsumedMessageIndexResponse } from './interfaces/commands/editlastconsumedmessageindex';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype ChannelEvents = {\n  memberJoined: (member: Member) => void;\n  memberInvited: (member: Member) => void;\n  memberLeft: (member: Member) => void;\n  memberUpdated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  typingEnded: (member: Member) => void;\n  typingStarted: (member: Member) => void;\n  updated: (data: {\n    channel: Channel;\n    updateReasons: ChannelUpdateReason[];\n  }) => void;\n  removed: (channel: Channel) => void;\n};\n\nconst log = Logger.scope('Channel');\n\nconst fieldMappings = {\n  lastMessage: 'lastMessage',\n  attributes: 'attributes',\n  createdBy: 'createdBy',\n  dateCreated: 'dateCreated',\n  dateUpdated: 'dateUpdated',\n  friendlyName: 'friendlyName',\n  lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n  notificationLevel: 'notificationLevel',\n  sid: 'sid',\n  status: 'status',\n  type: 'type',\n  uniqueName: 'uniqueName',\n  state: 'state'\n};\n\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n\ninterface ChannelServices {\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface ChannelInternalState {\n  uniqueName: string;\n  status: ChannelStatus;\n  type: ChannelType;\n  attributes: any;\n  createdBy?: string;\n  dateCreated: Date;\n  dateUpdated: Date;\n  friendlyName: string;\n  lastConsumedMessageIndex: number | null;\n  lastMessage?: LastMessage;\n  notificationLevel?: NotificationLevel;\n  state?: ChannelState;\n}\n\ninterface ChannelDescriptor {\n  channel: string;\n  entityName: string;\n  uniqueName: string;\n  attributes: any;\n  createdBy?: string;\n  friendlyName: string;\n  lastConsumedMessageIndex: number;\n  dateCreated: any;\n  dateUpdated: any;\n  type: ChannelType;\n  notificationLevel?: NotificationLevel;\n}\n\ninterface ChannelLinks {\n  self: string;\n  messages: string;\n  participants: string;\n  invites: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a channel.\n */\ntype ChannelUpdateReason =\n  | 'attributes'\n  | 'createdBy'\n  | 'dateCreated'\n  | 'dateUpdated'\n  | 'friendlyName'\n  | 'lastConsumedMessageIndex'\n  | 'state'\n  | 'status'\n  | 'uniqueName'\n  | 'lastMessage'\n  | 'notificationLevel';\n\n/**\n * The status of the channel, relative to the client: whether\n * the channel has been `joined` or the client is\n * `notParticipating` in the channel or has been `invited` to\n * the channel.\n */\ntype ChannelStatus = 'unknown' | 'notParticipating' | 'invited' | 'joined';\n\n/**\n * Channel type.\n */\ntype ChannelType = 'public' | 'private';\n\n/**\n * The user's notification level for the channel. Determines\n * whether the currently logged-in user will receive pushes for events\n * in this channel. Can be either `muted` or `default`, where\n * `default` defers to the global service push configuration.\n */\ntype NotificationLevel = 'default' | 'muted';\n\n/**\n * The conversational state of the channel.\n */\ntype ChannelState = {\n  /**\n   * The current state.\n   */\n  current: 'active' | 'inactive' | 'closed',\n\n  /**\n   * Date at which the latest channel state update happened.\n   */\n  dateUpdated: Date\n};\n\ninterface ChannelUpdatedEventArgs {\n  channel: Channel;\n  updateReasons: ChannelUpdateReason[];\n}\n\n/**\n * These options can be passed to {@link Channel.sendMessage}.\n */\ninterface SendMediaOptions {\n  /**\n   * Content type of media.\n   */\n  contentType: string;\n\n  /**\n   * Content to post.\n   */\n  media: string | Buffer;\n}\n\n/**\n * Information about the last message of a channel.\n */\ninterface LastMessage {\n  /**\n   * Message's index.\n   */\n  index?: number;\n\n  /**\n   *  Message's creation date.\n   */\n  dateCreated?: Date;\n}\n\n/**\n * A channel represents a remote channel of communication between multiple Programmable Chat clients.\n */\n\nclass Channel extends ReplayEventEmitter<ChannelEvents> {\n  private readonly channelState: ChannelInternalState;\n  private statusSource: Channels.DataSource;\n\n  private entityPromise: Promise<any>;\n  private entityName: string;\n  private entity: any;\n  private messagesEntity: any;\n  private membersEntity: Members;\n  private readonly members: any;\n\n  /**\n   * Unique system identifier of the channel.\n   */\n  public readonly sid: string;\n  public readonly links: ChannelLinks;\n  private readonly configuration: Configuration;\n  private readonly services: ChannelServices;\n\n  /**\n   * @internal\n   */\n  constructor(\n    descriptor: ChannelDescriptor,\n    sid: string,\n    links: ChannelLinks,\n    configuration: Configuration,\n    services: ChannelServices\n  ) {\n    super();\n\n    this.sid = sid;\n    this.links = links;\n    this.configuration = configuration;\n    this.services = services;\n\n    let attributes = descriptor.attributes || {};\n    let createdBy = descriptor.createdBy;\n    let dateCreated = parseTime(descriptor.dateCreated);\n    let dateUpdated = parseTime(descriptor.dateUpdated);\n    let friendlyName = descriptor.friendlyName || null;\n    let lastConsumedMessageIndex =\n      Number.isInteger(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n    let uniqueName = descriptor.uniqueName || null;\n\n    try {\n      JSON.stringify(attributes);\n    } catch (e) {\n      throw new Error('Attributes must be a valid JSON object.');\n    }\n\n    this.entityName = descriptor.channel;\n    this.channelState = {\n      uniqueName,\n      status: 'notParticipating',\n      type: descriptor.type,\n      attributes,\n      createdBy,\n      dateCreated,\n      dateUpdated,\n      friendlyName,\n      lastConsumedMessageIndex\n    };\n\n    if (descriptor.notificationLevel) {\n      this.channelState.notificationLevel = descriptor.notificationLevel;\n    }\n\n    const membersLinks = {\n      participants: this.links.participants\n    };\n\n    this.members = new Map();\n    this.membersEntity = new Members(this, this.members, membersLinks, this.configuration, this.services);\n    this.membersEntity.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n    this.membersEntity.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n    this.membersEntity.on('memberUpdated',\n      (args: MemberUpdatedEventArgs) => this.emit('memberUpdated', args));\n\n    this.messagesEntity = new Messages(this, this.configuration, services);\n    this.messagesEntity.on('messageAdded', message => this._onMessageAdded(message));\n    this.messagesEntity.on('messageUpdated',\n      (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n    this.messagesEntity.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n  }\n\n  /**\n   * Fired when a member has joined the channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - member that joined the channel\n   * @event\n   */\n  static readonly memberJoined = 'memberJoined';\n\n  /**\n   * Fired when a member has left the channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - member that left the channel\n   * @event\n   */\n  static readonly memberLeft = 'memberLeft';\n\n  /**\n   * Fired when data of a member has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Member} `member` - member that has received the update\n   *     * {@link MemberUpdateReason}[] `updateReasons` - array of reasons for update\n   * @event\n   */\n  static readonly memberUpdated = 'memberUpdated';\n\n  /**\n   * Fired when a new message has been added to the channel.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - message that has been added\n   * @event\n   */\n  static readonly messageAdded = 'messageAdded';\n\n  /**\n   * Fired when message is removed from the channel's message list.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - message that has been removed\n   * @event\n   */\n  static readonly messageRemoved = 'messageRemoved';\n\n  /**\n   * Fired when data of a message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} `message` - message that has received the update\n   *     * {@link MessageUpdateReason}[] `updateReasons` - array of reasons for update\n   * @event\n   */\n  static readonly messageUpdated = 'messageUpdated';\n\n  /**\n   * Fired when a member has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member that has stopped typing\n   * @event\n   */\n  static readonly typingEnded = 'typingEnded';\n\n  /**\n   * Fired when a member has started typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member that has started typing\n   * @event\n   */\n  static readonly typingStarted = 'typingStarted';\n\n  /**\n   * Fired when the data of the message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Channel} `channel` - channel that has received the update\n   *     * {@link ChannelUpdateReason}[] `updateReasons` - array of reasons for update\n   * @event\n   */\n  static readonly updated = 'updated';\n\n  /**\n   * Fired when the channel was destroyed or the currently-logged-in user has left private channel.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - channel that has been removed\n   * @event\n   */\n  static readonly removed = 'removed';\n\n  /**\n   * Delivery status of the channel.\n   */\n  public get status(): ChannelStatus { return this.channelState.status; }\n\n  /**\n   * MemberType of the channel.\n   */\n  public get type(): ChannelType { return this.channelState.type; }\n\n  /**\n   * Unique name of the channel.\n   */\n  public get uniqueName(): string { return this.channelState.uniqueName; }\n\n  /**\n   * Signifies whether the channel is private.\n   */\n  public get isPrivate(): boolean { return this.channelState.type === 'private'; }\n\n  /**\n   * Name of the channel.\n   */\n  public get friendlyName(): string { return this.channelState.friendlyName; }\n\n  /**\n   * Date this channel was last updated on.\n   */\n  public get dateUpdated(): any { return this.channelState.dateUpdated; }\n\n  /**\n   * Date this channel was created on.\n   */\n  public get dateCreated(): any { return this.channelState.dateCreated; }\n\n  /**\n   * Identity of the user that created this channel.\n   */\n  public get createdBy(): string { return this.channelState.createdBy; }\n\n  /**\n   * Custom attributes of the channel.\n   */\n  public get attributes(): Object { return this.channelState.attributes; }\n\n  /**\n   * Index of the last message the user has read in this channel.\n   */\n  public get lastConsumedMessageIndex(): number | null { return this.channelState.lastConsumedMessageIndex; }\n\n  /**\n   * Last message sent to this channel.\n   */\n  public get lastMessage(): LastMessage { return this.channelState.lastMessage; }\n\n  /**\n   * User notification level for this channel.\n   */\n  public get notificationLevel(): NotificationLevel { return this.channelState.notificationLevel; }\n\n  /**\n   * State of the channel.\n   */\n  public get state(): ChannelState | undefined { return this.channelState.state; }\n\n  /**\n   * Load and subscribe to this channel and do not subscribe to its members and messages.\n   * This or _subscribeStreams will need to be called before any events on channel will fire.\n   * @internal\n   */\n  async _subscribe() { // protected? private? used by others in module\n    if (this.entityPromise) { return this.entityPromise; }\n\n    return this.entityPromise = this.entityPromise ||\n      this.services.syncClient.document({ id: this.entityName, mode: 'open_existing' })\n        .then(entity => {\n          this.entity = entity;\n          this.entity.on('updated', args => { this._update(args.data); });\n          this.entity.on('removed', () => this.emit('removed', this));\n          this._update(this.entity.data);\n          return entity;\n        })\n        .catch(err => {\n          this.entity = null;\n          this.entityPromise = null;\n          if (this.services.syncClient.connectionState != 'disconnected') {\n            log.error('Failed to get channel object', err);\n          }\n          log.debug('ERROR: Failed to get channel object', err);\n          throw err;\n        });\n  }\n\n  /**\n   * Load the attributes of this channel and instantiate its members and messages.\n   * This or _subscribe will need to be called before any events on the channel will fire.\n   * This will need to be called before any events on members or messages will fire\n   * @internal\n   */\n  private async _subscribeStreams() {\n    try {\n      await this._subscribe();\n      log.trace('_subscribeStreams, this.entity.data=', this.entity.data);\n      const messagesObjectName = this.entity.data.messages;\n      const rosterObjectName = this.entity.data.roster;\n      await Promise.all([\n        this.messagesEntity.subscribe(messagesObjectName),\n        this.membersEntity.subscribe(rosterObjectName)\n      ]);\n    } catch (err) {\n      if (this.services.syncClient.connectionState !== 'disconnected') {\n        log.error('Failed to subscribe on channel objects', this.sid, err);\n      }\n      log.debug('ERROR: Failed to subscribe on channel objects', this.sid, err);\n      throw err;\n    }\n  }\n\n  /**\n   * Stop listening for and firing events on this channel.\n   * @internal\n   */\n  private async _unsubscribe() {\n    // Keep our subscription to public channels objects\n    if (this.isPrivate && this.entity) {\n      await this.entity.close();\n      this.entity = null;\n      this.entityPromise = null;\n    }\n\n    return Promise.all([\n      this.membersEntity.unsubscribe(),\n      this.messagesEntity.unsubscribe()\n    ]);\n  }\n\n  /**\n   * Set channel status.\n   * @internal\n   */\n  _setStatus(status: ChannelStatus, source: Channels.DataSource) {\n    this.statusSource = source;\n\n    if (this.channelState.status === status) { return; }\n\n    this.channelState.status = status;\n\n    if (status === 'joined') {\n      this._subscribeStreams()\n          .catch(err => {\n            log.debug('ERROR while setting channel status ' + status, err);\n            if (this.services.syncClient.connectionState !== 'disconnected') {\n              throw err;\n            }\n          });\n    } else if (status === 'invited') {\n      this._subscribe()\n          .catch(err => {\n            log.debug('ERROR while setting channel status ' + status, err);\n            if (this.services.syncClient.connectionState !== 'disconnected') {\n              throw err;\n            }\n          });\n    } else if (this.entityPromise) {\n      this._unsubscribe().catch(err => {\n        log.debug('ERROR while setting channel status ' + status, err);\n        if (this.services.syncClient.connectionState !== 'disconnected') {\n          throw err;\n        }\n      });\n    }\n  }\n\n  /**\n   * Update source of the channel.\n   * @internal\n   */\n  _statusSource(): Channels.DataSource {\n    return this.statusSource;\n  }\n\n  private static preprocessUpdate(update, channelSid) {\n    try {\n      if (typeof update.attributes === 'string') {\n        update.attributes = JSON.parse(update.attributes);\n      } else if (update.attributes) {\n        JSON.stringify(update.attributes);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);\n      update.attributes = {};\n    }\n\n    try {\n      if (update.dateCreated) {\n        update.dateCreated = new Date(update.dateCreated);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);\n      delete update.dateCreated;\n    }\n\n    try {\n      if (update.dateUpdated) {\n        update.dateUpdated = new Date(update.dateUpdated);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);\n      delete update.dateUpdated;\n    }\n\n    try {\n      if (update.lastMessage && update.lastMessage.timestamp) {\n        update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);\n      delete update.lastMessage.timestamp;\n    }\n  }\n\n  /**\n   * Update the local channel object with new values.\n   * @internal\n   */\n  _update(update) {\n    log.trace('_update', update);\n\n    Channel.preprocessUpdate(update, this.sid);\n    const updateReasons = new Set<ChannelUpdateReason>();\n\n    for (const key of Object.keys(update)) {\n      const localKey = fieldMappings[key];\n\n      if (!localKey) {\n        continue;\n      }\n\n      switch (localKey) {\n        case fieldMappings.status:\n          if (!update.status || update.status === 'unknown'\n            || this.channelState.status === update.status) {\n            break;\n          }\n\n          this.channelState.status = update.status;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.attributes:\n          if (isEqual(this.channelState.attributes, update.attributes)) {\n            break;\n          }\n\n          this.channelState.attributes = update.attributes;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.lastConsumedMessageIndex:\n          if (update.lastConsumedMessageIndex === undefined\n            || update.lastConsumedMessageIndex === this.channelState.lastConsumedMessageIndex) {\n            break;\n          }\n\n          this.channelState.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.lastMessage:\n          if (this.channelState.lastMessage && !update.lastMessage) {\n            delete this.channelState.lastMessage;\n            updateReasons.add(localKey);\n\n            break;\n          }\n\n          this.channelState.lastMessage = this.channelState.lastMessage || {};\n\n          if (update.lastMessage?.index !== undefined\n            && update.lastMessage.index !== this.channelState.lastMessage.index) {\n            this.channelState.lastMessage.index = update.lastMessage.index;\n            updateReasons.add(localKey);\n          }\n\n          if (update.lastMessage?.timestamp !== undefined\n            && this.channelState.lastMessage?.dateCreated?.getTime() !== update.lastMessage.timestamp.getTime()) {\n            this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n            updateReasons.add(localKey);\n          }\n\n          if (isEqual(this.channelState.lastMessage, {})) {\n            delete this.channelState.lastMessage;\n          }\n\n          break;\n        case fieldMappings.state:\n          const state = update.state || undefined;\n\n          if (state !== undefined) {\n            state.dateUpdated = new Date(state.dateUpdated);\n          }\n\n          if (isEqual(this.channelState.state, state)) {\n            break;\n          }\n\n          this.channelState.state = state;\n          updateReasons.add(localKey);\n\n          break;\n        default:\n          const isDate = update[key] instanceof Date;\n          const keysMatchAsDates = isDate && this.channelState[localKey]?.getTime() === update[key].getTime();\n          const keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n\n          if (keysMatchAsDates || keysMatchAsNonDates) {\n            break;\n          }\n\n          this.channelState[localKey] = update[key];\n          updateReasons.add(localKey);\n      }\n    }\n\n    if (updateReasons.size > 0) {\n      this.emit('updated', { channel: this, updateReasons: [...updateReasons] });\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onMessageAdded(message) {\n    for (let member of this.members.values()) {\n      if (member.identity === message.author) {\n        member._endTyping();\n        break;\n      }\n    }\n    this.emit('messageAdded', message);\n  }\n\n  private async _setLastConsumedMessageIndex(index: number | null): Promise<number> {\n    const result = await this.services.commandExecutor.mutateResource<\n      EditLastConsumedMessageIndexRequest,\n      EditLastConsumedMessageIndexResponse\n    >(\n      'post',\n      `${this.configuration.links.myConversations}/${this.sid}`,\n      {\n        last_consumed_message_index: index\n      }\n    );\n\n    return result.unread_messages_count;\n  }\n\n  /**\n   * Add a member to the channel by its identity.\n   * @param identity Identity of the Client to add.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async add(identity: string): Promise<void> {\n    await this.membersEntity.add(identity);\n  }\n\n  /**\n   * Advance the channel's last consumed message index to the current read horizon.\n   * Rejects if the user is not a member of the channel.\n   * Last consumed message index is updated only if the new index value is higher than the previous.\n   * @param index Message index to advance to.\n   * @return Resulting unread messages count in the channel.\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async advanceLastConsumedMessageIndex(index: number): Promise<number> {\n    await this._subscribeStreams();\n\n    if (index < this.lastConsumedMessageIndex) {\n      return await this._setLastConsumedMessageIndex(this.lastConsumedMessageIndex);\n    }\n\n    return await this._setLastConsumedMessageIndex(index);\n  }\n\n  /**\n   * Decline an invitation to the channel and unsubscribe from its events.\n   */\n  public async decline(): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource(\n      'delete',\n      `${this.links.invites}/${this.configuration.userIdentity}`\n    );\n\n    return this;\n  }\n\n  /**\n   * Delete the channel and unsubscribe from its events.\n   */\n  public async delete(): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource(\n      'delete',\n      this.links.self,\n    );\n\n    return this;\n  }\n\n  /**\n   * Get the custom attributes of this Channel.\n   *\n   * *Note: {@link Channel.attributes} will be empty for public channels until this function is called.*\n   */\n  public async getAttributes(): Promise<any> {\n    await this._subscribe();\n    return this.attributes;\n  }\n\n  /**\n   * Return messages from the channel using the paginator interface.\n   * @param pageSize Number of messages to return in a single chunk. Default is 30.\n   * @param anchor Index of the newest message to fetch. Default is from the end.\n   * @param direction Query direction. By default it queries backwards\n   * from newer to older. The `\"forward\"` value will query in the opposite direction.\n   * @return A page of messages.\n   */\n  @validateTypesAsync(\n    ['undefined', nonNegativeInteger],\n    ['undefined', nonNegativeInteger],\n    ['undefined', literal('backwards', 'forward')]\n  )\n  public async getMessages(pageSize?: number, anchor?: number, direction?: 'backwards' | 'forward'): Promise<Paginator<Message>> {\n    await this._subscribeStreams();\n    return await this.messagesEntity.getMessages(pageSize, anchor, direction);\n  }\n\n  /**\n   * Get a list of all the members who are joined to this channel.\n   */\n  public async getMembers(): Promise<Member[]> {\n    await this._subscribeStreams();\n    return await this.membersEntity.getMembers();\n  }\n\n  /**\n   * Get channel members count.\n   *\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not\n   * provide real time events for counter values changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any core application\n   * logic based on these counters being accurate in real time.\n   */\n  public async getMembersCount(): Promise<number> {\n    const url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n    const response = await this.services.network.get(url);\n\n    return response.body.participants_count;\n  }\n\n  /**\n   * Get a member by its SID.\n   * @param memberSid Member SID.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getMemberBySid(memberSid: string): Promise<Member> {\n    return await this.membersEntity.getMemberBySid(memberSid);\n  }\n\n  /**\n   * Get a member by its identity.\n   * @param identity Member identity.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getMemberByIdentity(identity: string): Promise<Member> {\n    return await this.membersEntity.getMemberByIdentity(identity);\n  }\n\n  /**\n   * Get the total message count in the channel.\n   *\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not\n   * provide real time events for counter values changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any core application\n   * logic based on these counters being accurate in real time.\n   */\n  public async getMessagesCount(): Promise<number> {\n    const url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n    const response = await this.services.network.get(url);\n\n    return response.body.messages_count;\n  }\n\n  /**\n   * Get unread messages count for the user if they are a member of this channel.\n   * Rejects if the user is not a member of the channel.\n   *\n   * Use this method to obtain the number of unread messages together with\n   * {@link Channel.updateLastConsumedMessageIndex} instead of relying on the\n   * message indices which may have gaps. See {@link Message.index} for details.\n   *\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also be possibly incorrect for a few seconds. The Programmable Chat system does not\n   * provide real time events for counter values changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any core application\n   * logic based on these counters being accurate in real time.\n   */\n  public async getUnconsumedMessagesCount(): Promise<number | null> {\n    const url = new UriBuilder(this.configuration.links.myConversations).path(this.sid).build();\n    const response = await this.services.network.get(url);\n\n    if (response.body.conversation_sid !== this.sid) {\n      throw new Error('Channel was not found in the user channels list');\n    }\n\n    const unreadMessageCount = response.body.unread_messages_count;\n\n    if (typeof unreadMessageCount === 'number') {\n      return unreadMessageCount;\n    }\n\n    return null;\n  }\n\n  /**\n   * Invite a user to the channel by their identity.\n   * @param identity Identity of the user.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async invite(identity: string): Promise<void> {\n    await this.membersEntity.invite(identity);\n  }\n\n  /**\n   * Join the channel and subscribe to its events.\n   */\n  public async join(): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource<JoinChannelRequest, JoinChannelResponse>(\n      'post',\n      this.links.participants,\n      {\n        identity: this.configuration.userIdentity\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Leave the channel.\n   */\n  public async leave(): Promise<Channel> {\n    if (this.channelState.status === 'joined') {\n      await this.services.commandExecutor.mutateResource(\n        'delete',\n        `${this.links.participants}/${this.configuration.userIdentity}`,\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Remove a member from the channel. When a string is passed as the argument, it will assume that the string is an identity.\n   * @param member Identity or the member object to remove.\n   */\n  @validateTypesAsync([nonEmptyString, Member])\n  public async removeMember(member: string | Member): Promise<void> {\n    await this.membersEntity.remove(typeof member === 'string' ? member : member.sid);\n  }\n\n  /**\n   * Send a message to the channel.\n   * @param message Message body for the text message,\n   * `FormData` or {@link Channel.MediaOptions) for media content. Sending FormData is supported only with the browser engine.\n   * @param messageAttributes Attributes for the message.\n   * @return Index of the new message.\n   */\n  @validateTypesAsync(\n    [\n      'string',\n      literal(null),\n      // Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\n      custom((value) => [value instanceof FormData, 'an instance of FormData']),\n      objectSchema('media options', {\n        contentType: [nonEmptyString, 'undefined'],\n        media: custom((value) => {\n          let isValid = (typeof value === 'string' && value.length > 0) || value instanceof Uint8Array || value instanceof ArrayBuffer;\n\n          if (typeof Blob === 'function') {\n            isValid = isValid || value instanceof Blob;\n          }\n\n          return [\n            isValid,\n            'a non-empty string, an instance of Buffer or an instance of Blob'\n          ];\n        })\n      })\n    ],\n    ['undefined', 'string', 'number', 'boolean', 'object', literal(null)]\n  )\n  public async sendMessage(message: string | FormData | SendMediaOptions | null, messageAttributes?: any): Promise<number> {\n    if (typeof message === 'string' || message === null) {\n      const response = await this.messagesEntity.send(message, messageAttributes);\n      return parseToNumber(response.index);\n    }\n\n    const response = await this.messagesEntity.sendMedia(message, messageAttributes);\n    return parseToNumber(response.index);\n  }\n\n  /**\n   * Set last consumed message index of the channel to the index of the last known message.\n   * @return Resulting unread messages count in the channel.\n   */\n  public async setAllMessagesConsumed(): Promise<number> {\n    await this._subscribeStreams();\n    const messagesPage = await this.getMessages(1);\n    if (messagesPage.items.length > 0) {\n      return this.advanceLastConsumedMessageIndex(messagesPage.items[0].index);\n    }\n    return Promise.resolve(0);\n  }\n\n  /**\n   * Set all messages in the channel unread.\n   * @return Resulting unread messages count in the channel.\n   */\n  public async setNoMessagesConsumed(): Promise<number> {\n    await this._subscribeStreams();\n    return await this._setLastConsumedMessageIndex(null);\n  }\n\n  /**\n   * Set user notification level for this channel.\n   * @param notificationLevel New user notification level.\n   */\n  @validateTypesAsync(literal('default', 'muted'))\n  public async setUserNotificationLevel(notificationLevel: NotificationLevel): Promise<void> {\n    await this.services.commandExecutor.mutateResource<EditNotificationLevelRequest>(\n      'post',\n      `${this.configuration.links.myConversations}/${this.sid}`,\n      {\n        notification_level: notificationLevel\n      }\n    );\n  }\n\n  /**\n   * Send a notification to the server indicating that this client is currently typing in this channel.\n   * Typing ended notification is sent after a while automatically, but by calling this method again you ensure that typing ended is not received.\n   */\n  public typing(): Promise<void> {\n    return this.services.typingIndicator.send(this.sid);\n  }\n\n  /**\n   * Update the attributes of the channel.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource<EditChannelRequest, ChannelResponse>(\n      'post',\n      this.links.self,\n      { attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined }\n    );\n\n    return this;\n  }\n\n  /**\n   * Update the friendly name of the channel.\n   * @param friendlyName New friendly name.\n   */\n  @validateTypesAsync('string')\n  public async updateFriendlyName(friendlyName: string): Promise<Channel> {\n    if (this.channelState.friendlyName !== friendlyName) {\n      await this.services.commandExecutor.mutateResource<EditChannelRequest, ChannelResponse>(\n        'post',\n        this.links.self,\n        { friendly_name: friendlyName }\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the last consumed message index to the current read horizon.\n   * @param index Message index to set as last consumed.\n   * If null is provided, then the behavior is identical to {@link Channel.setNoMessagesConsumed}.\n   * @returns Resulting unread messages count in the channel.\n   */\n  @validateTypesAsync([literal(null), nonNegativeInteger])\n  public async updateLastConsumedMessageIndex(index: number | null): Promise<number> {\n    await this._subscribeStreams();\n    return await this._setLastConsumedMessageIndex(index);\n  }\n\n  /**\n   * Update the unique name of the channel.\n   * @param uniqueName New unique name for the channel. Setting unique name to null removes it.\n   */\n  @validateTypesAsync(['string', literal(null)])\n  public async updateUniqueName(uniqueName: string | null): Promise<Channel> {\n    if (this.channelState.uniqueName !== uniqueName) {\n      if (!uniqueName) {\n        uniqueName = '';\n      }\n\n      await this.services.commandExecutor.mutateResource<EditChannelRequest, ChannelResponse>(\n        'post',\n        this.links.self,\n        { unique_name: uniqueName }\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Get user descriptors of this channel.\n   */\n  public async getUserDescriptors(): Promise<Paginator<UserDescriptor>> {\n    return await this.services.users.getChannelUserDescriptors(this.sid);\n  }\n}\n\nexport {\n  ChannelDescriptor,\n  Channel,\n  ChannelType,\n  ChannelUpdateReason,\n  ChannelStatus,\n  NotificationLevel,\n  ChannelState,\n  ChannelUpdatedEventArgs,\n  SendMediaOptions,\n  LastMessage\n};\n","class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve;\n  private _reject;\n\n  public current: T;\n\n  constructor() {\n    this._promise = new Promise<T>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  public get promise(): Promise<T> { return this._promise; }\n\n  update(value: T) {\n    this._resolve(value);\n  }\n\n  set(value: T) {\n    this.current = value;\n    this._resolve(value);\n  }\n\n  fail(e) {\n    this._reject(e);\n  }\n}\n\nexport { Deferred };\n","import { Logger } from '../logger';\nimport {\n  Channel,\n  ChannelUpdatedEventArgs,\n  ChannelUpdateReason\n} from '../channel';\n\nimport { SyncMap, SyncClient, SyncMapItem } from 'twilio-sync';\nimport { ChannelDescriptor } from '../channeldescriptor';\nimport { Users } from './users';\nimport { Network } from '../services/network';\nimport { TypingIndicator } from '../services/typingindicator';\nimport { McsClient } from '@twilio/mcs-client';\nimport { Deferred } from '../util/deferred';\nimport { Member, MemberUpdatedEventArgs, MemberUpdateReason } from '../member';\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason\n} from '../message';\nimport { UriBuilder } from '../util';\nimport { Configuration } from '../configuration';\nimport { CommandExecutor } from '../commandexecutor';\nimport { CreateChannelRequest } from '../interfaces/commands/createchannel';\nimport { ChannelResponse } from '../interfaces/commands/channel';\nimport { SyncPaginator } from '../syncpaginator';\nimport isEqual from 'lodash.isequal';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype ChannelsEvents = {\n  channelAdded: (channel: Channel) => void;\n  channelJoined: (channel: Channel) => void;\n  channelInvited: (channel: Channel) => void;\n  channelLeft: (channel: Channel) => void;\n  channelRemoved: (channel: Channel) => void;\n  channelUpdated: (data: {\n    channel: Channel;\n    updateReasons: ChannelUpdateReason[];\n  }) => void;\n  memberJoined: (member: Member) => void;\n  memberLeft: (member: Member) => void;\n  memberUpdated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  typingEnded: (member: Member) => void;\n  typingStarted: (member: Member) => void;\n};\n\nconst log = Logger.scope('Channels');\n\nexport interface ChannelsServices {\n  syncClient: SyncClient;\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  commandExecutor: CommandExecutor;\n}\n\n/**\n * Represents channels collection\n * {@see Channel}\n */\nclass Channels extends ReplayEventEmitter<ChannelsEvents> {\n\n  public readonly channels: Map<string, Channel> = new Map<string, Channel>();\n  private readonly tombstones: Set<string> = new Set<string>();\n  private myChannelsFetched = false;\n  public myChannelsRead: Deferred<boolean> = new Deferred<boolean>();\n\n  constructor(\n    private readonly configuration: Configuration,\n    private readonly services: ChannelsServices\n  ) {\n    super();\n  }\n\n  private async getMap(): Promise<SyncMap> {\n    return await this.services.syncClient.map({\n      id: this.configuration.myConversations,\n      mode: 'open_existing'\n    });\n  }\n\n  /**\n   * Add channel to server\n   * @private\n   * @returns {Promise<Channel>} Channel\n   */\n  public async addChannel(options): Promise<Channel> {\n    let attributes;\n    if (typeof options.attributes === 'undefined') {\n      attributes = {};\n    } else {\n      attributes = options.attributes;\n    }\n\n    const response = await this.services.commandExecutor.mutateResource<CreateChannelRequest, ChannelResponse>(\n      'post',\n      this.configuration.links.conversations,\n      {\n        type: options.isPrivate ? 'private' : 'public',\n        unique_name: options.uniqueName,\n        friendly_name: options.friendlyName,\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined,\n      }\n    );\n\n    const channelSid = response.sid || null;\n    const channelDocument = response.sync_objects.conversation || null;\n    const links = {\n      self: response.url,\n      ...response.links\n    };\n\n    let existingChannel = this.channels.get(channelSid);\n    if (existingChannel) {\n      await existingChannel._subscribe();\n      return existingChannel;\n    }\n\n    let channel = new Channel(\n      {\n        channel: channelDocument,\n\n        entityName: null,\n        uniqueName: null,\n        attributes: null,\n        createdBy: null,\n        friendlyName: null,\n        lastConsumedMessageIndex: null,\n        type: options.isPrivate ? 'private' : 'public',\n        dateCreated: null,\n        dateUpdated: null\n      },\n      channelSid,\n      links,\n      this.configuration,\n      this.services\n    );\n\n    this.channels.set(channel.sid, channel);\n    this.registerForEvents(channel);\n\n    await channel._subscribe();\n    this.emit('channelAdded', channel);\n    return channel;\n  }\n\n  /**\n   * Fetch channels list and instantiate all necessary objects\n   */\n  public async fetchChannels(): Promise<Channels> {\n    try {\n      const map = await this.getMap();\n\n      map.on('itemAdded', args => {\n        log.debug(`itemAdded: ${args.item.key}`);\n        this.upsertChannel('sync', args.item.key, args.item.data);\n      });\n\n      map.on('itemRemoved', args => {\n        log.debug(`itemRemoved: ${args.key}`);\n        const sid = args.key;\n\n        if (!this.myChannelsFetched) {\n          this.tombstones.add(sid);\n        }\n\n        const channel = this.channels.get(sid);\n\n        if (!channel) {\n          return;\n        }\n\n        if (channel.status === 'joined' || channel.status === 'invited') {\n          channel._setStatus('notParticipating', 'sync');\n          this.emit('channelLeft', channel);\n        }\n\n        if (channel.isPrivate) {\n          this.channels.delete(sid);\n          this.emit('channelRemoved', channel);\n          channel.emit('removed', channel);\n        }\n      });\n\n      map.on('itemUpdated', args => {\n        log.debug(`itemUpdated: ${args.item.key}`);\n        this.upsertChannel('sync', args.item.key, args.item.data);\n      });\n\n      const myChannels = await this._fetchMyChannels();\n      const upserts = [];\n\n      for (const channel of myChannels) {\n        upserts.push(this.upsertChannel('rest', channel.channel_sid, channel));\n      }\n\n      this.myChannelsRead.set(true);\n\n      await Promise.all(upserts);\n\n      this.myChannelsFetched = true;\n      this.tombstones.clear();\n\n      log.debug('The channels list has been successfully fetched');\n\n      return this;\n    } catch (error) {\n      const errorMessage = 'Failed to fetch the channels list';\n\n      if (this.services.syncClient.connectionState !== 'disconnected') {\n        log.error(errorMessage, error);\n      }\n\n      log.debug(`ERROR: ${errorMessage}`, error);\n\n      throw error;\n    }\n  }\n\n  private async _wrapPaginator(page, op) {\n    return op(page.items)\n      .then(items => ({\n        items: items,\n        hasNextPage: page.hasNextPage,\n        hasPrevPage: page.hasPrevPage,\n        nextPage: () => page.nextPage().then(x => this._wrapPaginator(x, op)),\n        prevPage: () => page.prevPage().then(x => this._wrapPaginator(x, op))\n      }));\n  }\n\n  public async getChannels(args): Promise<SyncPaginator<Channel>> {\n    const channelsMap = await this.getMap();\n    const page = await channelsMap.getItems(args);\n    return this._wrapPaginator(page\n      , items => Promise.all(items.map((item: SyncMapItem) => this.upsertChannel('sync', item.key, item.data))));\n  }\n\n  public async getChannel(sid: string): Promise<Channel> {\n    const channelsMap = await this.getMap();\n    const page = await channelsMap.getItems({ key: sid });\n    const items = page.items.map((item: SyncMapItem) => this.upsertChannel('sync', item.key, item.data));\n    return items.length > 0 ? items[0] : null;\n  }\n\n  public async pushChannel(descriptor: Channel | ChannelDescriptor): Promise<Channel> {\n    const sid = descriptor.sid;\n    const data = {\n      entityName: null,\n      lastConsumedMessageIndex: descriptor.lastConsumedMessageIndex,\n      type: descriptor.type,\n      status: descriptor.status,\n      friendlyName: descriptor.friendlyName,\n      dateUpdated: descriptor.dateUpdated,\n      dateCreated: descriptor.dateCreated,\n      uniqueName: descriptor.uniqueName,\n      createdBy: descriptor.createdBy,\n      attributes: descriptor.attributes,\n      channel: descriptor instanceof ChannelDescriptor ? descriptor.channel : null,\n      notificationLevel: descriptor.notificationLevel,\n      sid: sid\n    };\n\n    return await this.upsertChannel('chat', sid, data);\n  }\n\n  private _updateChannel(source: Channels.DataSource, channel: Channel, data): void {\n    const areSourcesDifferent = channel._statusSource() !== undefined && source !== channel._statusSource();\n    const isChannelSourceSync = source !== 'rest' || channel._statusSource() === 'sync';\n\n    if (areSourcesDifferent && isChannelSourceSync && source !== 'sync') {\n      log.trace('upsertChannel: the channel is known from sync and it came from chat, ignoring', {\n        sid: channel.sid,\n        data: data.status,\n        channel: channel.status\n      });\n\n      return;\n    }\n\n    if (['joined', 'invited'].includes(data.status) && channel.status !== data.status) {\n      channel._setStatus(data.status, source);\n\n      let updateData: any = {};\n\n      if (data.notificationLevel !== undefined) {\n        updateData.notificationLevel = data.notificationLevel;\n      }\n\n      if (data.lastConsumedMessageIndex !== undefined) {\n        updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n      }\n\n      if (!isEqual(updateData, {})) {\n        channel._update(updateData);\n      }\n\n      channel._subscribe().then(() => {\n        this.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', channel);\n      });\n\n      return;\n    }\n\n    if (['joined', 'invited'].includes(channel.status) && data.status === 'notParticipating') {\n      channel._setStatus('notParticipating', source);\n      channel._update(data);\n      channel._subscribe().then(() => {\n        this.emit('channelLeft', channel);\n      });\n\n      return;\n    }\n\n    if (data.type === 'private' && data.status === 'notParticipating') {\n      channel._subscribe();\n\n      return;\n    }\n\n    channel._update(data);\n  }\n\n  private async upsertChannel(source: Channels.DataSource, sid: string, data): Promise<Channel> {\n    log.trace(`upsertChannel called for ${sid}`, data);\n    const channel = this.channels.get(sid);\n\n    // If the channel is known, update it\n    if (channel) {\n      log.trace(\n        `upsertChannel: the channel ${channel.sid} is known;` +\n        `its status is known from source ${channel._statusSource()} ` +\n        `and the update came from source ${source}`,\n        channel\n      );\n      this._updateChannel(source, channel, data);\n\n      await channel._subscribe();\n      return channel;\n    }\n\n    // If the channel is deleted, ignore it\n    if (['chat', 'rest'].includes(source) && this.tombstones.has(sid)) {\n      log.trace('upsertChannel: the channel is deleted but reappeared again from chat, ignoring', sid);\n\n      return null;\n    }\n\n    // If the channel is unknown, fetch it\n    log.trace(`upsertChannel: creating a local channel object with sid ${sid}`, data);\n    const baseLink = `${this.configuration.links.conversations}/${sid}`;\n    const links = {\n      self: baseLink,\n      messages: `${baseLink}/Messages`,\n      participants: `${baseLink}/Participants`,\n      invites: `${baseLink}/Invites`\n    };\n    const newChannel = new Channel(data, sid, links, this.configuration, this.services);\n    this.channels.set(sid, newChannel);\n\n    await newChannel._subscribe();\n    this.registerForEvents(newChannel);\n    this.emit('channelAdded', newChannel);\n\n    if (['joined', 'invited'].includes(data.status)) {\n      newChannel._setStatus(data.status, source);\n      this.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', newChannel);\n    }\n\n    return newChannel;\n  }\n\n  private onChannelRemoved(sid: string) {\n    let channel = this.channels.get(sid);\n    if (channel) {\n      this.channels.delete(sid);\n      this.emit('channelRemoved', channel);\n    }\n  }\n\n  private registerForEvents(channel) {\n    channel.on('removed', () => this.onChannelRemoved(channel.sid));\n    channel.on('updated', (args: ChannelUpdatedEventArgs) => this.emit('channelUpdated', args));\n    channel.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n    channel.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n    channel.on('memberUpdated', (args: MemberUpdatedEventArgs) => this.emit('memberUpdated', args));\n    channel.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n    channel.on('messageUpdated', (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n    channel.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n    channel.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n    channel.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n  }\n\n  private async _fetchMyChannels() {\n    let channels = [];\n    let pageToken: null | string = null;\n\n    do {\n      const url = new UriBuilder(this.configuration.links.myConversations);\n\n      if (pageToken) {\n        url.arg('PageToken', pageToken);\n      }\n\n      const response = await this.services.network.get(url.build());\n      const preProcessedChannels = response.body.conversations.map(\n        (channelDescriptor) => ({\n          descriptor: channelDescriptor,\n          channel_sid: channelDescriptor.conversation_sid,\n          status: channelDescriptor.status,\n          channel: channelDescriptor.sync_objects.conversation,\n          messages: channelDescriptor.sync_objects.messages,\n          roster: `${channelDescriptor.conversation_sid}.roster`,\n          lastConsumedMessageIndex: channelDescriptor.last_consumed_message_index,\n          notificationLevel: channelDescriptor.notification_level\n        })\n      );\n\n      pageToken = response.body.meta.next_token;\n      channels = [...channels, ...preProcessedChannels];\n    } while (pageToken);\n\n    return channels;\n  }\n}\n\nnamespace Channels {\n  export type DataSource = 'sync' | 'chat' | 'rest';\n}\n\nexport { Channel, Channels };\n","import { Logger } from './logger';\nimport { User } from './user';\nimport { Users } from './data/users';\nimport { parseAttributes } from './util';\n\nconst log = Logger.scope('UserDescriptor');\n\ninterface UserDescriptorServices {\n  users: Users;\n}\n\n/**\n * Contains extended user information.\n */\nclass UserDescriptor {\n\n  private services: UserDescriptorServices;\n  private descriptor: any;\n\n  /**\n   * User identity.\n   */\n  public readonly identity: string;\n\n  /**\n   * Friendly name of the user, null if not set.\n   */\n  public readonly friendlyName: string;\n\n  /**\n   * Custom attributes of the user.\n   */\n  public readonly attributes: any;\n\n  /**\n   * Status of the real-time conversation connection of the user.\n   *\n   * Works only when the reachability functionality is enabled.\n   * Refer to {@link Client.reachabilityEnabled}.\n   */\n  public readonly online: boolean;\n\n  /**\n   * User push notification registration status.\n   *\n   * Works only when the reachability functionality is enabled.\n   * Refer to {@link Client.reachabilityEnabled}.\n   */\n  public readonly notifiable: boolean;\n\n  /**\n   * @internal\n   */\n  constructor(services: UserDescriptorServices, descriptor: any) {\n    this.services = services;\n    this.descriptor = descriptor;\n\n    this.identity = descriptor.identity;\n    this.friendlyName = descriptor.friendly_name;\n    this.attributes = parseAttributes(descriptor.attributes, 'Failed to parse user attributes', log);\n    this.online = descriptor.is_online;\n    this.notifiable = descriptor.is_notifiable;\n  }\n\n  /**\n   * Get the user object from the descriptor and subscribe to it.\n   */\n  subscribe(): Promise<User> {\n    return this.services.users.getUser(this.identity, this.descriptor.sync_unique_name);\n  }\n\n  _getDescriptor() {\n    return this.descriptor;\n  }\n}\n\nexport {\n  UserDescriptor,\n  UserDescriptorServices\n};\n","import { UriBuilder } from '../util/index';\nimport { RestPaginator } from '../restpaginator';\nimport { UserDescriptor } from '../userdescriptor';\nimport { Users } from './users';\nimport { Network } from '../services/network';\nimport { Configuration } from '../configuration';\n\nexport interface UserDescriptorsServices {\n  users: Users;\n  network: Network;\n}\n\nclass UserDescriptors {\n  constructor(\n    private readonly configuration: Configuration,\n    private readonly services: UserDescriptorsServices,\n  ) {\n  }\n\n  public async getUserDescriptor(identity: string): Promise<UserDescriptor> {\n    const url = new UriBuilder(this.configuration.links.users).path(identity).build();\n    const response = await this.services.network.get(url);\n    return new UserDescriptor(this.services, response.body);\n  }\n\n  public async getChannelUserDescriptors(channelSid: string, args: any = {}): Promise<RestPaginator<UserDescriptor>> {\n    const url = new UriBuilder(this.configuration.links.users)\n      .arg('ConversationSid', channelSid).arg('PageToken', args.pageToken)\n      .build();\n    const response = await this.services.network.get(url);\n    return new RestPaginator<UserDescriptor>(response.body.users.map(x => new UserDescriptor(this.services, x))\n      , pageToken => this.getChannelUserDescriptors(channelSid, { pageToken })\n      , response.body.meta.prev_token\n      , response.body.meta.next_token);\n  }\n}\n\nexport { UserDescriptors };\n","import { UserUpdatedEventArgs, User, UserUpdateReason } from '../user';\nimport { UserDescriptor } from '../userdescriptor';\nimport { UserDescriptors } from './userdescriptors';\nimport { Paginator } from '../interfaces/paginator';\nimport { Network } from '../services/network';\nimport { SyncClient } from 'twilio-sync';\nimport { Configuration } from '../configuration';\nimport { CommandExecutor } from '../commandexecutor';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\ntype UsersEvents = {\n  userUpdated: (data: {\n    user: User;\n    updateReasons: UserUpdateReason[];\n  }) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n};\n\nexport interface UsersServices {\n  network: Network;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\n/**\n * @classdesc Container for known users\n * @fires Users#userUpdated\n */\nclass Users extends ReplayEventEmitter<UsersEvents> {\n\n  private userDescriptors: UserDescriptors;\n  private subscribedUsers: Map<string, User>;\n  private fifoStack: any;\n  public readonly myself: User;\n\n  constructor(\n    myself: User,\n    private readonly configuration: Configuration,\n    private readonly services: UsersServices\n  ) {\n    super();\n\n    this.fifoStack = [];\n\n    this.myself = myself;\n    this.myself.on('updated', (args: UserUpdatedEventArgs) => this.emit('userUpdated', args));\n    this.myself.on('userSubscribed', () => this.emit('userSubscribed', this.myself));\n    this.myself.on('userUnsubscribed', () => {\n      this.emit('userUnsubscribed', this.myself);\n      this.myself._ensureFetched();\n    });\n    this.subscribedUsers = new Map<string, User>();\n    this.userDescriptors = new UserDescriptors(this.configuration, {...this.services, users: this });\n  }\n\n  private handleUnsubscribeUser(user: User): void {\n    if (this.subscribedUsers.has(user.identity)) {\n      this.subscribedUsers.delete(user.identity);\n    }\n    let foundItemIndex = -1;\n    let foundItem = this.fifoStack.find((item, index) => {\n      if (item == user.identity) {\n        foundItemIndex = index;\n        return true;\n      }\n      return false;\n    });\n    if (foundItem) {\n      this.fifoStack.splice(foundItemIndex, 1);\n    }\n    this.emit('userUnsubscribed', user);\n  }\n\n  private handleSubscribeUser(user: User): void {\n    if (this.subscribedUsers.has(user.identity)) {\n      return;\n    }\n    if (this.fifoStack.length >= this.configuration.userInfosToSubscribe) {\n      this.subscribedUsers.get(this.fifoStack.shift()).unsubscribe();\n    }\n    this.fifoStack.push(user.identity);\n    this.subscribedUsers.set(user.identity, user);\n    this.emit('userSubscribed', user);\n  }\n\n  /**\n   * Gets user, if it's in subscribed list - then return the user object from it,\n   * if not - then subscribes and adds user to the FIFO stack\n   * @returns {Promise<User>} Fully initialized user\n   */\n  public async getUser(identity: string, entityName: string = null): Promise<User> {\n    await this.myself._ensureFetched();\n\n    if (identity == this.myself.identity) {\n      return this.myself;\n    }\n\n    let user = this.subscribedUsers.get(identity);\n    if (!user) {\n      if (!entityName) {\n        let userDescriptor = await this.getUserDescriptor(identity);\n        entityName = userDescriptor._getDescriptor().sync_objects.user_info_map;\n      }\n\n      user = new User(identity, entityName, this.configuration, this.services);\n      user.on('updated', (args: UserUpdatedEventArgs) => this.emit('userUpdated', args));\n      user.on('userSubscribed', () => this.handleSubscribeUser(user));\n      user.on('userUnsubscribed', () => this.handleUnsubscribeUser(user));\n      await user._ensureFetched();\n    }\n\n    return user;\n  }\n\n  /**\n   * @returns {Promise<UserDescriptor>} User descriptor\n   */\n  public async getUserDescriptor(identity: string): Promise<UserDescriptor> {\n    return this.userDescriptors.getUserDescriptor(identity);\n  }\n\n  /**\n   * @returns {Promise<Paginator<UserDescriptor>>} Users descriptors page for given channel sid\n   */\n  public async getChannelUserDescriptors(channelSid: string): Promise<Paginator<UserDescriptor>> {\n    return this.userDescriptors.getChannelUserDescriptors(channelSid);\n  }\n\n  /**\n   * @returns {Promise<Array<User>>} returns list of subscribed User objects {@see User}\n   */\n  public async getSubscribedUsers(): Promise<Array<User>> {\n    await this.myself._ensureFetched();\n\n    const users = [this.myself];\n    this.subscribedUsers.forEach((user) => users.push(user));\n\n    return users;\n  }\n}\n\nexport { Users };\n","import { Logger } from '../logger';\n\nimport { Notifications } from '@twilio/notifications';\n\nimport { NotificationTypes } from '../interfaces/notificationtypes';\nimport { Transport } from 'twilsock';\nimport { Configuration } from '../configuration';\n\nconst log = Logger.scope('TypingIndicator');\n\nexport interface TypingIndicatorServices {\n  transport: Transport;\n  notificationClient: Notifications;\n}\n\n/**\n * An important note in regards to typing timeout timers. There are two places that the SDK can get the \"typing_timeout\" attribute from. The first\n * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the\n * \"typing_timeout\" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a\n * notification of type \"twilio.ipmsg.typing_indicator\". In this case, the \"typing_timeout\" value will be +1 of that in the console. This\n * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,\n * the timeout returned from the notification should be used as the timeout for the \"typingEnded\" event, +1 is to account for latency.\n *\n * @private\n */\n\n/**\n * @class TypingIndicator\n *\n * @constructor\n * @private\n */\nclass TypingIndicator {\n  private sentUpdates: Map<string, number>;\n  private serviceTypingTimeout;\n\n  constructor(\n    private readonly getChannel,\n    private readonly configuration: Configuration,\n    private readonly services: TypingIndicatorServices\n  ) {\n    this.serviceTypingTimeout = null;\n    this.sentUpdates = new Map();\n  }\n\n  public get typingTimeout(): number {\n    return this.configuration.typingIndicatorTimeoutOverride\n      || this.serviceTypingTimeout\n      || this.configuration.typingIndicatorTimeoutDefault;\n  }\n\n  /**\n   * Initialize TypingIndicator controller\n   * Registers for needed message types and sets listeners\n   * @private\n   */\n  initialize(): void {\n    this.services.notificationClient.on('message', (type, message) => {\n      if (type === NotificationTypes.TYPING_INDICATOR) {\n        this._handleRemoteTyping(message);\n      }\n    });\n  }\n\n  /**\n   * Remote members typing events handler\n   * @private\n   */\n  private async _handleRemoteTyping(message) {\n    log.trace('Got new typing indicator ', message);\n\n    this.getChannel(message.channel_sid)\n      .then(channel => {\n        if (!channel) {\n          return;\n        }\n\n        channel.members.forEach(member => {\n          if (member.identity !== message.identity) {\n            return;\n          }\n\n          const timeout = this.configuration.typingIndicatorTimeoutOverride + 1000 || message.typing_timeout * 1000;\n          member._startTyping(timeout);\n        });\n      })\n      .catch(err => {\n        log.error(err);\n        throw err;\n      });\n  }\n\n  /**\n   * Send typing event for the given channel sid\n   * @param {String} channelSid\n   */\n  public async send(channelSid: string) {\n    const lastUpdate = this.sentUpdates.get(channelSid);\n    if (lastUpdate && lastUpdate > (Date.now() - this.typingTimeout)) {\n      return Promise.resolve();\n    }\n\n    this.sentUpdates.set(channelSid, Date.now());\n    return this._send(channelSid);\n  }\n\n  private async _send(channelSid: string) {\n    log.trace('Sending typing indicator');\n\n    const url = this.configuration.links.typing;\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    };\n    const body = 'ChannelSid=' + channelSid;\n\n    return this.services.transport.post<{ typing_timeout: number }>(url, headers, body, this.configuration.productId)\n      .then(response => {\n        if (response.body.hasOwnProperty('typing_timeout')) {\n          this.serviceTypingTimeout = response.body.typing_timeout * 1000;\n        }\n      }).catch(err => {\n        log.error('Failed to send typing indicator:', err);\n        throw err;\n      });\n  }\n}\n\nexport { TypingIndicator };\n","import { UriBuilder } from '../util/index';\nimport { RestPaginator } from '../restpaginator';\nimport { ChannelDescriptor } from '../channeldescriptor';\nimport { Network } from '../services/network';\nimport { Client } from '../client';\n\nexport interface UserChannelServices {\n  network: Network;\n}\n\n/**\n * Users channels collection\n * It's a cassandra-backed pull-based collection\n */\nclass UserChannels {\n  private client: Client;\n  private services: UserChannelServices;\n  private url: string;\n\n  constructor(client: Client, services: UserChannelServices, url: string) {\n    this.client = client;\n    this.services = services;\n    this.url = url;\n  }\n\n  public async getChannels(args: any = {}): Promise<RestPaginator<ChannelDescriptor>> {\n    const url = new UriBuilder(this.url).arg('PageToken', args.pageToken).build();\n    let response = await this.services.network.get(url);\n    return new RestPaginator<ChannelDescriptor>(response.body.conversations.map(x => new ChannelDescriptor(this.client, x))\n      , pageToken => this.getChannels({ pageToken })\n      , response.body.meta.previous_token\n      , response.body.meta.next_token);\n  }\n}\n\nexport { UserChannels };\n","/**\n * Push notification type.\n */\ntype PushNotificationType =\n  | 'twilio.channel.new_message'\n  | 'twilio.channel.added_to_channel'\n  | 'twilio.channel.invited_to_channel'\n  | 'twilio.channel.removed_from_channel';\n\ninterface PushNotificationDescriptor {\n  title: string;\n  body: string;\n  sound: string;\n  badge: number;\n  action: string;\n  type: PushNotificationType;\n  data: Object;\n}\n\n/**\n * Additional data for a given push notification.\n */\ninterface PushNotificationData {\n  /**\n   * SID of the conversation.\n   */\n  conversationSid?: string;\n\n  /**\n   * Index of the message in the conversation.\n   */\n  messageIndex?: number;\n\n  /**\n   * SID of the message in the conversation.s\n   */\n  messageSid?: string;\n}\n\n/**\n * Push notification for a Conversations client.\n */\nclass PushNotification {\n  /**\n   * Title of the notification.\n   */\n  public readonly title: string;\n\n  /**\n   * Text of the notification.\n   */\n  public readonly body: string;\n\n  /**\n   * Sound of the notification.\n   */\n  public readonly sound: string;\n\n  /**\n   * Number of the badge.\n   */\n  public readonly badge: number;\n\n  /**\n   * Notification action (`click_action` in FCM/GCM terms and `category` in APN terms).\n   */\n  public readonly action: string;\n\n  /**\n   * Type of the notification.\n   */\n  public readonly type: PushNotificationType;\n\n  /**\n   * Additional data of the conversation.\n   */\n  public readonly data: PushNotificationData;\n\n  /**\n   * @internal\n   */\n  constructor(data: PushNotificationDescriptor) {\n    this.title = data.title || null;\n    this.body = data.body || null;\n    this.sound = data.sound || null;\n    this.badge = data.badge || null;\n    this.action = data.action || null;\n    this.type = data.type || null;\n    this.data = data.data || {};\n  }\n}\n\nexport {\n  PushNotification,\n  PushNotificationType,\n  PushNotificationDescriptor,\n  PushNotificationData\n};\n","import { TransportResult as Result, Transport } from 'twilsock';\nimport { MutationConflictResponse } from './interfaces/commands/mutationconflict';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AsyncRetrier } from '@twilio/operation-retrier';\n\nexport interface CommandExecutorServices {\n  transport: Transport;\n}\n\nconst trimSlashes = (url: string): string =>\n  url.replace(/(^\\/+|\\/+$)/g, '');\n\nconst isMutationConflictResponse = (response: Result<unknown>): response is Result<MutationConflictResponse> =>\n  response.status.code === 202;\n\nclass CommandExecutor {\n  constructor(\n    private _serviceUrl: string,\n    private _services: CommandExecutorServices,\n    private _productId?: string\n  ) {}\n\n  private _preProcessUrl(url: string): string {\n    const trimmedUrl = trimSlashes(url);\n\n    if (/^https?:\\/\\//.test(url)) {\n      return trimmedUrl;\n    }\n\n    return `${trimSlashes(this._serviceUrl)}/${trimmedUrl}`;\n  }\n\n  private async _makeRequest<REQ = void, RESP = void>(\n    method: 'get' | 'post' | 'delete',\n    url: string,\n    requestBody?: REQ,\n    headers?: Record<string, string>\n  ): Promise<Result<RESP>> {\n    const preProcessedUrl = this._preProcessUrl(url);\n    const finalHeaders = {\n      'Content-Type': 'application/json; charset=utf-8',\n      ...(headers || {})\n    };\n    let response: Result<RESP>;\n\n    switch (method) {\n      case 'get':\n        let getUrl = preProcessedUrl;\n\n        if (requestBody) {\n          getUrl +=\n            '?' +\n            Object.entries(requestBody)\n              .map((entry) => entry.map(encodeURIComponent).join('='))\n              .join('&');\n        }\n\n        response = await this._services.transport.get(getUrl, finalHeaders, this._productId);\n        break;\n      case 'post':\n        response = await this._services.transport.post(preProcessedUrl, finalHeaders, JSON.stringify(requestBody), this._productId);\n        break;\n      case 'delete':\n        response = await this._services.transport.delete(preProcessedUrl, finalHeaders, null, this._productId);\n        break;\n    }\n\n    if (response.status.code < 200 || response.status.code >= 300) {\n      throw new Error(`Request responded with a non-success code ${response.status.code}`);\n    }\n\n    return response;\n  }\n\n  public async fetchResource<REQ = void, RESP = void>(\n    url: string,\n    requestBody?: REQ\n  ): Promise<RESP> {\n    const maxAttemptsCount = 6;\n    let result: Result<RESP>;\n\n    try {\n      result = await new AsyncRetrier({ min: 50, max: 1600, maxAttemptsCount })\n        .run(() => this._makeRequest<REQ, RESP>('get', url, requestBody));\n    } catch {\n      throw new Error(`Fetch resource from \"${url}\" failed.`);\n    }\n\n    return result.body;\n  }\n\n  public async mutateResource<REQ = void, RESP = void>(\n    method: 'post' | 'delete',\n    url: string,\n    requestBody?: REQ\n  ): Promise<RESP> {\n    const result = await this._makeRequest<REQ, RESP>(method, url, requestBody, {\n      'X-Twilio-Mutation-Id': uuidv4()\n    });\n\n    if (isMutationConflictResponse(result)) {\n      return await this.fetchResource<undefined, RESP>(result.body.resource_url);\n    }\n\n    return result.body;\n  }\n}\n\nexport { CommandExecutor };\n","import { Logger } from './logger';\nimport { Configuration } from './configuration';\n\nimport { UserUpdatedEventArgs, User, UserUpdateReason } from './user';\nimport { PublicChannels } from './data/publicchannels';\nimport { Network } from './services/network';\n\nimport { NotificationTypes } from './interfaces/notificationtypes';\n\nimport { Notifications as NotificationClient, ChannelType } from '@twilio/notifications';\nimport { TwilsockClient, InitRegistration, ConnectionState as TwilsockConnectionState, Transport } from 'twilsock';\nimport { SyncClient } from 'twilio-sync';\nimport { McsClient } from '@twilio/mcs-client';\n\nimport { Channels as ChannelsEntity, Channel } from './data/channels';\n\nimport { Users } from './data/users';\nimport { TypingIndicator } from './services/typingindicator';\nimport { UserDescriptor } from './userdescriptor';\nimport { UserChannels } from './data/userchannels';\nimport { ChannelDescriptor } from './channeldescriptor';\nimport { Paginator } from './interfaces/paginator';\nimport { PushNotification } from './pushnotification';\nimport { parseToNumber, deepClone } from './util';\nimport { Member, MemberUpdatedEventArgs, MemberUpdateReason } from './member';\nimport { Message, MessageUpdatedEventArgs, MessageUpdateReason } from './message';\nimport {\n  validateTypesAsync,\n  validateTypes,\n  literal,\n  nonEmptyString,\n  pureObject,\n  objectSchema,\n  validateConstructorTypes,\n  type,\n} from '@twilio/declarative-type-validator';\nimport { CommandExecutor } from './commandexecutor';\nimport { ConfigurationResponse } from './interfaces/commands/configuration';\nimport { version } from '../package.json';\nimport { ChannelUpdatedEventArgs, ChannelUpdateReason } from './channel';\nimport { ReplayEventEmitter } from '@twilio/replay-event-emitter';\n\nconst log = Logger.scope('Client');\nconst SDK_VERSION = version;\n\nclass ClientServices {\n  commandExecutor: CommandExecutor;\n  twilsockClient: TwilsockClient;\n  users: Users;\n  notificationClient: NotificationClient;\n  publicChannels: PublicChannels;\n  userChannels: UserChannels;\n  network: Network;\n  typingIndicator: TypingIndicator;\n  syncClient: SyncClient;\n  mcsClient: McsClient;\n  transport: Transport;\n}\n\ntype ClientEvents = {\n  channelAdded: (channel: Channel) => void;\n  channelInvited: (channel: Channel) => void;\n  channelJoined: (channel: Channel) => void;\n  channelLeft: (channel: Channel) => void;\n  channelRemoved: (channel: Channel) => void;\n  channelUpdated: (data: {\n    channel: Channel;\n    updateReasons: ChannelUpdateReason[];\n  }) => void;\n  memberJoined: (member: Member) => void;\n  memberLeft: (member: Member) => void;\n  memberUpdated: (data: {\n    member: Member;\n    updateReasons: MemberUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  tokenAboutToExpire: (ttl: number) => void;\n  tokenExpired: () => void;\n  typingEnded: (member: Member) => void;\n  typingStarted: (member: Member) => void;\n  pushNotification: (pushNotification: PushNotification) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n  userUpdated: (data: {\n    user: User;\n    updateReasons: UserUpdateReason[];\n  }) => void;\n  stateChanged: (state: State) => void;\n  connectionStateChanged: (state: TwilsockConnectionState) => void;\n  connectionError: (data: {\n    terminal: boolean;\n    message: string;\n    httpStatusCode?: number;\n    errorCode?: number;\n  }) => void;\n};\n\n/**\n * Connection state of the client. Possible values are as follows:\n * * `'connecting'` - client is offline and connection attempt is in process\n * * `'connected'` - client is online and ready\n * * `'disconnecting'` - client is going offline as disconnection is in process\n * * `'disconnected'` - client is offline and no connection attempt is in process\n * * `'denied'` - client connection is denied because of invalid JWT access token. User must\n * refresh token in order to proceed\n */\ntype ConnectionState = TwilsockConnectionState;\n\n/**\n * State of the client. Possible values are as follows:\n * * `'failed'` - the client failed to initialize\n * * `'initialized'` - the client successfully initialized\n */\ntype State = 'failed' | 'initialized';\n\n/**\n * Notifications channel type. Possible values are as follows:\n * * `'fcm'`\n * * `'apn'`\n */\ntype NotificationsChannelType = ChannelType;\n\ntype LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'silent' | null;\n\n/**\n * Chat client options.\n */\ninterface ClientOptions {\n  region?: string;\n\n  /**\n   * The level of logging to enable.\n   */\n  logLevel?: LogLevel;\n  productId?: string;\n  twilsockClient?: TwilsockClient;\n  transport?: Transport;\n  notificationsClient?: NotificationClient;\n  syncClient?: SyncClient;\n  typingIndicatorTimeoutOverride?: number;\n  consumptionReportIntervalOverride?: string;\n  httpCacheIntervalOverride?: number;\n  userInfosToSubscribeOverride?: number;\n  retryWhenThrottledOverride?: boolean;\n  backoffConfigOverride?: any;\n  Chat?: any;\n  IPMessaging?: any;\n  Sync?: any;\n  Notification?: any;\n  Twilsock?: any;\n  clientMetadata?: any;\n  disableDeepClone?: boolean;\n  initRegistrations?: InitRegistration[];\n}\n\n/**\n * Options for {@link Client.createChannel}.\n */\ninterface CreateChannelOptions {\n  /**\n   * Any custom attributes to attach to the channel.\n   */\n  attributes?: any;\n\n  /**\n   * A non-unique display name of the channel.\n   */\n  friendlyName?: string;\n\n  /**\n   * Signifies whether the channel is private.\n   */\n  isPrivate?: boolean;\n\n  /**\n   * A unique identifier of the channel.\n   */\n  uniqueName?: string;\n}\n\n/**\n * Channel sorting criteria.\n */\ntype ChannelSortingCriteria = 'lastMessage' | 'friendlyName' | 'uniqueName';\n\n/**\n * Channel sorting order.\n */\ntype ChannelSortingOrder = 'ascending' | 'descending';\n\n/**\n * Channel sorting options.\n */\ninterface ChannelSortingOptions {\n  /**\n   * Channel sorting criteria.\n   */\n  criteria?: ChannelSortingCriteria;\n\n  /**\n   * Channel sorting order.\n   */\n  order?: ChannelSortingOrder;\n}\n\n/**\n * A client is the starting point to the Twilio Programmable Chat functionality.\n */\n@validateConstructorTypes(nonEmptyString, [\n  pureObject,\n  'undefined',\n  literal(null),\n])\nclass Client extends ReplayEventEmitter<ClientEvents> {\n  /**\n   * Client connection state.\n   */\n  public connectionState: ConnectionState = 'unknown'; // @todo make private?\n  private _ensureReady: Promise<any> = null;\n  private _resolveEnsureReady: (value?: any) => void = null;\n  private _rejectEnsureReady: (err: Error) => void  = null;\n  private channelsPromise: Promise<ChannelsEntity> = null;\n  private configurationPromise: Promise<ConfigurationResponse> | null = null;\n  private configuration: Configuration;\n  private channels: ChannelsEntity;\n  private readonly services: ClientServices;\n  private readonly _myself: User;\n\n  /**\n   * Current version of the Chat client.\n   */\n  public static readonly version = SDK_VERSION;\n\n  /**\n   * Current version of the Chat client.\n   */\n  public readonly version = SDK_VERSION;\n\n  private static readonly supportedPushChannels: NotificationsChannelType[] = ['fcm', 'apn'];\n  private static readonly supportedPushDataFields = {\n    'channel_sid': 'channelSid',\n    'message_sid': 'messageSid',\n    'message_index': 'messageIndex'\n  };\n\n  /**\n   * Returned client instance is not yet fully initialized. Calling any operations will block until it is.\n   * Use connection events to monitor when client becomes fully available (connectionStateChanged with state\n   * 'connected') or not available (connectionStateChange with state 'denied', event tokenExpired, event connectionError).\n   *\n   * @param fpaToken Access token\n   * @param options Options to customize the Client\n   * @returns A not yet fully-initialized client.\n   */\n  public constructor(\n    private fpaToken: string,\n    private readonly options: ClientOptions = {}\n  ) {\n    super();\n\n    this.options = this.options ?? {};\n\n    if (!this.options.disableDeepClone) {\n      let options = {\n        ...this.options,\n        transport: undefined,\n        twilsockClient: undefined\n      };\n\n      options = deepClone(options);\n      options.transport = this.options.transport;\n      options.twilsockClient = this.options.twilsockClient;\n\n      this.options = options;\n    }\n\n    this.options.logLevel = this.options.logLevel ?? 'silent';\n    log.setLevel(this.options.logLevel);\n\n    const productId = this.options.productId = 'ip_messaging';\n\n    // Fill ClientMetadata\n    this.options.clientMetadata = this.options.clientMetadata ?? {};\n\n    if (!this.options.clientMetadata.hasOwnProperty('type')) {\n      this.options.clientMetadata.type = 'chat';\n    }\n\n    if (!this.options.clientMetadata.hasOwnProperty('sdk')) {\n      this.options.clientMetadata.sdk = 'JS';\n      this.options.clientMetadata.sdkv = SDK_VERSION;\n    }\n\n    // Enable session local storage for Sync\n    this.options.Sync = this.options.Sync ?? {};\n\n    if (!this.options.Sync?.enableSessionStorage) {\n      this.options.Sync.enableSessionStorage = true;\n    }\n\n    if (this.options.region) {\n      this.options.Sync.region = this.options.region;\n    }\n\n    this.services = new ClientServices();\n\n    const startTwilsock = !this.options.twilsockClient;\n\n    // Create default init registrations if none were provided.\n    // Otherwise, the outside party have to list all the init registrations they need, including Sync ones.\n    if (!this.options.initRegistrations) {\n      const initRegistration = new InitRegistration(productId);\n      Client.populateInitRegistrations(initRegistration);\n      SyncClient.populateInitRegistrations(initRegistration);\n      this.options.initRegistrations = [initRegistration];\n    }\n\n    this.services.twilsockClient = (this.options.twilsockClient = this.options.twilsockClient\n      ?? new TwilsockClient(fpaToken, productId, this.options));\n\n    this.services.twilsockClient.on('tokenAboutToExpire', (ttl) => this.emit('tokenAboutToExpire', ttl));\n    this.services.twilsockClient.on('tokenExpired', () => this.emit('tokenExpired'));\n    this.services.twilsockClient.on('connectionError', (error) => this.emit('connectionError', error));\n    this.services.twilsockClient.on('stateChanged', (state: ConnectionState) => {\n      log.debug(`Handling stateChanged for ChatClient: new state ${state}`);\n      if (state !== this.connectionState) {\n        this.connectionState = state;\n        this.emit('connectionStateChanged', this.connectionState);\n      }\n    });\n\n    this.services.transport = (this.options.transport = (this.options.transport ?? this.options.twilsockClient) as Transport);\n    this.services.notificationClient = (this.options.notificationsClient = this.options.notificationsClient\n      ?? new NotificationClient(fpaToken, this.options));\n    this.services.syncClient = (this.options.syncClient = this.options.syncClient\n      ?? new SyncClient(fpaToken, this.options));\n\n    const configurationOptions = this.options?.Chat ?? this.options?.IPMessaging ?? this.options ?? {};\n    const region = configurationOptions.region ?? this.options.region;\n    const baseUrl = configurationOptions.apiUri\n      ?? configurationOptions.typingUri\n      ?? `https://aim.${region || 'us1'}.twilio.com`;\n\n    this.services.commandExecutor = new CommandExecutor(baseUrl, { transport: this.options.transport }, productId);\n\n    const emitFailed = (err): void => {\n      this._rejectEnsureReady(err);\n      this.emit('stateChanged', 'failed');\n    };\n\n    this.services.twilsockClient.once('connectionError', emitFailed);\n    this.services.twilsockClient.once('disconnected', emitFailed);\n\n    // ChatClient will be able to initialize only after twilsock is connected\n    this.services.twilsockClient.once('connected', async () => {\n      log.debug(`ChatClient started INITIALIZING`);\n      this.services.twilsockClient.off('connectionError', emitFailed);\n      this.services.twilsockClient.off('disconnected', emitFailed);\n      try {\n        await this._initialize();\n      } catch (err) {\n        // Fail ChatClient if initialization is incomplete\n        this._rejectEnsureReady(err);\n        this.emit('stateChanged', 'failed');\n      }\n    });\n\n    this._ensureReady = new Promise((resolve, reject) => {\n      this._resolveEnsureReady = resolve;\n      this._rejectEnsureReady = reject;\n    }).catch((err) => {}); // @todo How to process unhandled rejection here?\n\n    this._myself = new User(\n      '',\n      '',\n      null,\n      this.services\n    );\n\n    if (startTwilsock) {\n      this.services.twilsockClient.connect();\n    }\n  }\n\n  /**\n   * Fired when a channel becomes visible to the client. The event is also triggered when the client creates a new channel.\n   * Fired for all channels client has joined.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelAdded = 'channelAdded';\n\n  /**\n   * Fired when the client gets invited to a channel.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelInvited = 'channelInvited';\n\n  /**\n   * Fired when the client joins a channel.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelJoined = 'channelJoined';\n\n  /**\n   * Fired when the client leaves a channel.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelLeft = 'channelLeft';\n\n  /**\n   * Fired when a channel is no longer visible to the client.\n   *\n   * Parameters:\n   * 1. {@link Channel} `channel` - the channel in question\n   * @event\n   */\n  static readonly channelRemoved = 'channelRemoved';\n\n  /**\n   * Fired when the attributes or the metadata of a channel have been updated.\n   * During channel's {@link Client.constructor| creation and initialization}, this event might be fired multiple times\n   * for same joined or created channel as new data is arriving from different sources.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Channel} `channel` - the channel in question\n   *     * {@link ChannelUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  static readonly channelUpdated = 'channelUpdated';\n\n  /**\n   * Fired when a member has joined a channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly memberJoined = 'memberJoined';\n\n  /**\n   * Fired when a member has left a channel.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly memberLeft = 'memberLeft';\n\n  /**\n   * Fired when a member's fields have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Member} `member` - the member in question\n   *     * {@link MemberUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  static readonly memberUpdated = 'memberUpdated';\n\n  /**\n   * Fired when a new message has been added to the channel on the server.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - the message in question\n   * @event\n   */\n  static readonly messageAdded = 'messageAdded';\n\n  /**\n   * Fired when a message is removed from the message list of a channel.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - the message in question\n   * @event\n   */\n  static readonly messageRemoved = 'messageRemoved';\n\n  /**\n   * Fired when the fields of an existing message are updated with new values.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} `message` - the message in question\n   *     * {@link MessageUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  static readonly messageUpdated = 'messageUpdated';\n\n  /**\n   * Fired when the token is about to expire and needs to be updated.\n   *\n   * * Parameters:\n   * 1. number `ttl` - token's time to live\n   * @event\n   */\n  static readonly tokenAboutToExpire = 'tokenAboutToExpire';\n\n  /**\n   * Fired when the token has expired.\n   * @event\n   */\n  static readonly tokenExpired = 'tokenExpired';\n\n  /**\n   * Fired when a member has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly typingEnded = 'typingEnded';\n\n  /**\n   * Fired when a member has started typing.\n   *\n   * Parameters:\n   * 1. {@link Member} `member` - the member in question\n   * @event\n   */\n  static readonly typingStarted = 'typingStarted';\n\n  /**\n   * Fired when the client has received (and parsed) a push notification via one of the push channels (apn or fcm).\n   *\n   * Parameters:\n   * 1. {@link PushNotification} `pushNotification` - the push notification in question\n   * @event\n   */\n  static readonly pushNotification = 'pushNotification';\n\n  /**\n   * Fired when the client has subscribed to a user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  static readonly userSubscribed = 'userSubscribed';\n\n  /**\n   * Fired when the client has unsubscribed from a user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  static readonly userUnsubscribed = 'userUnsubscribed';\n\n  /**\n   * Fired when the properties or the reachability status of a user have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link User} `user` - the user in question\n   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  static readonly userUpdated = 'userUpdated';\n\n  /**\n   * Fired when the connection is interrupted for an unexpected reason.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * boolean `terminal` - Twilsock will stop connection attempts if true\n   *     * string `message` - the error message of the root cause\n   *     * number? `httpStatusCode` - http status code if available\n   *     * number? `errorCode` - Twilio public error code if available\n   * @event\n   */\n  static readonly connectionError = 'connectionError';\n\n  /**\n   * Fired when the state of the client has been changed.\n   *\n   * Parameters:\n   * 1. {@link State} `state` - the new client state\n   * @event\n   */\n  static readonly stateChanged = 'stateChanged';\n\n  /**\n   * Fired when the connection state of the client has been changed.\n   *\n   * Parameters:\n   * 1. {@link ConnectionState} `connectionState` - the updated connection state\n   * @event\n   */\n  static readonly connectionStateChanged = 'connectionStateChanged';\n\n  /**\n   * @deprecated Call constructor directly.\n   *\n   * Factory method to create Chat client instance.\n   *\n   * The factory method will automatically trigger connection.\n   * Do not use it if you need finer-grained control.\n   *\n   * @param token Access token.\n   * @param options Options to customize the client.\n   * @returns Returns a fully initialized client.\n   */\n  public static async create(token: string, options?: ClientOptions): Promise<Client> {\n    // The logic is as follows:\n    // - If twilsock is not passed in, then the ChatClient constructor will call twilsock.connect() by itself\n    //   and we do not need to do it here.\n    // - If twilsock was passed in from the outside, but customer called ChatClient.create() then they are\n    //   using an obsolete workflow and the startup sequence will never complete.\n    if (options?.twilsockClient) {\n      throw new Error('Obsolete usage of ChatClient.create() factory method: if you pass twilsock from the outside then you must use ChatClient constructor and be prepared to work with uninitialized client.');\n    }\n\n    const client = new Client(token, options);\n    await client._ensureReady;\n\n    return client;\n  }\n\n  /**\n   * Information of the logged-in user. Before client initialization, returns an\n   * uninitialized user. Will trigger a {@link Client.userUpdated} event after\n   * initialization.\n   */\n  public get user(): User { return this._myself; }\n\n  /**\n   * Client reachability state. Throws if accessed before the client\n   * initialization was completed.\n   */\n  public get reachabilityEnabled(): boolean {\n    if (!this.configuration) {\n      throw new Error(\n        'Reachability information could not yet be accessed as the client ' +\n        \"has not yet been initialized. Subscribe to the 'stateChanged' event \" +\n        'to properly react to the client initialization.'\n      );\n    }\n\n    return this.configuration.reachabilityEnabled;\n  }\n\n  public get token(): string { return this.fpaToken; }\n\n  public static populateInitRegistrations(reg: InitRegistration) {\n    reg.populateInitRegistrations([NotificationTypes.TYPING_INDICATOR]);\n  }\n\n  private _subscribeToPushNotifications(channelType: NotificationsChannelType): void {\n    [NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CHANNEL,\n      NotificationTypes.INVITED_TO_CHANNEL,\n      NotificationTypes.REMOVED_FROM_CHANNEL,\n      NotificationTypes.CONSUMPTION_UPDATE] // Supported only on iOS\n      .forEach(messageType => {\n        this.services.notificationClient.subscribe(channelType, messageType);\n      });\n  }\n\n  private _unsubscribeFromPushNotifications(channelType: NotificationsChannelType): void {\n    [NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CHANNEL,\n      NotificationTypes.INVITED_TO_CHANNEL,\n      NotificationTypes.REMOVED_FROM_CHANNEL,\n      NotificationTypes.CONSUMPTION_UPDATE] // Supported only on iOS\n      .forEach(messageType => {\n        this.services.notificationClient.unsubscribe(channelType, messageType);\n      });\n  }\n\n  private async _initialize() {\n    const configurationResponse = await this.services.commandExecutor.fetchResource<void, ConfigurationResponse>(\n      'Client/v1/Configuration'\n    );\n\n    this.configuration = new Configuration(this.options, configurationResponse, log);\n\n    this._myself._resolveInitialization(\n      this.configuration,\n      this.configuration.userIdentity,\n      this.configuration.userInfo,\n      true\n    );\n\n    this.services.typingIndicator = new TypingIndicator(this.getChannelBySid.bind(this), this.configuration, this.services);\n    this.services.network = new Network(this.configuration, this.services);\n\n    this.services.users = new Users(this._myself, this.configuration, this.services);\n    this.services.users.on('userSubscribed', this.emit.bind(this, 'userSubscribed'));\n    this.services.users.on('userUpdated', (args: UserUpdatedEventArgs) => this.emit('userUpdated', args));\n    this.services.users.on('userUnsubscribed', this.emit.bind(this, 'userUnsubscribed'));\n\n    this.channels = new ChannelsEntity(this.configuration, this.services);\n    this.channels.on('channelAdded', this.emit.bind(this, 'channelAdded'));\n    this.channels.on('channelInvited', this.emit.bind(this, 'channelInvited'));\n    this.channels.on('channelRemoved', this.emit.bind(this, 'channelRemoved'));\n    this.channels.on('channelJoined', this.emit.bind(this, 'channelJoined'));\n    this.channels.on('channelLeft', this.emit.bind(this, 'channelLeft'));\n    this.channels.on('channelUpdated',\n      (args: ChannelUpdatedEventArgs) => this.emit('channelUpdated', args));\n\n    this.channels.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n    this.channels.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n    this.channels.on('memberUpdated',\n      (args: MemberUpdatedEventArgs) => this.emit('memberUpdated', args));\n\n    this.channels.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n    this.channels.on('messageUpdated',\n      (args: MessageUpdatedEventArgs) => this.emit('messageUpdated', args));\n    this.channels.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n\n    this.channels.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n    this.channels.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n\n    this.channelsPromise = this.channels.fetchChannels()\n      .then(() => this.channels)\n      .catch((err) => { throw err; });\n\n    await this.services.users.myself._ensureFetched();\n\n    Client.supportedPushChannels.forEach(channelType => this._subscribeToPushNotifications(channelType));\n    this.services.typingIndicator.initialize();\n\n    this.services.publicChannels = new PublicChannels(this, this.services, this.configuration.links.conversations);\n    this.services.userChannels = new UserChannels(this, this.services, this.configuration.links.myConversations);\n\n    this.services.mcsClient = new McsClient(this.fpaToken, this.configuration.links.mediaService, null, {\n      ...this.options,\n      transport: null,\n    });\n\n    this._resolveEnsureReady();\n    this.emit('stateChanged', 'initialized');\n  }\n\n  /**\n   * Gracefully shut down the client.\n   */\n  public async shutdown(): Promise<void> {\n    await this._ensureReady;\n    await this.services.syncClient.shutdown(); // also disconnects twilsock\n  }\n\n  /**\n   * Update the token used by the client and re-register with the Programmable Chat services.\n   * @param token New access token.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async updateToken(token: string): Promise<Client> {\n    await this._ensureReady;\n    log.info('updateToken');\n\n    if (this.fpaToken === token) {\n      return this;\n    }\n\n    await this.services.twilsockClient.updateToken(token);\n    this.fpaToken = token;\n    this.services.mcsClient.updateToken(token);\n    await this.configurationPromise;\n\n    return this;\n  }\n\n  /**\n   * Get a known channel by its SID.\n   * @param channelSid Channel sid\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getChannelBySid(channelSid: string): Promise<Channel> {\n    await this._ensureReady;\n    await this.channels.myChannelsRead.promise;\n    let channel: Channel | ChannelDescriptor = await this.channels.getChannel(channelSid);\n    if (!channel) {\n      channel = await this.services.publicChannels.getChannelBySid(channelSid);\n    }\n    return await this.channels.pushChannel(channel);\n  }\n\n  /**\n   * Get a known channel by its unique identifier name.\n   * @param uniqueName The unique identifier name of the channel.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getChannelByUniqueName(uniqueName: string): Promise<Channel> {\n    await this._ensureReady;\n    await this.channels.myChannelsRead.promise;\n    const channel = await this.services.publicChannels.getChannelByUniqueName(uniqueName);\n    return await this.channels.pushChannel(channel);\n  }\n\n  /**\n   * Get the current list of all the subscribed channels.\n   */\n  public async getSubscribedChannels(args?): Promise<Paginator<Channel>> {\n    await this._ensureReady;\n    const channelsEntity = await this.channelsPromise;\n    return await channelsEntity.getChannels(args);\n  }\n\n  /**\n   * Get an array of channels that are locally known to the client in the provided sorting order.\n   * Locally known channels are the ones that are created and/or joined during the client runtime\n   * and all the subscribed channel of the currently-logged-in user.\n   * To ensure that the full list of the subscribed channels has fetched, call the\n   * {@link Client.getSubscribedChannels} method\n   * and fetch all the pages with the help of the {@link RestPaginator.nextPage} method.\n   * @param sortingOptions Sorting options.\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('sorting options', {\n      criteria: [literal('lastMessage', 'friendlyName', 'uniqueName'), 'undefined'],\n      order: [literal('ascending', 'descending'), 'undefined']\n    })\n  ])\n  public async getLocalChannels(sortingOptions?: ChannelSortingOptions): Promise<Array<Channel>> {\n    await this._ensureReady;\n    const channelsEntity = await this.channelsPromise;\n    let result: Channel[] = Array.from(channelsEntity.channels.values());\n    const sortingOrder = sortingOptions?.order || 'ascending';\n\n    if (sortingOptions?.criteria) {\n      if (sortingOptions.criteria === 'lastMessage') {\n        result.sort((a: Channel, b: Channel) =>\n          Client.compareChannelsByLastMessage(a, b, sortingOrder));\n      } else if (sortingOptions.criteria === 'uniqueName') {\n        result.sort((a: Channel, b: Channel) =>\n          Client.compareChannelsByStringProperty(a.uniqueName, b.uniqueName, sortingOrder));\n      } else if (sortingOptions.criteria === 'friendlyName') {\n        result.sort((a: Channel, b: Channel) =>\n          Client.compareChannelsByStringProperty(a.friendlyName, b.friendlyName, sortingOrder));\n      }\n    }\n\n    return result;\n  }\n\n  private static compareChannelsByLastMessage(a: Channel, b: Channel, order: ChannelSortingOrder) {\n    const lessThan = (a: Channel, b: Channel): number => {\n      if (a.lastMessage?.dateCreated?.getTime() > b.lastMessage?.dateCreated?.getTime()) {\n        // console.log('A time > B time');\n        return 1;\n      } else if (a.lastMessage?.dateCreated?.getTime() < b.lastMessage?.dateCreated?.getTime()) {\n        // console.log('A time < B time');\n        return -1;\n      }\n\n      if (b.lastMessage?.dateCreated) {\n        // console.log('B has time');\n        return 1;\n      } else if (a.lastMessage?.dateCreated) {\n        // console.log('A has time');\n        return -1;\n      }\n\n      if (b.lastMessage) {\n        // console.log('B has lastmessage');\n        return 1;\n      } else if (a.lastMessage) {\n        // console.log('A has lastmessage');\n        return -1;\n      }\n\n      return 0;\n    };\n    const result = lessThan(a, b);\n    console.log(`Sorted ${a.sid} and ${b.sid}: return ${result}`);\n    return (order === 'ascending') ? result : -result;\n  }\n\n  private static compareChannelsByStringProperty(str1: string, str2: string, order: ChannelSortingOrder) {\n    const lessThan = (a: string, b: string): number => {\n      if (a && b) {\n        return str1.localeCompare(str2);\n      } else if (b) {\n        return 1;\n      } else if (a) {\n        return -1;\n      }\n\n      return 0;\n    };\n    const result = lessThan(str1, str2);\n    return (order === 'ascending') ? result : -result;\n  }\n\n  /**\n   * Get the content of the public channels directory.\n   */\n  public async getPublicChannelDescriptors(): Promise<Paginator<ChannelDescriptor>> {\n    await this._ensureReady;\n    return await this.services.publicChannels.getChannels();\n  }\n\n  /**\n   * Get the content of the channels directory of the user (created by, joined or invited to).\n   */\n  public async getUserChannelDescriptors(): Promise<Paginator<ChannelDescriptor>> {\n    await this._ensureReady;\n    return await this.services.userChannels.getChannels();\n  }\n\n  /**\n   * Create a channel on the server and subscribe to its events.\n   * The default is a public channel with an empty friendly name.\n   * @param options Options for the channel.\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('channel options', {\n      friendlyName: ['string', 'undefined'],\n      isPrivate: ['boolean', 'undefined'],\n      uniqueName: ['string', 'undefined']\n    })\n  ])\n  public async createChannel(options?: CreateChannelOptions): Promise<Channel> {\n    await this._ensureReady;\n    options = options || {};\n    const channelsEntity = await this.channelsPromise;\n    return await channelsEntity.addChannel(options);\n  }\n\n  /**\n   * Register for push notifications.\n   * @param channelType Channel type.\n   * @param registrationId Push notification ID provided by the platform.\n   */\n  @validateTypesAsync(literal('fcm', 'apn'), 'string')\n  public async setPushRegistrationId(channelType: NotificationsChannelType, registrationId: string): Promise<void> {\n    await this._ensureReady;\n    this.services.notificationClient.setPushRegistrationId(channelType, registrationId);\n    await this.services.notificationClient.commitChanges(); // Committing before this point is useless because we have no push id\n  }\n\n  /**\n   * Unregister from push notifications.\n   * @param channelType Channel type.\n   */\n  @validateTypesAsync(literal('fcm', 'apn'))\n  public async unsetPushRegistrationId(channelType: NotificationsChannelType): Promise<void> {\n    await this._ensureReady;\n    // await this.services.notificationClient.removeRegistrations(..) // @todo\n    // old version:\n    this._unsubscribeFromPushNotifications(channelType);\n    await this.services.notificationClient.commitChanges();\n  }\n\n  private static parsePushNotificationChatData(data: Object): Object {\n    let result: Object = {};\n    for (let key in Client.supportedPushDataFields) {\n      if (typeof data[key] !== 'undefined' && data[key] !== null) {\n        if (key === 'message_index') {\n          if (parseToNumber(data[key]) !== null) {\n            result[Client.supportedPushDataFields[key]] = Number(data[key]);\n          }\n        } else {\n          result[Client.supportedPushDataFields[key]] = data[key];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Static method for push notification payload parsing. Returns parsed push as a {@link PushNotification} object.\n   * @param notificationPayload Push notification payload.\n   */\n  @validateTypes(pureObject)\n  public static parsePushNotification(notificationPayload): PushNotification {\n    log.debug('parsePushNotification, notificationPayload=', notificationPayload);\n\n    // APNS specifics\n    if (typeof notificationPayload.aps !== 'undefined') {\n      if (!notificationPayload.twi_message_type) {\n        throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n      }\n\n      let data = Client.parsePushNotificationChatData(notificationPayload);\n\n      let apsPayload = notificationPayload.aps;\n      let body: string = null;\n      let title: string = null;\n      if (typeof apsPayload.alert === 'string') {\n        body = apsPayload.alert || null;\n      } else {\n        body = apsPayload.alert.body || null;\n        title = apsPayload.alert.title || null;\n      }\n\n      return new PushNotification({\n        title: title,\n        body: body,\n        sound: apsPayload.sound || null,\n        badge: apsPayload.badge || null,\n        action: apsPayload.category || null,\n        type: notificationPayload.twi_message_type,\n        data: data\n      });\n    }\n\n    // FCM specifics\n    if (typeof notificationPayload.data !== 'undefined') {\n      let dataPayload = notificationPayload.data;\n      if (!dataPayload.twi_message_type) {\n        throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n      }\n\n      let data = Client.parsePushNotificationChatData(notificationPayload.data);\n      return new PushNotification({\n        title: dataPayload.twi_title || null,\n        body: dataPayload.twi_body || null,\n        sound: dataPayload.twi_sound || null,\n        badge: null,\n        action: dataPayload.twi_action || null,\n        type: dataPayload.twi_message_type,\n        data: data\n      });\n    }\n\n    throw new Error('Provided push notification payload is not Programmable Chat notification');\n  }\n\n  public parsePushNotification = Client.parsePushNotification;\n\n  /**\n   * Handle push notification payload parsing and emit the {@link Client.pushNotification} event on this {@link Client} instance.\n   * @param notificationPayload Push notification payload\n   */\n  @validateTypesAsync(pureObject)\n  public async handlePushNotification(notificationPayload): Promise<void> {\n    await this._ensureReady;\n    log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n    this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n  }\n\n  /**\n   * Gets a user with the given identity. If it's in the subscribed list, then return the user object from it;\n   * if not, then subscribe and add user to the subscribed list.\n   * @param identity Identity of the user.\n   * @returns A fully initialized user.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getUser(identity: string): Promise<User> {\n    await this._ensureReady;\n    return await this.services.users.getUser(identity);\n  }\n\n  /**\n   * Gets the user descriptor for given identity.\n   * @param identity Identity of the user.\n   * @returns The user descriptor.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getUserDescriptor(identity: string): Promise<UserDescriptor> {\n    await this._ensureReady;\n    return await this.services.users.getUserDescriptor(identity);\n  }\n\n  /**\n   * Get a list of subscribed user objects.\n   */\n  public async getSubscribedUsers(): Promise<Array<User>> {\n    await this._ensureReady;\n    return await this.services.users.getSubscribedUsers();\n  }\n}\n\nexport {\n  Client,\n  ConnectionState,\n  NotificationsChannelType,\n  LogLevel,\n  ClientOptions,\n  CreateChannelOptions,\n  ChannelSortingCriteria,\n  ChannelSortingOrder,\n  ChannelSortingOptions,\n  State\n};\n"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","log","loglevelLog","toSeconds","parseDuration","parseTime","isEqual","ReplayEventEmitter","validateTypesAsync","literal","Retrier","nonEmptyString","nonNegativeInteger","custom","objectSchema","AsyncRetrier","uuidv4","Client","InitRegistration","SyncClient","TwilsockClient","NotificationClient","ChannelsEntity","McsClient","pureObject","validateTypes","validateConstructorTypes"],"mappings":"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"}